<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:local="*"
					   xmlns:FileManipulation="FileManipulation.*"
					   xmlns:IntervalsSlider="IntervalsSlider.*"
					   xmlns:supportClasses="IntervalsSlider.supportClasses.*"
					   width="100%" height="100%" backgroundColor="white"
					   initialize="windowedapplication1_initializeHandler(event)" 
					   creationComplete="windowedapplication1_creationCompleteHandler(event)" xmlns:ComboBox="ComboBox.*">	
	<fx:Style source="Styles.css"/>
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->		
		<mx:DateFormatter id="dateFormatter" formatString="NN:SS"/>	
		<!--fx:XML id="xsltFile" source="SpecificFormattersManager/xslt.xml"/-->
		<fx:XML id="xsltFile" source="SpecificFormattersManager/xsltFile.xml"/>	
		
		<!-- XML list com as opções da barra de menus principal -->
		<fx:XMLList id="menuList">	
			<menuitem label="Projeto" data="top" index="0">
				<menuitem label="Salvar" />
				<menuitem label="Sair" enabled="false" />
			</menuitem>
			<menuitem label="Função" data="top" index="1">
				<menuitem label="Logar como Administrador" data="1" enabled="{adminEnable}"/>
				<menuitem label="Logar como Conteudista" data="2" enabled="{contenterEnable}"/>
				<menuitem label="Logar como Narrador" data="0" enabled="{narratorEnable}"/>				
			</menuitem>
			<menuitem label="Ajuda" data="top" index="2"/>			
		</fx:XMLList>
	</fx:Declarations>
	
	<fx:Script>		
		<![CDATA[			
			import FileManipulation.FileStreamWithLineReader;
			import FileManipulation.LabelUtil1;
			
			import IntervalsSlider.MultiThumbHSlider;
			import IntervalsSlider.SliderInfo;
			import IntervalsSlider.events.MouseEventWithInfo;
			import IntervalsSlider.events.ThumbEvent;
			import IntervalsSlider.events.TrackHighlightEvent;
			import IntervalsSlider.skins.track.HSliderWideTrackHighlightSkin;
			import IntervalsSlider.supportClasses.SliderTrackHighlight;
			
			import MetaDocumentManager.AudioContent;
			import MetaDocumentManager.ContentConverterToXML;
			import MetaDocumentManager.ImageContent;
			import MetaDocumentManager.MainContent;
			import MetaDocumentManager.TextContent;
			
			import SpecificFormattersManager.NCL_generator;			
			import TemplateManager.TextTemplate;
			
			import XML.Destaque;
			import XML.ObjectConverter;
			
			import flash.debugger.enterDebugger;
			import flash.sampler.NewObjectSample;
			import flash.utils.clearInterval;
			import flash.utils.flash_proxy;
			
			import mx.charts.AreaChart;
			import mx.charts.chartClasses.ChartElement;
			import mx.charts.series.ColumnSeries;
			import mx.collections.ArrayCollection;
			import mx.collections.ArrayList;
			import mx.collections.ICollectionView;
			import mx.containers.ControlBar;
			import mx.containers.Panel;
			import mx.containers.VBox;
			import mx.controls.Alert;
			import mx.controls.ColorPicker;
			import mx.controls.ComboBox;
			import mx.controls.DataGrid;
			import mx.controls.ProgressBarMode;
			import mx.controls.Spacer;
			import mx.controls.TextInput;
			import mx.controls.VideoDisplay;
			import mx.controls.listClasses.ListBase;
			import mx.controls.listClasses.ListBaseSelectionData;
			import mx.controls.sliderClasses.Slider;
			import mx.core.DragSource;
			import mx.core.FlexBitmap;
			import mx.core.FlexLoader;
			import mx.core.UIComponent;
			import mx.core.mx_internal;
			import mx.events.CloseEvent;
			import mx.events.ColorPickerEvent;
			import mx.events.DataGridEvent;
			import mx.events.DataGridEventReason;
			import mx.events.DragEvent;
			import mx.events.EffectEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.events.MenuEvent;
			import mx.events.SliderEvent;
			import mx.events.StateChangeEvent;
			import mx.events.VideoEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			import mx.messaging.Channel;
			import mx.rpc.xml.SimpleXMLDecoder;
			import mx.utils.object_proxy;
			
			import org.osmf.events.PlayEvent;
			import org.osmf.events.TimeEvent;
			
			import spark.components.ComboBox;
			import spark.components.HSlider;
			import spark.components.Panel;
			import spark.components.TextInput;
			import spark.components.VideoDisplay;
			import spark.components.mediaClasses.ScrubBar;
			import spark.components.supportClasses.ListBase;
			import spark.components.supportClasses.SkinnableComponent;
			import spark.components.supportClasses.TrackBase;
			import spark.core.IDisplayText;
			import spark.events.DropDownEvent;
			import spark.events.IndexChangeEvent;
			import spark.events.TrackBaseEvent;
			
			[Event(name="audioEvent", type="EventWithInfo")]
			private static const ADD_TASK:String = "Clique aqui para adicionar destaque";
			
			[Bindable]
			private var tasks:ArrayCollection;
			
			private var silenceFile:String;
			private var dropDownListSelection:int = -1;			
			private var tempoInicial:Object = new Object();
			private var tempoFinal:Object = new Object();
			private var editedRow:Object = new Object();	
			private var labelUtil:LabelUtil1 = new LabelUtil1();
			private var elementIndexCounter:ArrayCollection = new ArrayCollection();
			private var trackHighlightArray:ArrayCollection = new ArrayCollection();
			private var trackHighlightItens:ArrayCollection = new ArrayCollection();
			private var elementDrawn:Boolean = false;	
			
			private var intervalFit:Boolean = true;
			private var allTimesSelected:ArrayCollection = new ArrayCollection();
			private var count:int = 0;
			private var sliderActiveIndex:int = 0;
			private var activeSlider:Array = new Array();
			private var wasPlayingBeforeSeeking:Boolean;     //usado para controles da exibição do video
			private var silenceSlidersDrawn:Boolean = false;
			private	var sliderTrackArray:ArrayCollection = new ArrayCollection();	
			private var allSilenceSliders:ArrayCollection = new ArrayCollection();
			private var allContentInfo:ArrayCollection = new ArrayCollection();
			
			//variaveis que guardam width e height originais do conteudo inserido
			private var originalWidth:Number;
			private var originalHeight:Number;
			
			//variaveis referentes ao numero do label de cada conteudo inserido
			private var labelCounter:int = 0;
			private var imageLabelCounter:int = 0;
			private var textLabelCounter:int = 0;
			private var audioLabelCounter:int = 0;
			
			//variaveis referentes ao arquivo xml com conteudos complementares
			//private var xmlContentsFile_name:String;		
			private var xmlContentsFile:File;
			private var xmlContents:XML;
			//////////////////////////////////////////////////////////////////
			
			/* ------ Array de opções de saída para documento multimídia final ------- */
			[Bindable]
			private var multimidiaOutput:ArrayCollection = new ArrayCollection([
				{type:"- Selecione -", enabled:true},
				{type:"NCL", enabled:true},
				{type:"SMIL", enabled:false}			
			]); 
			/* ----------------------------------------------------------------------- */
			
			//usado para testes com XSLT
			/*private var sampleXML:XML =
				<report-types>
				<report-type>Report 1</report-type>
				<report-type>Report 2</report-type>
				<report-type>Report 3</report-type>
				</report-types>;
			
			private var sampleXSL:XML =  
				<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">
				<xsl:template match="/report-types">
				<table>
				<tr>
				<th>Options</th>
				</tr>
				<tr>
				<xsl:for-each select="report-type">
				<td><xsl:value-of select="."/></td>
				</xsl:for-each>
				</tr>
				</table>
				</xsl:template>
				</xsl:stylesheet>;*/
			
			/* - variáveis utilizadas para setar na barra de menus da ferramenta o usuário atual - */			
			[Bindable]
			private var adminEnable:Boolean = true;
			
			[Bindable]
			private var contenterEnable:Boolean = true;
			
			[Bindable]
			private var narratorEnable:Boolean = true;
			/* ----------------------------------------------------------------------------------- */
			
			//objeto que guarda dados do video principal
			private var mainContent:MainContent = new MainContent();
			
			[Bindable]
			private var rowCount:int = 0;				
			
			private var html:HTMLLoader = new HTMLLoader();
			//função chamada depois da criação da janela principal
			protected function windowedapplication1_creationCompleteHandler(event:FlexEvent):void
			{
				var urlReq:URLRequest = new URLRequest("xsltConverter.html");
				html.load(urlReq);
			}
			
			//função chamada na inicialização da janela principal
			protected function windowedapplication1_initializeHandler(event:FlexEvent):void
			{
				//trace("janela principal");
				nativeWindow.maximize();
				this.imageDragArea.scrollRect = new Rectangle(0, 0, this.imageDragArea.width, this.imageDragArea.height);
				this.textDragArea.scrollRect = new Rectangle(0, 0, this.textDragArea.width, this.textDragArea.height);	
				systemManager.addEventListener("audioUpdate", allContentInfo_update);	
			}
			
			
			private var mainVideo_label:spark.components.TextInput = new spark.components.TextInput();
			private var cancelVideoSelection_button:spark.components.Button = new spark.components.Button();
			private var selectSubtitle_button:spark.components.Button = new spark.components.Button();
			private var subtitle_label:spark.components.TextInput = new spark.components.TextInput();
			private var cancelSubtitleSelection_button:spark.components.Button = new spark.components.Button();
			private var filterType_comboBox:mx.controls.ComboBox = new mx.controls.ComboBox();
			private var projectName_textInput:spark.components.TextInput = new spark.components.TextInput();
			private var panel:spark.components.Panel = new spark.components.Panel();
			private var panel2:spark.components.Panel = new spark.components.Panel;	
			//funcao chamada quando o usuário clica no botão iniciar novo projeto
			protected function newProject_clickHandler(event:MouseEvent):void
			{							
				var label:spark.components.Label = new spark.components.Label();
				var filterType_label:spark.components.Label = new spark.components.Label();				
				var startButton:spark.components.Button = new spark.components.Button();
				var cancelProject_button:spark.components.Button = new spark.components.Button();				
				var selectVideo_button:spark.components.Button = new spark.components.Button();				
				var label2:spark.components.Label = new spark.components.Label();				
								
				//criação do comboBox
				var filterTypeArray:ArrayCollection = new ArrayCollection();
				var element:Object = "Arquivo de legenda";
				filterTypeArray.addItem(element);
				filterType_comboBox.prompt = "Selecione";
				filterType_comboBox.width = 180;
				filterType_comboBox.dataProvider = filterTypeArray;
				
				selectVideo_button.label = "Selecionar";
				cancelVideoSelection_button.label = "X";
				startButton.label = "Iniciar";				
				cancelProject_button.label = "Cancelar";
				label.text = "Nome do projeto:";
				label2.text = "Selecione a midia de video principal:";
				filterType_label.text = "Filtrar intervalos de interesse por meio de:";
				selectSubtitle_button.label = "Selecionar legenda";
				cancelSubtitleSelection_button.label = "X";
				startButton.left = 40;
				cancelProject_button.right = 40;
				label.right = 10;
				label.left = 10;
				label.y = 25;
				projectName_textInput.y = 20;
				projectName_textInput.left = 135;
				projectName_textInput.right = 10;			
				projectName_textInput.height = 22;
				label2.y = 75;
				label2.left = 10;
				selectVideo_button.y = 71;
				selectVideo_button.left = 280;
				//mainVideo_label.editable = false;
				mainVideo_label.left = 10;
				mainVideo_label.right = 70
				mainVideo_label.height = 22;
				mainVideo_label.y = 97;
				cancelVideoSelection_button.right = 23;
				cancelVideoSelection_button.y = 97;
				cancelVideoSelection_button.width = 40;
				filterType_label.left = 10;				
				filterType_label.y = 150; 
				filterType_comboBox.y = 170;
				filterType_comboBox.left = 10;
				selectSubtitle_button.y = 170;
				selectSubtitle_button.width = 155;
				selectSubtitle_button.left = 210;
				//subtitle_label.editable = false;
				subtitle_label.left = 10;
				subtitle_label.right = 70
				subtitle_label.height = 22;
				subtitle_label.y = 200;
				cancelSubtitleSelection_button.right = 23;
				cancelSubtitleSelection_button.y = 200;
				cancelSubtitleSelection_button.width = 40;				
				startButton.y = 260;
				cancelProject_button.y = 260;
				startButton.width = 100;
				startButton.height = 30;
				cancelProject_button.width = 100;
				cancelProject_button.height = 30;
				startButton.left = 90;
				cancelProject_button.right = 90;
				
				mainVideo_label.visible = false;
				cancelVideoSelection_button.visible = false;
				selectSubtitle_button.visible = false;
				subtitle_label.visible = false;
				cancelSubtitleSelection_button.visible = false;
				
				//criação do painel do popUp
				panel.title = "                   Configurações do novo projeto";
				panel.width = 400;
				panel.height = 350;				
				panel.addElement(label);
				panel.addElement(projectName_textInput);
				panel.addElement(label2);
				panel.addElement(selectVideo_button);
				panel.addElement(mainVideo_label);
				panel.addElement(cancelVideoSelection_button);
				panel.addElement(filterType_label);
				panel.addElement(filterType_comboBox);
				panel.addElement(selectSubtitle_button);
				panel.addElement(subtitle_label);
				panel.addElement(cancelSubtitleSelection_button);				
				panel.addElement(startButton);
				panel.addElement(cancelProject_button);				
				PopUpManager.addPopUp(panel, this, true);
				PopUpManager.centerPopUp(panel);
								
				selectVideo_button.addEventListener(MouseEvent.CLICK, btn_click);
				filterType_comboBox.addEventListener(ListEvent.CHANGE, filterTypeSelected);
				startButton.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void{startProjectButton_handler(panel, e);});
				cancelProject_button.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void{cancelProjectButton_handler(panel);});
			}
			
			private var pBar:ProgressBar;
			private var fs:FileStream = new FileStream();
			//handler chamado quando usuário clica no botão para iniciar o novo projeto
			private function startProjectButton_handler(panel:spark.components.Panel, e:MouseEvent):void{
				// copiar codigo de testeSilence(event) e tirar parametro e;
				if(mainVideo_label.text != "" && subtitle_label.text != "" && filterType_comboBox.selectedIndex != -1){
					this.testeSilence(e);
					PopUpManager.removePopUp(panel);
					newProject.visible = false;
					openExistingProject.visible = false;					
					
					//criação da pasta que guardará os projetos desenvolvidos pela ferramenta
					var dir:File = File.documentsDirectory.resolvePath("AuthoringTool_projects");
					dir.createDirectory();
					var projectName:String = "AuthoringTool_projects/" + projectName_textInput.text;
					var dir2:File = File.documentsDirectory.resolvePath(projectName);
					dir2.createDirectory();
					var dir3:File = File.documentsDirectory.resolvePath(projectName + "/NCL/media");
					dir3.createDirectory();	
					var dir4:File = File.documentsDirectory.resolvePath(projectName + "/NCL/media/audio");
					dir4.createDirectory();
					var dir5:File = File.documentsDirectory.resolvePath(projectName + "/NCL/media/text");
					dir5.createDirectory();
					var dir6:File = File.documentsDirectory.resolvePath(projectName + "/NCL/media/image");
					dir6.createDirectory();
					
					//seta propriedades do objeto que guarda info da midia principal
					mainContent.projectName = projectName;
					allContentInfo.addItem(mainContent);
					PopUpManager.removePopUp(panel); //remove o painel da tela
					
					//copia arquivo de legenda para pasta do projeto
					var subtitleFile:File = new File(subtitle_label.text);
					var subtitleCopyFile:File = File.documentsDirectory.resolvePath(projectName + "/mainVideo_subtitle.srt");
					subtitleFile.copyToAsync(subtitleCopyFile, true);					
				}
				else{
					Alert.show("Atenção! Preencha todos os campos.");
				}
			}
						
			//remove painel de configuracao de projeto 
			private function cancelProjectButton_handler(panel:spark.components.Panel):void{
				PopUpManager.removePopUp(panel); //remove o painel da tela
			}
			
			//funcao que manuseia a seleção do filtro para intervalos de interesse
			private function filterTypeSelected(event:ListEvent):void{
				if(filterType_comboBox.selectedIndex == 0){
					selectSubtitle_button.visible = true;
					selectSubtitle_button.addEventListener(MouseEvent.CLICK, selectSubtitleFile_handler);					
				}
			}
			
			//funcao chamada para selecao do arquivo de legenda
			private function selectSubtitleFile_handler(event:MouseEvent):void{
				subtitle_label.visible = true;
				cancelSubtitleSelection_button.visible = true;
				cancelSubtitleSelection_button.addEventListener(MouseEvent.CLICK, cancelSubtitleSelectionButton_handler);
				var file:File;	
				file = new File();
				file.addEventListener(Event.SELECT, subtitleFile_select);
				file.browseForOpen("Selecione o arquivo de legenda...");
			}
			
			//função que pode ser utilizada para limpar caminho até então escolhido para o arquivo de legenda
			private function cancelSubtitleSelectionButton_handler(event:MouseEvent):void{
				subtitle_label.text = "";
			}
			
			//funcao que checa se o arquivo de legenda esta no formato correto(.srt)
			private function subtitleFile_select(event:Event):void{
				subtitle_label.text = File(event.currentTarget).nativePath;
				//subtitleFile = subtitle_label.text;
				var validType:int = subtitle_label.text.indexOf(".srt", 0);					
				if(validType != -1){
					subtitle_label.text = File(event.currentTarget).nativePath;	
				}
				else{
					Alert.show("Selecione arquivo de legenda no formato .srt", "Alerta");
					subtitle_label.text = "";
				}				
			}
			
			//funcao para selecionar o video desejado
		    private function btn_click(evt:MouseEvent):void {
				var file:File;	
				file = new File();
				file.addEventListener(Event.SELECT, file_select);
				file.browseForOpen("Selecione a midia principal...");
				mainVideo_label.visible = true;
				cancelVideoSelection_button.visible = true;	
				cancelVideoSelection_button.addEventListener(MouseEvent.CLICK, cancel_click);  									
			}	
			
			//funcao que passa preenche o caminho do video principal na tela de configurações do projeto checando extensão
			private function file_select(evt:Event):void {
				mainVideo_label.text = File(evt.currentTarget).nativePath;
				//checa a extensão da midia principal
				var fileType:int = mainVideo_label.text.indexOf(".flv", 0);
				var fileType2:int = mainVideo_label.text.indexOf(".mp4", 0);
				if(fileType != -1 || fileType2 != -1){
					if(fileType != -1){
						mainContent.mainVideoSource = "media/mainVideo.flv";
					}
					if(fileType2 != -1){
						mainContent.mainVideoSource = "media/mainVideo.mp4";
					}				
					
					/* criação do arquivo xml com conteudos complementares inseridos pelo usuario */
					/*var x:int = lbl.text.indexOf(".flv",0);
					var subtitleFile:String = lbl.text.substring(0,x);
					xmlContentsFile_name = subtitleFile + ".xml";
					xmlContentsFile = new File(xmlContentsFile_name);*/
					var projectName:String = "AuthoringTool_projects/" + projectName_textInput.text + "/";				
					var xmlContentsFile_name:String = projectName_textInput.text + "_contents" + ".xml";
					xmlContentsFile = File.documentsDirectory.resolvePath(projectName + xmlContentsFile_name);
				}
				else{
					Alert.show("A mídia deve estar no formato H.264 com extensões .flv ou .mp4");
					mainVideo_label.text = "";
				}
			}
			
			//limpa caminho do arquivo de midia principal 
			private function cancel_click(evt:MouseEvent):void{
				mainVideo_label.text = "";
			}			
			
			//handler do botao voltar que faz a selecao do video
			protected function backButton_clickHandler(event:MouseEvent):void
			{
				myDG.visible = false;
				player.visible = false;				
				generateOutput_button.visible = false;
				msgDestaques.visible = false;
				msg1.visible = true;
				logo.visible = true;				
			}
			
			//handler do botão que gerencia o formato da saída do documento multimídia do usuário
			private function generateOutputButton_handler(event:MouseEvent):void{
				generateOutput_button.visible = false;
				multimidiaOutput_label.visible = true;
				multimidiaOutput_combobox.visible = true;								
			}
			
			//handler do combobox que gerencia o formato da saída do documento multimídia do usuário
			private function multimidiaOutputComboBox_handler(event:ListEvent):void{
				if(multimidiaOutput_combobox.selectedLabel == "NCL"){
					NCL_button.visible = true;
				}
				else{
					NCL_button.visible = false;
				}
			}
			
			//handler para o botao de geracao do arquivo NCL			
			protected function NCL_button_clickHandler(event:MouseEvent):void
			{
				var ncl:NCL_generator = new NCL_generator();
				var ncl_result:String = ncl.process(html, xmlContents, xsltFile);
				
				//progressBar para copiar video para pasta do projeto
				panel2.title = "Progresso";
				panel2.width = 400;
				panel2.height = 200;				
				pBar = new ProgressBar();
				pBar.left = 20;
				pBar.right = 20;
				pBar.top = 65;
				pBar.indeterminate = false;
				pBar.mode = ProgressBarMode.MANUAL;					
				panel2.addElement(pBar);					
				PopUpManager.addPopUp(panel2, this, true);
				PopUpManager.centerPopUp(panel2);
				pBar.setProgress(0,0);					
				
				//copia mainVideo para pasta NCL				
				var original:File = File.documentsDirectory.resolvePath(mainVideo_label.text);								
				fs.addEventListener(ProgressEvent.PROGRESS, updateProjectProgressBar);
				fs.addEventListener(Event.COMPLETE, completeVideoCopy);					
				fs.readAhead = 1024*1024;// some reasonable number 1MB 
				fs.openAsync(original, FileMode.READ);
				//Alert.show(ncl.process(html, sampleXML, sampleXSL));
				var NCL_fileName:String = "AuthoringTool_projects/" + projectName_textInput.text + "/NCL/main.ncl"; 			
				var NCL_file:File = File.documentsDirectory.resolvePath(NCL_fileName); 
				var fileStream:FileStream = new FileStream(); 
				fileStream.open(NCL_file, FileMode.WRITE); 
				fileStream.writeMultiByte(ncl_result, "utf-8");					
				fileStream.close();
			}
			
			/* ------------------------ cópia do video principal para pasta do projeto na criação do NCL ---------------------------------- */
			//chamada quando termina cópia dos dados
			private function completeVideoCopy(event:Event):void{				
				PopUpManager.removePopUp(panel2); //remove o painel da tela
				pBar.label = "";
				var NCL_project:String = File.documentsDirectory.resolvePath("AuthoringTool_projects/" + projectName_textInput.text + "/NCL").nativePath; 
				Alert.show("Seu projeto NCL foi criado com sucesso e se encontra na pasta NCL dentro do seu projeto em : " + NCL_project, "Mensagem");
				
				//tira visibilidade dos botões de configuração de saída
				multimidiaOutput_label.visible = false;
				multimidiaOutput_combobox.visible = false;	
				NCL_button.visible = false;
			}				
			
			//chamada periodicamente para atualizar barra de progresso e escrever parte lida no arquivo final
			private function updateProjectProgressBar(event:ProgressEvent):void{
				//trace("atualizando arquivo");
				pBar.setProgress(event.bytesLoaded, event.bytesTotal);
				pBar.label = "Configurando seu projeto NCL [" + Math.round(event.bytesLoaded / event.bytesTotal * 100).toString() + "%]";
				
				//trace("bytes loaded: " + event.bytesLoaded);
				if(event.bytesLoaded >= fs.readAhead){
					var bytes:ByteArray = new ByteArray();	
					fs.readBytes(bytes);
					var fileStreamCopy:FileStream = new FileStream();
					var fileExtension:String = mainContent.mainVideoSource;
					var index:int;
					
					if((index = mainContent.mainVideoSource.indexOf(".mp4",0)) != -1){
						var newFile:File = File.documentsDirectory.resolvePath("AuthoringTool_projects/" + projectName_textInput.text + "/NCL/media/" + "mainVideo.mp4");
					}
					else{
						newFile = File.documentsDirectory.resolvePath("AuthoringTool_projects/" + projectName_textInput.text + "/NCL/media/" + "mainVideo.flv");
					}
					fileStreamCopy.open(newFile, FileMode.APPEND);
					fileStreamCopy.writeBytes(bytes);					
					fileStreamCopy.close();						
				}
			}
			/* --------------------------------------- --------------------------------------------- --------------------------------------- */
						
			//funcao chamada do método que verifica se o usuário pressionou botão de iniciar projeto novo
			private function testeSilence(evt:MouseEvent):void{	
				newProject.visible = false;
				openExistingProject.visible = false;								
				msg1.visible = false;
				logo.visible = false;
				msgDestaques.visible = true;
				//backButton.visible = true;
				nativeWindow.maximize();
				
				player.playerDisplay.addEventListener(TimeEvent.CURRENT_TIME_CHANGE, player_currentTimeChangeHandler);
				player.playerDisplay.addEventListener(TimeEvent.COMPLETE, player_completeHandler);
				player.slider.addEventListener(TrackBaseEvent.THUMB_PRESS, slider_thumbPressHandler);
				player.slider.addEventListener(TrackBaseEvent.THUMB_RELEASE, slider_thumbReleaseHandler);
				player.slider.addEventListener(TrackBaseEvent.THUMB_DRAG, slider_thumbDragHandler);
				player.slider.addEventListener(Event.CHANGE, slider_changeHandler);
				
				//inicia visibilidade do video
				player.visible = true;
				myDG.visible = true;
				menuBar.visible = true;				
				player.playerDisplay.source = mainVideo_label.text;				
				
				/* ****************************************** */
				//adiciona listener para se saber o tempo total do video
				player.addEventListener(Event.FRAME_CONSTRUCTED, player_frameConstructedHandler);
				/* ****************************************** */
				//}
				/*else{
				Alert.show("Por favor, selecione um video com extensão .flv","Erro", Alert.OK);
				}*/
			}			

			//função chamada ao iniciar-se o datagrid
			private function init():void
			{
				tempoInicial[0] = 0;
				tempoFinal[0] = 0;
				editedRow[0] = 0;
				tasks = new ArrayCollection();
				//tasks.addItem(new Destaque("Write Tutorial", 4, 3.6));
				//tasks.addItem(new Destaque("Make Breakfast", 1, 4.6));
				tasks.addItem({nomeDestaque: ADD_TASK});				
				//playerSkin.slider.visible = true;
			}
			
			//função teste para gravação dos dados do datagrid em XML
			private function testeXml():void{
				var botaoEditar:spark.components.Button;
				var botaoExcluir:spark.components.Button;
				var converter:ObjectConverter = new ObjectConverter();
				var destaque:Destaque = new Destaque("teste", "23.5", "30.6", botaoEditar, botaoExcluir);				
				
				var xml:XML = converter.objectToXML(destaque);				
				var arquivoDados:String = File.documentsDirectory.resolvePath("AuthoringTool_projects/" + projectName_textInput.text + "/testeGravacaoDados.xml").nativePath; 	
				var file:File = new File(arquivoDados);
				var fileStream:FileStream = new FileStream(); 
				fileStream.open(file, FileMode.WRITE); 
				fileStream.writeMultiByte(xml.toXMLString(), "utf-8");
				trace(xml.toXMLString());
				fileStream.close();
				
				var file2:File = File.documentsDirectory.resolvePath(arquivoDados);
				var fileStream2:FileStream = new FileStream();
				fileStream2.open(file2, FileMode.READ);
				var prefsXML:XML = XML(fileStream2.readUTFBytes(fileStream2.bytesAvailable));
				fileStream2.close();				
				/* Convert XMLNode to XMLDocument. */
				var xmlDoc:XMLDocument = new XMLDocument(prefsXML.toString());				
				var decoder:SimpleXMLDecoder = new SimpleXMLDecoder(true);
				var resultObj:Object = decoder.decodeXML(xmlDoc);
				trace(resultObj.form.tFinal);	
			}			
					
			//cria o arquivo de com intervalos de interesse(.iof)
			private function createSilenceFile():void{
				var subtitleFile:String = "AuthoringTool_projects/" + projectName_textInput.text + "/mainVideo_subtitle.srt"; 
				silenceFile = "AuthoringTool_projects/" + projectName_textInput.text + "/silenceFile.iof"; 
				
				var file:File = File.documentsDirectory.resolvePath(subtitleFile); 
				var stream:FileStreamWithLineReader = new FileStreamWithLineReader();
				stream.open(file, FileMode.READ);				
				
				var file2:File = File.documentsDirectory.resolvePath(silenceFile); 
				var fileStream:FileStream = new FileStream(); 
				fileStream.open(file2, FileMode.WRITE); 
									
				var padrao:RegExp = /\d*:\d*:\d*\,\d*/g;
				var resultadoAtual:Array;
				var inicio:Boolean = false;
				var atual:Boolean = false;				
				
				var line:String = stream.readUTFLine();
				line = stream.readUTFLine();
				
				resultadoAtual = line.match(padrao);
				//trace(resultadoAtual);
				fileStream.writeMultiByte("00:00:00,000" + " --> " + resultadoAtual[0] + "\r\n", "utf-8");
				
				var tempo:String;
				var milesimo:String, seg:String, min:String, hour:String;
				var intMilesimo1:int, intSeg1:int, intMin1:int, intHour1:int;
				var intMilesimo2:int, intSeg2:int, intMin2:int, intHour2:int;
				var intMilesimo:int, intSeg:int, intMin:int, intHour:int;
				
				tempo = resultadoAtual[0].toString();
				hour = tempo.substring(0,2);
				min = tempo.substring(3,5);
				seg = tempo.substring(6,8);
				milesimo = tempo.substring(9,12);
				fileStream.writeMultiByte("t=" + min + ":" + seg + "," + milesimo + "\r\n\r\n", "utf-8");	
				
				fileStream.writeMultiByte(resultadoAtual[1] + " --> ", "utf-8");
				var tempo1:String;
				var milesimo1:String, seg1:String, min1:String, hour1:String;
				tempo1 = resultadoAtual[1].toString();
				hour1 = tempo1.substring(0,2);
				intHour1 = parseInt(hour1);
				min1 = tempo1.substring(3,5);
				intMin1 = parseInt(min1); 
				seg1 = tempo1.substring(6,8);
				intSeg1 = parseInt(seg1);
				milesimo1 = tempo1.substring(9,12);
				intMilesimo1 = parseInt(milesimo1);	
				
				var resMilesimo:String, resSeg:String, resMin:String;
				
				while(stream.bytesAvailable) {
					line = stream.readUTFLine();
					resultadoAtual = line.match(padrao);
					
					if((resultadoAtual[0] && resultadoAtual[1])!= null){
						//fileStream.open(file2, FileMode.APPEND);
						fileStream.writeMultiByte(resultadoAtual[0] + "\r\n", "utf-8");	
						
						var tempo2:String;
						var milesimo2:String, seg2:String, min2:String, hour2:String;
						tempo2 = resultadoAtual[0].toString();
						hour2 = tempo2.substring(0,2);
						intHour2 = parseInt(hour2);
						min2 = tempo2.substring(3,5);
						intMin2 = parseInt(min2); 
						seg2 = tempo2.substring(6,8);
						intSeg2 = parseInt(seg2);
						milesimo2 = tempo2.substring(9,12);
						intMilesimo2 = parseInt(milesimo2);							
						
						intHour = intHour2 - intHour1;
						intMin = intMin2 - intMin1;
						intSeg = intSeg2 - intSeg1;
						intMilesimo = intMilesimo2 - intMilesimo1;
						
						if(intMilesimo < 0){
							intMilesimo = 1000 + intMilesimo;
							intSeg--;									
							if(intMilesimo < 100){
								if(intMilesimo < 10){
									resMilesimo = "00" + intMilesimo.toString();
								}
								else
									resMilesimo = "0" + intMilesimo.toString();
							}
							else
								resMilesimo = intMilesimo.toString();
						}
						else{
							if(intMilesimo == 0){
								resMilesimo = "000";
							}
							else{
								if(intMilesimo < 100){
									if(intMilesimo < 10){
										resMilesimo = "00" + intMilesimo.toString();
									}
									else
										resMilesimo = "0" + intMilesimo.toString();
								}
								else
									resMilesimo = intMilesimo.toString();
							}									
						}
						
						if(intSeg < 0){
							intSeg = 60 + intSeg;
							intMin--;
							if(intSeg < 10){
								resSeg = "0" + intSeg.toString();
							}
							else
								resSeg = intSeg.toString();
						}
						else{
							if(intSeg == 0)
								resSeg = "00";							
							else{
								if(intSeg < 10)
									resSeg = "0" + intSeg.toString();
								else
									resSeg = intSeg.toString();
							}									
						}							
						
						if(intMin < 0){
							intMin = 60 + intMin;
							intHour--;
							if(intMin < 10)
								resMin = "0" + intMin.toString();
							else
								resMin = intMin.toString();
						}
						else{
							if(intMin == 0){
								resMin = "00";
							}
							else{
								if(intMin < 10)
									resMin = "0" + intMin.toString();								
								else
									resMin = intMin.toString();
							}									
						}							
						
						fileStream.writeMultiByte("t=" + resMin + ":" + resSeg + "," 
							+ resMilesimo + "\r\n\r\n", "utf-8");
						
						fileStream.writeMultiByte(resultadoAtual[1] + " --> ", "utf-8");
						tempo1 = resultadoAtual[1].toString();
						hour1 = tempo1.substring(0,2);
						intHour1 = parseInt(hour1);
						min1 = tempo1.substring(3,5);
						intMin1 = parseInt(min1); 
						seg1 = tempo1.substring(6,8);
						intSeg1 = parseInt(seg1);
						milesimo1 = tempo1.substring(9,12);
						intMilesimo1 = parseInt(milesimo1);
					}																	
				}//end of while
				
				fileStream.writeMultiByte(converter(player.playerDisplay.duration) + ",000" + "\r\n", "utf-8");
				
				tempo2 = converter(player.playerDisplay.duration) + ",000";
				hour2 = tempo2.substring(0,2);
				intHour2 = parseInt(hour2);
				min2 = tempo2.substring(3,5);
				intMin2 = parseInt(min2); 
				seg2 = tempo2.substring(6,8);
				intSeg2 = parseInt(seg2);
				milesimo2 = tempo2.substring(9,12);
				intMilesimo2 = parseInt(milesimo2);							
				
				intHour = intHour2 - intHour1;
				intMin = intMin2 - intMin1;
				intSeg = intSeg2 - intSeg1;
				intMilesimo = intMilesimo2 - intMilesimo1;
				
				if(intMilesimo < 0){
					intMilesimo = 1000 + intMilesimo;
					intSeg--;									
					if(intMilesimo < 100){
						if(intMilesimo < 10){
							resMilesimo = "00" + intMilesimo.toString();
						}
						else
							resMilesimo = "0" + intMilesimo.toString();
					}
					else
						resMilesimo = intMilesimo.toString();
				}
				else{
					if(intMilesimo == 0){
						resMilesimo = "000";
					}
					else{
						if(intMilesimo < 100){
							if(intMilesimo < 10){
								resMilesimo = "00" + intMilesimo.toString();
							}
							else
								resMilesimo = "0" + intMilesimo.toString();
						}
						else
							resMilesimo = intMilesimo.toString();
					}									
				}
				
				if(intSeg < 0){
					intSeg = 60 + intSeg;
					intMin--;
					if(intSeg < 10){
						resSeg = "0" + intSeg.toString();
					}
					else
						resSeg = intSeg.toString();
				}
				else{
					if(intSeg == 0)
						resSeg = "00";							
					else{
						if(intSeg < 10)
							resSeg = "0" + intSeg.toString();
						else
							resSeg = intSeg.toString();
					}									
				}							
				
				if(intMin < 0){
					intMin = 60 + intMin;
					intHour--;
					if(intMin < 10)
						resMin = "0" + intMin.toString();
					else
						resMin = intMin.toString();
				}
				else{
					if(intMin == 0){
						resMin = "00";
					}
					else{
						if(intMin < 10)
							resMin = "0" + intMin.toString();								
						else
							resMin = intMin.toString();
					}									
				}							
				
				fileStream.writeMultiByte("t=" + resMin + ":" + resSeg + "," 
					+ resMilesimo + "\r\n\r", "utf-8");	
				
				//fecha os arquivos
				stream.close();
				fileStream.close();
			}

			//atualiza o tempo mostrado no player
			protected function player_currentTimeChangeHandler(event:TimeEvent):void
			{
				labelUtil.constrainTextToWidth(player.currentDisplay, formatTimeValue(player.playerDisplay.currentTime));
				player.slider.value = player.playerDisplay.currentTime;					
			}
			
			/* --------------------------------------- Funções ligadas ao datagrid ---------------------------------------------- */
			protected function checkEdit(event:DataGridEvent):void
			{
				// Do not allow editing of Add Task row except for
				// "Click to Add" column
				//trace("checkEdit");
				if(event.rowIndex == tasks.length - 1 && event.columnIndex != 0){
					event.preventDefault();					
				}			
				
				if(editedRow[event.rowIndex] == true && event.columnIndex != 0){
					event.preventDefault();
				}				
			}
			
			private function editEnd(e:DataGridEvent):void{
				// Adding a new task
				player.removeEventListener(Event.FRAME_CONSTRUCTED, player_frameConstructedHandler);
				var botaoEditar:spark.components.Button;
				var botaoExcluir:spark.components.Button;
				var txtIn2:mx.controls.TextInput; 
				var intervalo:Boolean;
				//trace("Entrou editEnd");								
				
				if(e.rowIndex == tasks.length - 1)
				{
					var txtIn:Object = mx.controls.TextInput(e.currentTarget.itemEditorInstance);					
										
					if(e.rowIndex > 0){
						if((txtIn.text != ADD_TASK) && (verificaIntervalo(parseInt(player.playerDisplay.currentTime.toFixed(0)), e.rowIndex, e.columnIndex))
							&& tempoFinal[e.rowIndex - 1] > 0)
						{
							//trace("rowindex > 0");
							tasks.addItemAt(new Destaque(txtIn.text, converter(player.playerDisplay.currentTime), " ", botaoEditar, botaoExcluir), e.rowIndex);							
							rowCount++;
							tempoInicial[e.rowIndex] = parseInt(player.playerDisplay.currentTime.toFixed(0));
							//trace("valor do tempo: " + tempoInicial[e.rowIndex]);
							editedRow[e.rowIndex - 1] = true;	
							editedRow[e.rowIndex] = false;
							//trace("tempoInicialCriado[" + e.rowIndex + "] " + parseInt(player.currentTime.toFixed(0)) + "\n");//tempoFinal[e.rowIndex] = 0;
						}
						else{
							if(!verificaIntervalo(parseInt(player.playerDisplay.currentTime.toFixed(0)), e.rowIndex, e.columnIndex)
								&& e.reason	== DataGridEventReason.NEW_COLUMN){
								Alert.show("Tempo ja especificado","Aviso",Alert.OK);														
							}
							else{
								if(e.reason	== DataGridEventReason.NEW_COLUMN){
									Alert.show("Preencha o tempo final","Aviso",Alert.OK);
								}
							}
						}
					}
					else{
						if(e.rowIndex == 0){
							if((txtIn.text != ADD_TASK) && (e.columnIndex == 0) )
							{
								//trace("rowindex == 0");				
								tasks.addItemAt(new Destaque(txtIn.text, converter(player.playerDisplay.currentTime), " ", botaoEditar, botaoExcluir), e.rowIndex);
								rowCount++;
								tempoInicial[e.rowIndex] = parseInt(player.playerDisplay.currentTime.toFixed(0));
								//trace("valor do tempo inicial " + tempoInicial[e.rowIndex]);
								//var videoEnd:Number = player.duration;
								//trace("videoEnd: " + videoEnd);								
								//editedRow[e.rowIndex] = true;								
								//tempoFinal[e.rowIndex] = 0;								
							}							
						}
					}					
					// Stop default behavior
					e.preventDefault();					
				}
			}				
			
			public function editCell(event:ListEvent):void{
				//trace("editCell");				
				if((event.columnIndex == 1 || event.columnIndex == 2) && (editedRow[event.rowIndex] == false)){					
					//verificar se o intervalo e valido para inserir no tempoFinal				
					if((parseInt(player.playerDisplay.currentTime.toFixed(0)) > timeInSeconds(event.itemRenderer.data.tInicial)) && 
						(event.columnIndex == 2) && (event.itemRenderer.data.nomeDestaque != ADD_TASK) &&
						  verificaIntervalo(parseInt(player.playerDisplay.currentTime.toFixed(0)), event.rowIndex, event.columnIndex) &&
					 		(player.playerDisplay.currentTime - timeInSeconds(event.itemRenderer.data.tInicial)) <= 600 ){
							
							event.itemRenderer.data.tFinal = converter(player.playerDisplay.currentTime);
							tempoFinal[event.rowIndex] = parseInt(player.playerDisplay.currentTime.toFixed(0));							
					}
					else{ 
						if((event.columnIndex == 2) && 
						   (parseInt(player.playerDisplay.currentTime.toFixed(0)) <= timeInSeconds(event.itemRenderer.data.tInicial))){
								tempoFinal[event.rowIndex] = 0;
								Alert.show("Tempo final deve ser maior que o inicial","Aviso", Alert.OK);
						}
						else{						
							if(!verificaIntervalo(parseInt(player.playerDisplay.currentTime.toFixed(0)), event.rowIndex, event.columnIndex) && 
								(event.itemRenderer.data.nomeDestaque != ADD_TASK)){
									//trace("entrou alerta 1");
									Alert.show("Intervalo ja especificado","Aviso", Alert.OK);
							}
							else //verifica se o intervalo e valido para inserir no tempoInicial
								if((parseInt(player.playerDisplay.currentTime.toFixed(0)) < timeInSeconds(event.itemRenderer.data.tFinal)) &&
									(event.columnIndex == 1) && 
									verificaIntervalo(parseInt(player.playerDisplay.currentTime.toFixed(0)), event.rowIndex, event.columnIndex) &&
									(event.itemRenderer.data.nomeDestaque != ADD_TASK)
								){
									//trace("Entrou no if inicial")
									event.itemRenderer.data.tInicial = converter(player.playerDisplay.currentTime);		
									tempoInicial[event.rowIndex] = parseInt(player.playerDisplay.currentTime.toFixed(0));									
								}
								else{ 
									if((event.columnIndex == 1) && 
										(parseInt(player.playerDisplay.currentTime.toFixed(0)) >= timeInSeconds(event.itemRenderer.data.tInicial)) &&
										event.itemRenderer.data.nomeDestaque != ADD_TASK){										
											Alert.show("Tempo inicial deve ser menor que o final","Aviso", Alert.OK);
									}
									else{ 
										if(!verificaIntervalo(parseInt(player.playerDisplay.currentTime.toFixed(0)), event.rowIndex, event.columnIndex)
										&& (event.itemRenderer.data.nomeDestaque != ADD_TASK)){
											//trace("Intervalo dentro editCell");
											Alert.show("Intervalo ja especificado","Aviso", Alert.OK);
										}
										else
											if((player.playerDisplay.currentTime - timeInSeconds(event.itemRenderer.data.tInicial)) > 600){
												Alert.show("Só são permitidos destaques de até 10 min!","Aviso", Alert.OK);
											}
									}
								}
							}					
						}
				}									
				// Stop default behavior
				//event.preventDefault();
			}			

			//converte tempo inteiro em formato HH:MM:SS
			private function converter(time:Number):String{
				var hour:int, min:int, seg:int;
				var milesimo:Number, milesimo2:Number;
				
				var timeString:String;			
				var hourString:String, minString:String, segString:String;
								
				/*hour = (time/3600); 
				min = ((time%3600)/60);
				seg = ((time%3600)%60);*/
				time = Math.round(time);
				
				hour = Math.floor(time/3600) % 24;
				min = Math.floor(time/60) % 60;
				seg = time % 60;
				
				hourString = hour.toString();
				minString = min.toString();
				segString = seg.toFixed();
				
				if(min.toFixed() == "60"){
					segString = "00";
					minString = "00";
					hour++;
					hourString = hour.toFixed();
				}		
				
				if(hour < 10){
					hourString = "0" + hourString;
				}
				if(seg.toFixed() == "60"){
					segString = "00";
					min++;
					minString = min.toFixed();
				}				
				if(min < 10){
					minString = "0" + minString;					
				}				
				
				if(seg < 10){
					if(seg == 0){
						segString = "0" + seg.toString();
					}
					else{
						segString = "0" + seg.toFixed();	
					}
				}				
				timeString = hourString + ":" + minString + ":" + segString;
				//trace("Valor retornado na funcao converter: " + timeString);
				return timeString;
			}
			
			//converte para formato HH:MM:SS tirando zeros desnecessarios
			protected function formatTimeValue(value:Number):String
			{
				// default format: hours:minutes:seconds
				value = Math.round(value);
				
				var hours:uint = Math.floor(value/3600) % 24;
				var minutes:uint = Math.floor(value/60) % 60;
				var seconds:uint = value % 60;
				
				var result:String = "";
				if (hours != 0)
					result = hours + ":";
				
				if (result && minutes < 10)
					result += "0" + minutes + ":";
				else
					result += minutes + ":";
				
				if (seconds < 10)
					result += "0" + seconds;
				else
					result += seconds;
				
				return result;
			}
			
			//retorna tempo em segundos
			private function timeInSeconds(time:String):Number{
				if(time != null){					
					var intSec:int = parseInt(time.substring(6,8));
					var intMin:int = parseInt(time.substring(3,5));
					var intHour:int = parseInt(time.substring(0,2));
					//trace(intHour, intMin, intSec);
					return intSec + intMin*60 + intHour*3600;					
				}
				else
					return 0;
			}
			
			//verifica validade do intervalo 
			private function verificaIntervalo(dadoInt:int, indiceLinha:int, indiceColuna:int):Boolean{					
				if(indiceLinha > 0){	
					//laco que varre todo o datagrid checando integridade dos dados
					for(var i:int = indiceLinha; i >= 1; i--){
						//verifica se tempo esta entre um intervalo ja inserido
						if(dadoInt >= (tempoInicial[i-1]) && (dadoInt <= tempoFinal[i-1])){
							//trace("Entrou na 1 condicao");
							return false;
						}
						else{
							//verifica se intervalo que esta sendo especificado nao engloba outro ja especificado
							if((tempoInicial[indiceLinha] < tempoInicial[i-1]) && (dadoInt > tempoFinal[i-1])
									&& (indiceColuna == 2)){								
								//trace("condicao 2");
								return false;
							}
						}
					}
				}
				return true;
			}			
			/* ----------------------------------- término das funções ligadas ao datagrid --------------------------------------- */
			
			//voltar da tela com as barras de silencio
			public function voltar(evt:MouseEvent):void{
				volta.visible = false;
				xmlContent_button.visible = false;
				msgDestaques.visible = true;
				dropDownList.visible = false;
				dropDownListOkButton.visible = false;
				myDG.visible = true;
				barsContainer.visible = false;
				barsContainer_label.visible = false;
				//silenceBarsContainer.visible = false;
				
				if(elementDrawn){
					var index:int;
					for(var j:int = elementIndexCounter.length - 1; j >= 0; j--){
						index = elementIndexCounter[j];
						trace("index:" + index);
						silenceBarsContainer.getElementAt(index).visible = false;													
					}					
				}
							
				//elementDrawn = false;
				editionIcons.visible = false;
				beginEdition_button.visible = false;
				var destaque:Object;
				destaque = tasks.getItemAt(myDG.selectedIndex);
				player.slider.minimum = 0;
				player.slider.maximum = player.playerDisplay.duration;
				player.playerDisplay.seek(0);
				player.slider.value = 0;
				
				/* ******************** acertar as variaveis da barrinha ************************ */
				/*sliderTrackArray.removeAll();
				//sliderActiveIndex = 0;	
				//sliderBoundariesArray.removeAll();
				//count = 0;				
				
				//remocao dos eventListeners
				/*player.slider.removeEventListener(Event.EXIT_FRAME, event);		
				sliderTrackArray.removeEventListener(TrackBaseEvent.THUMB_PRESS, pressEvent);				
				sliderTrackArray.removeEventListener(TrackBaseEvent.THUMB_DRAG, dragEvent);
				sliderTrackArray.removeEventListener(TrackBaseEvent.THUMB_RELEASE, releaseEvent);
				sliderTrackArray.removeEventListener(Event.CHANGE, changeEvent);*/
				
				labelUtil.constrainTextToWidth(player.durationDisplay, formatTimeValue(player.playerDisplay.duration));				
				player.playerDisplay.stopButton.removeEventListener(MouseEvent.CLICK, hsliderFinished);
				player.slider.removeEventListener(Event.ENTER_FRAME, hsliderFinished);				
			}
			
			private var detachEnd:Number, detachBeginning:Number;
			private var selectedIndex:int = -1;
			//editar destaque
			public function editDetach():void{
				//testePlayer.currentTimeDisplay1.visible = true;
				if(selectedIndex == myDG.selectedIndex){
					trace("selecionou o mesmo que editado antes");
				}
				msgDestaques.visible = false;				
				generateOutput_button.visible = false;				
				volta.visible = true;
				myDG.visible = false;
				dropDownList.visible = true;
				dropDownListOkButton.visible = true;
				multimidiaOutput_label.visible = false;
				multimidiaOutput_combobox.visible = false;
																				
				var destaque:Object;
				destaque = tasks.getItemAt(myDG.selectedIndex);
				
				if(myDG.selectedIndex == selectedIndex){
					var index:int;
					for(var j:int = elementIndexCounter.length - 1; j >= 0; j--){
						index = elementIndexCounter[j];
						silenceBarsContainer.getElementAt(index).visible = true;													
					}
					//beginEdition_button.visible = true;
					dropDownList.visible = false;
					dropDownListOkButton.visible = false;
					xmlContent_button.visible = true;
					editionIcons.visible = true;
					barsContainer_label.visible = true;
					barsContainer.visible = true;	
					volta.visible = false;
					sliderActiveIndex = 0;	
					count = 0;	
					
					for(j = 0; j < activeSlider.length; j++){
						sliderTrackArray[j].value = sliderTrackArray[j].minimum;
						activeSlider[j] = false;
						sliderTrackArray[j].thumb.visible = false;									
					}
					sliderTrackArray[0].value = detachBeginning;
					sliderActiveIndex = 0;								
					count = 0;
					sliderTrackArray[0].thumb.visible = true;
					activeSlider[0] = true;					
				}
				else{
					trace("Fez o comando que eu queria");
					dropDownList.selectedIndex = -1;
					dropDownList.prompt = "Filtrar intervalos de silêncio";
					
					if(elementDrawn && myDG.selectedIndex == selectedIndex){	
						
						for(j = elementIndexCounter.length - 1; j >= 0; j--){						
							index = elementIndexCounter[j];
							silenceBarsContainer.removeElementAt(index);																		
						}
						//remover todos os itens do sliderTrackArray
						//acertar activeSlider e zerar variaveis que precisar	
						elementDrawn = false;						
						sliderTrackArray.removeAll();
						sliderBoundariesArray.removeAll();
						sliderActiveIndex = 0;	
						count = 0;						
					}					
				}
				
				selectedIndex = myDG.selectedIndex;
				player.playerDisplay.pause();
				detachBeginning = timeInSeconds(destaque.tInicial);
				detachEnd = timeInSeconds(destaque.tFinal);
				player.slider.minimum = timeInSeconds(destaque.tInicial);
				player.slider.maximum = timeInSeconds(destaque.tFinal);
				player.playerDisplay.seek(timeInSeconds(destaque.tInicial));
				player.slider.value = timeInSeconds(destaque.tInicial);
				labelUtil.constrainTextToWidth(player.durationDisplay, formatTimeValue(timeInSeconds(destaque.tFinal)));
				player.slider.addEventListener(Event.ENTER_FRAME, hsliderFinished);
				player.playerDisplay.stopButton.addEventListener(MouseEvent.CLICK, hsliderFinished);
				
				//listeners para reprodução do conteudo complementar no video principal
				player.playerDisplay.playPauseButton.addEventListener(MouseEvent.CLICK, playButton_handler);
			}
			
			//exclui linha de destaque
			public function excluirDestaque():void{
				//exclui linha caso esteja preenchida
				var object:Object;
				object = myDG.selectedItem;		
				
				if(object.nomeDestaque != ADD_TASK)
				{
					Alert.show("Tem certeza que deseja deletar?","Confirmar exclusão", Alert.YES | Alert.NO, this, delRowHandler, null, Alert.NO);
				}				
			}
			
			//metodo chamado pelo excluirDestaque
			private function delRowHandler(evt:CloseEvent):void {
				if ((evt.detail == Alert.NO) || (evt.detail == Alert.CANCEL)) return;
				//trace("exclui linha");					
				//trace("RowCount: " + rowCount);					
				for(var j:int = 0; j < rowCount; j++){
					//trace("tempoInicial antes " + tempoInicial[j]);
					//trace("tempoFinal antes " + tempoFinal[j]);						
				}
				
				//subir as outras posicoes ao deletar uma linha do datagrid
				for(var i:int = myDG.selectedIndex; i < rowCount; i++){
					tempoInicial[i] = tempoInicial[i+1];
					tempoFinal[i] = tempoFinal[i+1];										
				}
				
				for(var k:int = 0; k < rowCount; k++){
					//trace("tempoInicial depois " + tempoInicial[k]);
					//trace("tempoFinal depois " + tempoFinal[k]);						
				}
				
				rowCount--;
				myDG.dataProvider.removeItemAt(myDG.selectedIndex);						
			}		

			//handler que trata hslider quando este chega ao seu final
			private function hsliderFinished(event:Event):void{
				//trace("entrou a cada mudanca");
				if(player.slider.value == player.slider.maximum){
					trace(event);
					player.playerDisplay.stop();
					player.playerDisplay.seek(player.slider.minimum);
					player.slider.value = player.slider.minimum;
					
					trace("Chegou ao final pelo slider do video");
					sliderTrackArray[sliderActiveIndex].thumb.visible = false;
					sliderTrackArray[0].thumb.visible = true;
					activeSlider[sliderActiveIndex] = false;
					activeSlider[0] = true;
					for(var k:int = activeSlider.length - 1; k >= 0; k--){
						sliderTrackArray[k].value = sliderTrackArray[k].minimum;
					}
					sliderTrackArray[0].value = detachBeginning;
					sliderActiveIndex = 0;								
					count = 0;	
					//listenerRemover na funcao volta	
				}
				if(event.type == "click"){
					player.playerDisplay.stop();
					player.playerDisplay.seek(player.slider.minimum);					
					//listenerRemover na funcao volta				
				}
			}		
					
			/* ---- início das funções que tratam operações realizadas no slider do video principal quanto nos sliders das barras com intervalos de interesse ----- */
			private function silenceSlider_thumbPressHandler(sliderArray:ArrayCollection, index:int):void {
				player.slider.removeEventListener(Event.EXIT_FRAME, event);
				for(var i:int = 0; i < activeSlider.length; i++){
					if(activeSlider[i] == true){
						//sliderArray[i].value = player.playerDisplay.videoDisplay.currentTime;
						//trace("Barra pressionada: " + i);						
					}
				}							
				//trace("pressed");
				if(player.playerDisplay.videoDisplay.playing){
					player.playerDisplay.videoDisplay.pause();
					wasPlayingBeforeSeeking = true;
				}
				if(sliderArray[0].value < detachBeginning){
					sliderArray[0].value = detachBeginning;
					player.playerDisplay.seek(detachBeginning);
					sliderArray[0].showDataTip = false;
				}
				else
					sliderArray[0].showDataTip = true;
			}
			
			private function silenceSlider_thumbReleaseHandler(sliderArray:ArrayCollection, detachBeginning:Number, detachEnd:Number):void {
				player.slider.addEventListener(Event.EXIT_FRAME, event);
				//trace("released");
				if(wasPlayingBeforeSeeking){
					player.playerDisplay.videoDisplay.play();
					wasPlayingBeforeSeeking = false;
				}
				if(sliderArray[0].value < detachBeginning){
					sliderArray[0].value = detachBeginning;
					sliderArray[0].thumb.visible = true;
					sliderArray[0].showDataTip = false;
					player.playerDisplay.seek(detachBeginning);					
				}
				else{
					sliderArray[0].showDataTip = true;					
				}
				
				for(var j:int = sliderActiveIndex; j < activeSlider.length; j++){
					if(sliderArray[j].value == sliderArray[j].maximum && activeSlider[j] == true && (j < activeSlider.length - 1)){
						//trace("entrou no teste malandro");
						sliderArray[j+1].value = sliderArray[j+1].minimum;
					}
				}
			}
			
			protected function silenceSlider_thumbDragHandler(sliderArray:ArrayCollection, detachBeginning:Number, detachEnd:Number):void
			{
				//trace("dragged");
				//player.slider.addEventListener(Event.EXIT_FRAME, event);
				player.slider.removeEventListener(Event.EXIT_FRAME, event);
				for(var j:int = 0; j < activeSlider.length; j++){
					if(activeSlider[j] == true){
						if(sliderArray[0].value < detachBeginning){
							sliderArray[0].value = detachBeginning;
							sliderArray[0].thumb.visible = false;
							sliderArray[0].showDataTip = false;
							player.playerDisplay.seek(detachBeginning);
						}
						//trace("Barra arrastada: " + j);			
						player.playerDisplay.seek(sliderArray[j].value);
						if(sliderArray[j].value > detachEnd){
							//trace("Chegou ao final da barra");
							sliderArray[j].thumb.visible = false;
							sliderArray[0].thumb.visible = true;
							activeSlider[j] = false;
							activeSlider[0] = true;
							for(var k:int = 0; k < activeSlider.length; k++){
								sliderArray[k].value = sliderArray[k].minimum;
							}
							sliderArray[0].value = detachBeginning;
							sliderActiveIndex = 0;								
							count = 0;							
						}						
					}
				}			
			}
			
			private function silenceSlider_changeHandler(sliderArray:ArrayCollection, detachBeginning:Number, detachEnd:Number, e:Event):void
			{
				//trace("Indice selecionado: " + e.target);	
				//player.slider.removeEventListener(Event.EXIT_FRAME, event);
				for(var i:int = 0; i < activeSlider.length; i++){
					if(sliderArray[i] == e.target && sliderArray[i].value <= detachEnd && sliderArray[i].value >= detachBeginning){
						for(var j:int = 0; j < activeSlider.length; j++){
							activeSlider[j] = false;
							sliderArray[j].thumb.visible = false;
						}
						sliderArray[i].thumb.visible = true;
						activeSlider[i] = true;
						player.playerDisplay.seek(sliderArray[i].value);
						sliderActiveIndex = i;						
					}
					else{
						var value:Number = player.playerDisplay.videoDisplay.currentTime;
						if(sliderArray[0] == e.target && sliderArray[0].value < detachBeginning){
							sliderArray[0].mouseChildren = false;
							if(activeSlider[0] == true){
								sliderArray[0].value = value;
								player.playerDisplay.seek(value);
							}								
						}
						else{
							if(sliderArray[i] == e.target && sliderArray[i].value > detachEnd){
								sliderArray[i].mouseChildren = false;
								
								if(activeSlider[activeSlider.length - 1] == true){
									sliderArray[i].value = value;
									player.playerDisplay.seek(value);
								}
								else{
									sliderArray[i].thumb.visible = false;
									sliderArray[0].thumb.visible = true;
									activeSlider[i] = false;
									activeSlider[0] = true;
									sliderArray[0].value = detachBeginning;
									player.playerDisplay.seek(detachBeginning);
									sliderActiveIndex = 0;								
									count = 0;
								}
							}							
						}
					}
					
					if(sliderArray[i].value > detachEnd){
						//trace("Chegou ao final da barra");
						sliderArray[i].thumb.visible = false;
						sliderArray[0].thumb.visible = true;
						activeSlider[i] = false;
						activeSlider[0] = true;
						for(var k:int = 0; k < activeSlider.length; k++){
							sliderArray[k].value = sliderArray[k].minimum;
						}
						sliderArray[0].value = detachBeginning;
						sliderActiveIndex = 0;								
						count = 0;							
					}					
				}
				for(j = 0; j < activeSlider.length; j++){
					sliderArray[j].mouseChildren = true;
				}			
			}			
			
			private function slider_thumbPressHandler(evt:TrackBaseEvent):void {
				if(player.playerDisplay.videoDisplay.playing){
					player.playerDisplay.videoDisplay.pause();
					wasPlayingBeforeSeeking = true;					
				}				
			}
			
			private function slider_thumbReleaseHandler(evt:TrackBaseEvent):void {
				if(wasPlayingBeforeSeeking){
					player.playerDisplay.videoDisplay.play();
					wasPlayingBeforeSeeking = false;
				}				
			}
			
			protected function slider_thumbDragHandler(event:TrackBaseEvent):void
			{
				//trace("dragged");
				player.playerDisplay.seek(player.slider.value);	
				if(silenceSlidersDrawn){
					for(var j:int = 0; j < activeSlider.length; j++){
						if(activeSlider[sliderActiveIndex] == true){
							sliderTrackArray[sliderActiveIndex].value = player.slider.value;							
						}
					}					
				}
			}
			
			private function slider_changeHandler(event:Event):void
			{
				player.playerDisplay.seek(player.slider.value);
				
				if(silenceSlidersDrawn){
					for(var i:int = 0; i < sliderBoundariesArray.length; i++){
						//trace("player: " + player.slider.value + " array(0): " + sliderBoundariesArray[i].minimum + " array(1): " + sliderBoundariesArray[i].maximum);
						if(player.slider.value >= sliderBoundariesArray[i].minimum && player.slider.value <= sliderBoundariesArray[i].maximum){
							for(var j:int = 0; j < activeSlider.length; j++){
								activeSlider[j] = false;
								sliderTrackArray[j].thumb.visible = false;								
							}
							sliderTrackArray[i].thumb.visible = true;
							activeSlider[i] = true;
							sliderTrackArray[i].value = player.slider.value;
							sliderActiveIndex = i;
						}
					}
				}
			}			
			/* ---- fim das funções que tratam operações realizadas no slider do video principal quanto nos sliders das barras com intervalos de interesse ----- */		
			
			//handler que encontra a duracao do video assim que é carregado
			protected function player_frameConstructedHandler(event:Event):void
			{				
				if(player.playerDisplay.duration > 0){
					player.slider.maximum = player.playerDisplay.duration;
					labelUtil.constrainTextToWidth(player.durationDisplay, formatTimeValue(player.playerDisplay.duration));
					labelUtil.constrainTextToWidth(player.currentDisplay, "0:00");
					player.removeEventListener(Event.FRAME_CONSTRUCTED, player_frameConstructedHandler);
					
					this.createSilenceFile();						
				}				
			}	
			
			//handler utilizado quando o video inteiro termina para redefinir a fonte e o inicio
			protected function player_completeHandler(event:TimeEvent):void
			{
				player.playerDisplay.stop();
				player.playerDisplay.source = mainVideo_label.text;
				player.playerDisplay.pause();				
			}
			
			//handler chamado para definir opção de filtro de interfalos de silêncio por parte do usuário
			protected function dropdownlist1_changeHandler(event:IndexChangeEvent):void
			{
				switch(event.newIndex)
				{
					case 0:
					{
						dropDownListSelection = 2;						
						break;
					}
					case 1:
					{
						dropDownListSelection = 4;						
						break;
					}
					case 2:	
					{
						dropDownListSelection = 6;						
						break;
					}
					case 3:
					{
						dropDownListSelection = 7;						
						break;
					}
					default:
					{
						break;
					}
				}
				
			}
			
			/* ----variaveis globais para remover eventListener em outras funções ---- */
			private var event;	
			private var dragEvent;
			private var changeEvent;
			private var pressEvent;
			private var releaseEvent;
			/* ----------------------------------------------------------------------- */
			private var sliderBoundariesArray:ArrayCollection = new ArrayCollection();	
			private var lastOption:int = -2;	
			private var silenceSlidersArray:ArrayCollection = new ArrayCollection();
			/* ********************************************************************************************************* */
			private var contentSliderArray:ArrayCollection = new ArrayCollection(); //array com todos os arrays de sliders
			/* ********************************************************************************************************* */
			
			//funcao chamada quando o usuario filtra o intervalo de silencio e pressiona o botao OK
			public function okButtonHandler(event2:MouseEvent):void{
				if(elementDrawn && lastOption != dropDownListSelection){					
					//var progressBarIncrementer:int = 0;
					//progressBar.visible = true;	
					var index:int;
					for(var j:int = elementIndexCounter.length - 1; j >= 0; j--){						
						index = elementIndexCounter[j];
						silenceBarsContainer.removeElementAt(index);																		
					}					
					
					elementIndexCounter.removeAll();
					sliderTrackArray.removeAll();
					sliderActiveIndex = 0;	
					sliderBoundariesArray.removeAll();
					count = 0;	
					for(var k:int = 0; k < activeSlider.length - 1; k++){
						activeSlider[sliderActiveIndex] = false;
					}
					activeSlider[0] = true;
					player.playerDisplay.seek(detachBeginning);
					
					//remocao dos eventListeners
					player.slider.removeEventListener(Event.EXIT_FRAME, event);		
					sliderTrackArray.removeEventListener(TrackBaseEvent.THUMB_PRESS, pressEvent);				
					sliderTrackArray.removeEventListener(TrackBaseEvent.THUMB_DRAG, dragEvent);
					sliderTrackArray.removeEventListener(TrackBaseEvent.THUMB_RELEASE, releaseEvent);
					sliderTrackArray.removeEventListener(Event.CHANGE, changeEvent);
				}			
				
				if(dropDownListSelection != -1 && dropDownListSelection != lastOption){
					var initialTime:Number = 0;
					var destaque:Object = tasks.getItemAt(myDG.selectedIndex);
					var slidersAmount:int;
					var incrementer:int = 0;
					//var posY:int = 148;
					var posY:int = 20;
					var intervalMinimum:Number, intervalMaximum:Number;
					var firstMinimum:Boolean = true;
					var fillWhite:Boolean = true;
					var slidersTotal:int;
					
					progressBar.x = barsContainer.x + 280;
					progressBar.y = barsContainer.y + 130;
					progressBar.visible = true;
					//silenceBarsContainer.addElement(progressBar);
					
					if((timeInSeconds(destaque.tInicial))%60 != 0){
						initialTime = timeInSeconds(destaque.tInicial) - (timeInSeconds(destaque.tInicial)%60);
					}
					else{
						initialTime = timeInSeconds(destaque.tInicial);
					}
					
					var detachSize:Number = timeInSeconds(destaque.tFinal) - initialTime;	
					//trace("timeInSeconds(destaque.tFinal): " + timeInSeconds(destaque.tFinal));
					//trace("initialTime: " + initialTime);
					//trace("detachSize " + detachSize + " detachSize/60: " + detachSize/60);
					
					slidersAmount = detachSize/60;
					if((detachSize%60) != 0){
						slidersAmount++;
					}
					slidersTotal = slidersAmount;
					//trace("total de barras: " + slidersTotal);
					
					addEventListener("trackHighlightComplete", trackHighlightComplete);
					setProgress(0,100);					
					
					UIUtilities.pausingFor(0, slidersTotal-1, function(i:int) : void {
						var silenceSlider:MultiThumbHSlider = new MultiThumbHSlider();
						var timeValues:ArrayCollection = new ArrayCollection();
						var accentColor:Array = new Array();
						
						silenceSlider.visible = true;
						silenceSlider.x = 17;
						silenceSlider.y = posY;
						silenceSlider.width = 676;
						silenceSlider.height = 16;
						silenceSlider.showTrackHighlight = true;
						silenceSlider.accentColors = ["0xFFFFFF"];
						silenceSlider.minimum = initialTime + incrementer;
						silenceSlider.maximum = 60 + initialTime + incrementer;
						intervalMinimum = silenceSlider.minimum;
						intervalMaximum = silenceSlider.maximum;
						
						var boundaries:Object = new Object();
						boundaries.minimum = intervalMinimum;
						boundaries.maximum = intervalMaximum;
						sliderBoundariesArray.addItem(boundaries);
						
						if(firstMinimum){
							intervalMinimum = timeInSeconds(destaque.tInicial);
							silenceSlider.setIntervalBeginning(intervalMinimum);
							firstMinimum = false;								
						}
						
						timeValues = selectIntervals(intervalMinimum, intervalMaximum);	
						allTimesSelected.addAll(timeValues);
						
						for(var j:int = 0; j < timeValues.length; j++){							
							if(timeValues.getItemAt(j).label != ""){
								accentColor.push("0xFF0000");  //vermelho								
							}
							else{								
								if(!firstMinimum && fillWhite){
									fillWhite = false;
									accentColor.push("0xFFFFFF");	//branco								
								}
								else
									accentColor.push("0xB7BCAF"); //cinza claro									
							}							
						}						
						silenceSlider.dataProvider = timeValues;
						silenceSlider.accentColors = accentColor;
						silenceSlidersArray.addItem(silenceSlider);
						//////////////
						var contentSlider:ContentSlider = new ContentSlider();
						contentSlider.mainContentSlider = silenceSlider;
						contentSliderArray.addItem(contentSlider);						
						/////////////						
						
						allSilenceSliders.addItem(timeValues);
						allSilenceSliders.addItem(silenceSlider);
						
						//addElement(silenceSlider);
						silenceBarsContainer.addElement(silenceSlider);
						
						var silenceSliderTracker:HSlider = new HSlider();
						//silenceSliderTracker.x = 630;
						silenceSliderTracker.x = 13;
						silenceSliderTracker.y = posY;
						silenceSliderTracker.width = 680;
						silenceSliderTracker.height = 16;
						silenceSliderTracker.minimum = silenceSlider.minimum;
						silenceSliderTracker.maximum = silenceSlider.maximum;
						silenceSliderTracker.value = intervalMinimum;
						
						//addElement(silenceSliderTracker);
						silenceBarsContainer.addElement(silenceSliderTracker);
						silenceSliderTracker.track.alpha = 0;	
						//silenceSliderTracker.setStyle("liveDragging", true);
						silenceSlider.sliderTracker = silenceSliderTracker;
						sliderTrackArray.addItem(silenceSliderTracker);
						
						/* ******* Events of silenceSliders ******* */
						pressEvent = function(e:TrackBaseEvent):void{silenceSlider_thumbPressHandler(sliderTrackArray, 0);}
						silenceSliderTracker.addEventListener(TrackBaseEvent.THUMB_PRESS, pressEvent);
						
						dragEvent = function(e:TrackBaseEvent):void{silenceSlider_thumbDragHandler(sliderTrackArray, timeInSeconds(destaque.tInicial), 
							timeInSeconds(destaque.tFinal));}							
						silenceSliderTracker.addEventListener(TrackBaseEvent.THUMB_DRAG, dragEvent);
						
						releaseEvent = function(e:TrackBaseEvent):void{silenceSlider_thumbReleaseHandler(sliderTrackArray, timeInSeconds(destaque.tInicial), 
							timeInSeconds(destaque.tFinal));}
						silenceSliderTracker.addEventListener(TrackBaseEvent.THUMB_RELEASE, releaseEvent);
						
						changeEvent = function(e:Event):void{silenceSlider_changeHandler(sliderTrackArray, timeInSeconds(destaque.tInicial), 
							timeInSeconds(destaque.tFinal), e);}
						silenceSliderTracker.addEventListener(Event.CHANGE, changeEvent);
						/* ******* ********************** ******* */
						
						silenceSliderTracker.thumb.visible = false;	
						silenceSliderTracker.setStyle("liveDragging", true);
						
						//elementIndexCounter.push(getElementIndex(silenceSlider));
						elementIndexCounter.addItem(silenceBarsContainer.getElementIndex(silenceSlider));
						elementIndexCounter.addItem(silenceBarsContainer.getElementIndex(silenceSliderTracker));
						
						silenceSlider.validateProperties();							
						silenceSlider.minimum = initialTime + incrementer;
						silenceSlider.maximum = 60 + initialTime + incrementer;
						
						incrementer+=60;
						posY+=40;	
						barsContainer.visible = true;						
						//trace("valores de incrementer e posY: " + incrementer + " " + posY);
						//trace(i);
						
						//desenha a ultima barrinha
						if(i == (slidersTotal-2)){
							//trace("Desenha ultima parte");
							silenceSlider = new MultiThumbHSlider();
							timeValues = new ArrayCollection();
							accentColor = new Array();
							var intervalMinimum:Number, intervalMaximum:Number;
							
							//progressBar.removeEventListener(Event.COMPLETE, progressBarEndEvent);	
							progressBar.visible = false;
							
							//trace("FINAL: incrementer e posY: " + incrementer + " " + posY);	
							silenceSlider.visible = true;
							silenceSlider.x = 17;
							silenceSlider.y = posY;
							silenceSlider.width = 676;
							silenceSlider.height = 16;
							silenceSlider.showTrackHighlight = true;
							silenceSlider.accentColors = ["0xFFFFFF"];
							silenceSlider.minimum = initialTime + incrementer;
							silenceSlider.maximum = 60 + initialTime + incrementer;	
							intervalMinimum = silenceSlider.minimum;
							intervalMaximum = timeInSeconds(destaque.tFinal);
							
							boundaries = new Object();					
							boundaries.minimum = intervalMinimum;
							boundaries.maximum = intervalMaximum;
							sliderBoundariesArray.addItem(boundaries);
							
							silenceSlider.setIntervalEnd(intervalMaximum);					
							timeValues = selectIntervals(intervalMinimum, intervalMaximum);	
							allTimesSelected.addAll(timeValues);
							
							for(var i:int = 0; i < timeValues.length; i++){
								if(timeValues.getItemAt(i).label != ""){
									accentColor.push("0xFF0000");  //vermelho								
								}
								else{
									accentColor.push("0xB7BCAF"); //cinza claro					
								}							
							}							
							silenceSlider.dataProvider = timeValues;
							silenceSlider.accentColors = accentColor;
							silenceSlidersArray.addItem(silenceSlider);
							//////////////
							contentSlider = new ContentSlider();
							contentSlider.mainContentSlider = silenceSlider;
							contentSliderArray.addItem(contentSlider);	
							/////////////	
							
							//addElement(silenceSlider);
							silenceBarsContainer.addElement(silenceSlider);
							
							silenceSliderTracker = new HSlider();
							silenceSliderTracker.x = 13;
							silenceSliderTracker.y = posY;
							silenceSliderTracker.width = 680;
							silenceSliderTracker.height = 16;
							silenceSliderTracker.minimum = silenceSlider.minimum;
							silenceSliderTracker.maximum = silenceSlider.maximum;
							
							//addElement(silenceSliderTracker);
							silenceBarsContainer.addElement(silenceSliderTracker);							
							silenceSliderTracker.track.alpha = 0;	
							
							silenceSlider.sliderTracker = silenceSliderTracker;
							sliderTrackArray.addItem(silenceSliderTracker);
							silenceSliderTracker.thumb.visible = false;
							silenceSliderTracker.setStyle("liveDragging", true);
							
							// ******* Events of silenceSliders ******* 
							event = function(e:Event):void{verifySliderOrientation(sliderTrackArray, timeInSeconds(destaque.tFinal));};
							player.slider.addEventListener(Event.EXIT_FRAME, event);
							
							pressEvent = function(e:TrackBaseEvent):void{silenceSlider_thumbPressHandler(sliderTrackArray, 0);}
							silenceSliderTracker.addEventListener(TrackBaseEvent.THUMB_PRESS, pressEvent);
							
							dragEvent = function(e:TrackBaseEvent):void{silenceSlider_thumbDragHandler(sliderTrackArray, timeInSeconds(destaque.tInicial), 
								timeInSeconds(destaque.tFinal));}
							silenceSliderTracker.addEventListener(TrackBaseEvent.THUMB_DRAG, dragEvent);
							
							releaseEvent = function(e:TrackBaseEvent):void{silenceSlider_thumbReleaseHandler(sliderTrackArray, timeInSeconds(destaque.tInicial), 
								timeInSeconds(destaque.tFinal));}
							silenceSliderTracker.addEventListener(TrackBaseEvent.THUMB_RELEASE, releaseEvent);
							
							changeEvent = function(e:Event):void{silenceSlider_changeHandler(sliderTrackArray, timeInSeconds(destaque.tInicial), 
								timeInSeconds(destaque.tFinal), e);}
							silenceSliderTracker.addEventListener(Event.CHANGE, changeEvent);
							/* ******* ********************** *******/ 
							
							//elementIndexCounter.push(getElementIndex(silenceSlider));
							elementIndexCounter.addItem(silenceBarsContainer.getElementIndex(silenceSlider));
							elementIndexCounter.addItem(silenceBarsContainer.getElementIndex(silenceSliderTracker));
							
							silenceSlider.validateProperties();	
							silenceSlider.minimum = initialTime + incrementer;
							silenceSlider.maximum = 60 + initialTime + incrementer;
							
							silenceSlidersDrawn = true;
							activeSlider = new Array(slidersTotal);
							//editionIcons.visible = true;
							barsContainer.visible = true;
							barsContainer_label.visible = true;
							elementDrawn = true;					
							
							lastOption = dropDownListSelection;						
						}						
					},setProgress ,this); //end of the loop						
				}
			}		
			
			//handler chamado da funcao okButtonHandler para setar o progresso da barrinha mostrada ao usuário
			private function setProgress(processed : int, amountThatNeedsToBeProcessed : int) : void {
				progressBar.setProgress(processed, amountThatNeedsToBeProcessed);
				progressBar.addEventListener(Event.COMPLETE, finishLoadingSliders);
			}
			
			//função chamada quando a barra de progresso das barras de silencio chega aos 100%
			private function finishLoadingSliders(event:Event):void{
				//trace("setou visibilidade");
				barsContainer_label.visible = true;
				beginEdition_button.visible = true;
			}
			
			private var firstTime:Boolean = true;	
			private var forward:Boolean = true;
			private var back:Boolean = false;
			private var timeControl:Number = 0;
			//handler que trata de posicionar o thumb do hslider das barrinhas de intervalos de interesse no lugar nas barrinhas de intervalos de silencio			
			private function verifySliderOrientation(sliderArray:ArrayCollection, detachEnd:Number):void{
				var finish:Boolean = false;	
				var forward:Boolean, back:Boolean;	
				if(sliderActiveIndex <= sliderArray.length - 1){
					//trace("player.currentTime: " + player.playerDisplay.videoDisplay.currentTime + "  timeControl: " + timeControl + " res: " + (player.playerDisplay.videoDisplay.currentTime - timeControl));										
					if((player.playerDisplay.videoDisplay.currentTime - timeControl) >= 0){
						timeControl = player.playerDisplay.videoDisplay.currentTime;
						forward = true;
						back = false;
					}
					else{
						timeControl = player.playerDisplay.videoDisplay.currentTime;
						forward = false;
						back = true;
					}
					
					if(forward){
						//forward
						//trace("entrou no forward");
						if(sliderActiveIndex > 0 /*&& player.playerDisplay.videoDisplay.playing*/){
							//trace("1");
							sliderArray[sliderActiveIndex-1].thumb.visible = false;
							activeSlider[sliderActiveIndex-1] = false;
						}					
						//trace(sliderArray[i].value + " " + detachEnd);
						if(sliderArray[sliderActiveIndex].value == detachEnd){
							//trace("chegou ao fim");
							sliderArray[sliderActiveIndex].thumb.visible = false;
							sliderArray[sliderActiveIndex].value = sliderArray[sliderActiveIndex].minimum;
							sliderArray[0].thumb.visible = true;
							sliderArray[0].value = player.slider.value;
							sliderActiveIndex = 0;						
						}
						else{
							sliderArray[sliderActiveIndex].thumb.visible = true;
							activeSlider[sliderActiveIndex] = true;
							//firstTime = false;
							//trace("2");						
						}
						
						if(sliderArray[sliderActiveIndex].value <= sliderArray[sliderActiveIndex].maximum && !finish && 
							sliderArray[sliderActiveIndex].value != detachEnd && player.playerDisplay.videoDisplay.playing){
							sliderArray[sliderActiveIndex].value = player.slider.value;	
							//trace("2.2" + " ->" + sliderArray[sliderActiveIndex].value);
						}
						if((sliderArray[sliderActiveIndex].value == sliderArray[sliderActiveIndex].maximum && !finish) || 
							sliderArray[sliderActiveIndex].value == detachEnd){						
							finish = true;
							count++;
							//trace("3");
						}		
						if(finish && count == 1){
							sliderActiveIndex++;
							count = 0;
							//trace("terminou " + sliderActiveIndex);					
						}	
					}
					else
						if(back){
							//trace("***************************back*******************************************");
							if((sliderArray[sliderActiveIndex].value == sliderArray[sliderActiveIndex].minimum) && sliderActiveIndex > 0){
								for(var j:int = 0; j < activeSlider.length; j++){
									sliderArray[j].value = sliderArray[j].minimum;
								}
								sliderArray[sliderActiveIndex].thumb.visible = false;
								activeSlider[sliderActiveIndex] = false;
								sliderArray[sliderActiveIndex-1].thumb.visible = true;
								activeSlider[sliderActiveIndex-1] = true;
								sliderArray[sliderActiveIndex-1].value = player.slider.value;
								sliderActiveIndex--;						
							}
							else{
							sliderArray[sliderActiveIndex].thumb.visible = true;
							activeSlider[sliderActiveIndex] = true;
							//firstTime = false;
							//trace("2");						
							}						
						}
					}
			}
			
			//função que seleciona os intervalos de silencio para desenhar na tela 
			//recebe como parametros os intervalos minimo e maximo de cada barrinha a ser desenhada
			private function selectIntervals(intervalMinimum:Number, intervalMaximum:Number):ArrayCollection{
				var secTime:int;
				var line:String;
				var line2:String;
				var time:String;
				
				var time1:Number, time2:Number;
				var timesArray:ArrayCollection = new ArrayCollection();
				
				var file:File = File.documentsDirectory.resolvePath(silenceFile);  
				var stream:FileStreamWithLineReader = new FileStreamWithLineReader();
				var hasMinimum:Boolean = true;
				var hasMaximum:Boolean = false;
				stream.open(file, FileMode.READ);
				
				line = stream.readUTFLine();
				line2 = stream.readUTFLine();					
				time1 = timeInSeconds(line.substring(0,8));
				time2 = timeInSeconds(line.substring(17,25));
				
				var pointMarker1:Object = new Object();
				var pointMarker2:Object = new Object();
				pointMarker1.value = intervalMinimum;
				pointMarker1.label = "";
				pointMarker1.fixedValue = true;
				timesArray.addItem(pointMarker1);
				
				while(stream.bytesAvailable && (time1 < intervalMaximum)){
					pointMarker1 = new Object();
					pointMarker2 = new Object();
					
					time = line2.substring(2,7);
					
					if(parseInt(time.substring(0,2)) > 0){
						secTime = parseInt(time.substring(3,6)) + parseInt(time.substring(0,2))*60;
					}
					else{
						secTime = parseInt(time.substring(3,6));
					}
					
					//busca por valores menores ou iguais aos escolhidos no dropDownListSelection
					if(dropDownListSelection != -1){
						if(secTime >= dropDownListSelection && time2 > intervalMinimum){
							//trace("intervalMinimum: " + intervalMinimum + ", time1: " + time1 + " time2: " + time2);
							if(time1 <= intervalMinimum ){
								if(time1 <= intervalMinimum && time2 > intervalMaximum){
									//trace("1");
								}									
								else{
									labelCounter++;
									//trace("2");
								}														
							}
							else{
								if(!hasMinimum){
									labelCounter++;
									//trace("3");
									pointMarker1.value = time1;
									pointMarker1.label = "";
									pointMarker1.fixedValue = true;
									timesArray.addItem(pointMarker1);
								}
							}
							
							if(time2 >= intervalMaximum)	{
								//variavel que verifica se existe anterior
								pointMarker2.value = intervalMaximum;
								pointMarker2.label = "I" + labelCounter.toString();
								pointMarker2.fixedValue = true;
								timesArray.addItem(pointMarker2);
								hasMaximum = true;
								if(time2 > intervalMaximum)
									intervalFit = false;
								//trace("21");
							}							
							else{
								pointMarker2.value = time2;
								pointMarker2.fixedValue = true;
								if(intervalFit){
									pointMarker2.label = "I" + labelCounter.toString();
									//trace("22");
								}
								else{
									pointMarker2.label = "I" + (labelCounter - 1).toString();
									intervalFit = true;
									//trace("23");
								}
								
								//trace("time2");
								timesArray.addItem(pointMarker2);									
							}						
						}							
						stream.readUTFLine();					
					}					
					line = stream.readUTFLine();
					line2 = stream.readUTFLine();					
					time1 = timeInSeconds(line.substring(0,8));
					time2 = timeInSeconds(line.substring(17,25));
					hasMinimum = false;					
				}		
				
				if(!hasMaximum){
					pointMarker2 = new Object();
					pointMarker2.value = intervalMaximum;
					pointMarker2.label = "";
					pointMarker2.fixedValue = true;
					timesArray.addItem(pointMarker2);		
				}
				
				return timesArray;
			}			
						
			//função que trata o evento "trackHighlightComplete" enviado do componente IntervalsSlider do projeto
			//guarda em trackHighlightItens todos os intervalos de silencio
			private function trackHighlightComplete(event:TrackHighlightEvent):void{
				//trace("Terminou de setar os dados");
				trackHighlightArray = new ArrayCollection();
				trackHighlightArray = event.getInfo();
				
				for(var k:int = 0; k < trackHighlightArray.length; k++){
					var sliderTrackHighlight:SliderTrackHighlight = new SliderTrackHighlight();
					sliderTrackHighlight = SliderTrackHighlight(trackHighlightArray.getItemAt(k));							
					trackHighlightItens.addItem(trackHighlightArray.getItemAt(k));													
				}
				trackHighlightArray.removeAll();
				
				//adiciona listener caso o usuário passe o mouse sobre um intervalo de silencio
				addEventListener("labelRollOver", highlightIntervalsTrue);				
			}
			
			//handler do listener que trata o evento labelRollOver do componente de desenho das barrinhas
			//destaca intervalo que o usuário passa o mouse sobre
			private function highlightIntervalsTrue(event:MouseEventWithInfo):void{
				addEventListener("labelRollOut", highlightIntervalsFalse);
				for(var k:int = 0; k < trackHighlightItens.length; k++){
					var sliderTrackHighlight:SliderTrackHighlight = new SliderTrackHighlight();
					sliderTrackHighlight = SliderTrackHighlight(trackHighlightItens.getItemAt(k));							
					//trace("Todos: " + sliderTrackHighlight.label);	
					if(sliderTrackHighlight.label == event.getInfo() && sliderTrackHighlight.label != ""){
						sliderTrackHighlight.alpha = 0.2;
					}
				}				
			}			
			
			//handler do listener que trata o evento labelRollOut do componente de desenho das barrinhas
			//volta a transparencia normal do intervalo de silencio quando o usuario passa o mouse fora desse
			private function highlightIntervalsFalse(event:MouseEventWithInfo):void{
				for(var k:int = 0; k < trackHighlightItens.length; k++){
					var sliderTrackHighlight:SliderTrackHighlight = new SliderTrackHighlight();
					sliderTrackHighlight = SliderTrackHighlight(trackHighlightItens.getItemAt(k));							
					//trace("Todos: " + sliderTrackHighlight.label);	
					if(sliderTrackHighlight.label == event.getInfo()){
						sliderTrackHighlight.alpha = 1;
					}
				}			
			}			
			
			//handler do botão beginEdition_button que deixa visivel componente de edição para inserção de conteudo complementar
			private function beginEditionButton_handler(event:MouseEvent):void{
				beginEdition_button.visible = false;
				editionIcons.visible = true;
				dropDownList.visible = false;
				dropDownListOkButton.visible = false;
				editionIcons.voice.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void{voiceEdition(sliderTrackArray);});
				editionIcons.image.addEventListener(MouseEvent.CLICK, imageEdition);
				editionIcons.text.addEventListener(MouseEvent.CLICK, textEdition_handler);
			}
			
			/* **************************************** Voice Edition ************************************************ */
			private var audioContent:AudioContent = new AudioContent();
			private var audioIndex:int;
			private var contentExists:Boolean = false;
			private function voiceEdition(sliderTrackArray:ArrayCollection):void{
				//tirar visibilidade dos trackers
				for(var i:int = 0; i < sliderTrackArray.length; i++){
					sliderTrackArray[i].visible = false;					
				}				
				Alert.show("Selecione um dos intervalos de silêncio destacados","Aviso", Alert.OK);
				addEventListener("labelClicked", intervalSelected);											
			}
			
			private var voiceText:spark.components.TextInput = new spark.components.TextInput();
			private var comment:spark.components.TextInput = new spark.components.TextInput();
			private function intervalSelected(event:MouseEventWithInfo):void{
				var labelSelected:String = event.getInfo();
				//trace("Valor do label " + event.getInfo());	
														
				var timesArray:ArrayCollection = new ArrayCollection();
				for(var i:int = 0; i < allTimesSelected.length; i++){
					//trace("Value: " + allTimesSelected.getItemAt(i).value);
					if(allTimesSelected.getItemAt(i).label == labelSelected){
						timesArray.addItem(allTimesSelected.getItemAt(i - 1).value);
						timesArray.addItem(allTimesSelected.getItemAt(i).value);
					}						
				}
				
				//verifica se trecho selecionado ja esta contido no array que guarda todos conteudos complementares inseridos				
				if(allContentInfo.length > 0){
					for(i = 0; i < allContentInfo.length; i++){
						if(allContentInfo.getItemAt(i) is AudioContent){
							if(allContentInfo.getItemAt(i).audioBeginTime == (parseFloat((timesArray.getItemAt(0) as Number).toFixed(1)))){
								contentExists = true;
								audioIndex = i;
								trace("ja existe");
								break;
							}
							else{
								contentExists = false;
							}
						}
					}
				}
				
				if(!contentExists){
					audioContent.audioBeginTime = parseFloat((timesArray.getItemAt(0) as Number).toFixed(1)) + 0.1; //0.1 de delay para não cortar fim da fala
					audioContent.audioEndTime = parseFloat((timesArray.getItemAt(1) as Number).toFixed(1));	
				}
					
				var voiceInterval:int = parseInt((timesArray.getItemAt(1)).toString()) - parseInt((timesArray.getItemAt(0)).toString());
				//trace("Tempo do intervalo selecionado: " + voiceInterval);				
				
				var panel:spark.components.Panel = new spark.components.Panel();			
				var label:spark.components.Label = new spark.components.Label();				
				var b1:spark.components.Button = new spark.components.Button();
				var b2:spark.components.Button = new spark.components.Button();					
				var label2:spark.components.Label = new spark.components.Label();
								
				b1.label = "OK";				
				b2.label = "Cancelar";
				label.text = "Digite o texto a ser narrado:";
				label2.text = "Comentário:";
				b1.left = 40;
				b2.right = 40;
				voiceText.top = 31;
				voiceText.left = 20;
				voiceText.right = 20;			
				voiceText.height = 70;
				voiceText.maxChars = voiceInterval*10;
				label2.top = 118;
				label2.left = 15;
				comment.top = 138;
				comment.height = 60;
				comment.right = 20;
				comment.left = 20;
				label.right = 15;
				label.left = 10;
				label.top = 10;
				b1.top = 218;
				b2.top = 218;
										
				panel.title = "Inserção de conteúdo de voz";
				panel.width = 240;
				panel.height = 290;				
				panel.addElement(label);
				panel.addElement(voiceText);
				panel.addElement(label2);
				panel.addElement(comment);
				panel.addElement(b1);
				panel.addElement(b2);
				
				PopUpManager.addPopUp(panel, this, true);
				PopUpManager.centerPopUp(panel);
				
				if(contentExists){
					voiceText.text = allContentInfo.getItemAt(audioIndex).audioData;
					comment.text = allContentInfo.getItemAt(audioIndex).audioComment;
				}
				
				b1.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void{closePopUp_ok(panel, labelSelected, timesArray);});
				b2.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void{closePopUp_cancel(panel);});
			}
			
			private function closePopUp_cancel(panel:spark.components.Panel):void{
				PopUpManager.removePopUp(panel);
				//retorna a visibilidade dos trackers
				for(var i:int = 0; i < sliderTrackArray.length; i++){
					sliderTrackArray[i].visible = true;					
				}
			}
			
			private var selectedLabelsArray:ArrayCollection = new ArrayCollection();
			private function closePopUp_ok(panel:spark.components.Panel, labelSelected:String, timesArray:ArrayCollection):void{
				PopUpManager.removePopUp(panel);
				trace("closePopUp_ok");
				var cleanColorArray:Array = new Array();				
				var firstMinimum:Boolean = true;
				var fillWhite:Boolean = true;
				var timesValue:ArrayCollection = new ArrayCollection();	
				trace("label selecionado " + labelSelected);
				
				//verifica se o usuario digitou texto a ser narrado
				if(voiceText.text != ""){
					//verifica se trecho selecionado ja não existe
					if(!contentExists){
						//seta propriedades do objeto global audioContent para ser utilizado depois na geração do NCL e p/ interface narrador
						audioContent.audioId = "audio" + audioLabelCounter.toString();
						audioContent.audioData = voiceText.text;
						audioContent.audioComment = comment.text;
						audioContent.audioSource = "media/audio/audio" + audioLabelCounter.toString() + ".mp3";
						allContentInfo.addItem(audioContent);		
						audioContent = new AudioContent();
						audioLabelCounter++;
													
						for(var i:int = 0; i < sliderTrackArray.length; i++){
							sliderTrackArray[i].visible = true;					
						}
						
						for(i = 0; i < allSilenceSliders.length; i++){
							var accentColor:Array = new Array();
							if(i >= 1){
								firstMinimum = false;
							}
							if(i%2 == 0){
								for(var j:int = 0; j < allSilenceSliders.getItemAt(i).length; j++){
									//trace(allSilenceSliders.getItemAt(i)[j].label);
									if(allSilenceSliders.getItemAt(i)[j].label == labelSelected){
										for(var k:int = 0; k < allSilenceSliders.getItemAt(i).length; k++){
											if(allSilenceSliders.getItemAt(i)[k].label != ""){
												if(allSilenceSliders.getItemAt(i)[k].label == labelSelected){
													//trace("verde");
													accentColor.push("0x00FF00");	//verde
													selectedLabelsArray.addItem(labelSelected);
												}
												else{
													accentColor.push("0xFF0000");  //vermelho
													trace("vermelho");
													for(var t:int = 0; t < selectedLabelsArray.length; t++){
														trace("Labels selecionados: " + selectedLabelsArray.getItemAt(t));
														if(allSilenceSliders.getItemAt(i)[k].label == selectedLabelsArray.getItemAt(t)){
															accentColor.pop();
															accentColor.push("0x00FF00");	//verde
														}
													}
												}
											}
											else{
												trace(firstMinimum + fillWhite);
												if(firstMinimum && fillWhite){
													fillWhite = false;
													accentColor.push("0xFFFFFF");	//branco											
												}
												else
													accentColor.push("0xB7BCAF"); //cinza claro									
											}								
										}
										allSilenceSliders.getItemAt(i+1).accentColors = accentColor;
									}
								}						
							}							
						}
					}
					else{
						//trace("inseriu no objeto novas infos");						
						for(i = 0; i < sliderTrackArray.length; i++){
							sliderTrackArray[i].visible = true;					
						}
						
						allContentInfo.getItemAt(audioIndex).audioComment = comment.text;
						allContentInfo.getItemAt(audioIndex).audioData = voiceText.text;
					}
					voiceText.text = "";
					comment.text = "";
					xmlContent_button.visible = true;
					volta.visible = false;
				}
				else{
					Alert.show("Você precisa digitar o texto a ser narrado!", "Alerta");
					for(i = 0; i < sliderTrackArray.length; i++){
						sliderTrackArray[i].visible = true;					
					}
				}
				
			}			
			
			/* ********************************************************************************************************** */
			
			/* **************************************** Image Edition ************************************************ */
			private function imageEdition(event:MouseEvent):void{
				imageEditionContainer.visible = true;
				barsContainer_label.visible = false;
				imageBegin.addEventListener(MouseEvent.CLICK, imageBeginTimeClick_handler);
				imageEnd.addEventListener(MouseEvent.CLICK, imageEndTimeClick_handler);
				cancelImageEdition.addEventListener(MouseEvent.CLICK, cancelImageEdition_handler);
			}
			
			private var imageContent:ImageContent = new ImageContent();
			private function imageBeginTimeClick_handler(evt:MouseEvent):void{
				imageBegin.text = formatTimeValue(player.playerDisplay.currentTime);
				imageContent.imageBeginTime = parseFloat(player.playerDisplay.currentTime.toFixed(1));
			}
			
			private function imageEndTimeClick_handler(evt:MouseEvent):void{
				imageEnd.text = formatTimeValue(player.playerDisplay.currentTime);
				imageContent.imageEndTime = parseFloat(player.playerDisplay.currentTime.toFixed(1));
				imageSelection.visible = true;
				imagePath.visible = true;	
				imageSelection.addEventListener(MouseEvent.CLICK, imageSelection_handler);				
			}
			
			private function cancelImageEdition_handler(evt:MouseEvent):void{
				imageEditionContainer.visible = false;
				barsContainer_label.visible = true;
				imageBegin.text = "";
				imageEnd.text = "";
				imageSelection.visible = false;
				imagePath.text = "";
				imagePath.visible = false;
				okImageSelection.visible = false;
				finishImageEdition.visible = false;
				showImageOnTv.visible = false;
				showImageOnMobile.visible = false;
				myimg.visible = false;
			}
			
			private function imageSelection_handler(evt:MouseEvent):void{
				var file:File;	
				file = new File();
				file.addEventListener(Event.SELECT, image_selection);
				file.browseForOpen("Please select an image...");
			}
			
			private function imageLoaded(event:Event):void{
				originalWidth = myimg.contentWidth;
				originalHeight = myimg.contentHeight;
				//trace("Height ", myimg.contentHeight);
				//trace("Width ", myimg.contentWidth);
				myimg.width = myimg.contentWidth;
				myimg.height = myimg.contentHeight;
				imageContent.original_imageWidth = myimg.contentWidth;
				imageContent.original_imageHeight = myimg.contentHeight;
			}
			
			private function image_selection(evt:Event):void{
				//var labelUtil:LabelUtil1 = new LabelUtil1();
				//labelUtil.constrainTextToWidth(imagePath, File(evt.currentTarget).nativePath);
				imagePath.text = File(evt.currentTarget).nativePath;
				myimg.source = imagePath.text;
				myimg.percentHeight = 100;
				myimg.percentWidth = 100;
				myimg.addEventListener(Event.COMPLETE, imageLoaded);
				var originalFile:File = new File(imagePath.text);
				
				//descobrir extensão da imagem, copiar para pasta do projeto e setar imageContent.imageData
				var imageType1:int = imagePath.text.indexOf(".bmp",0);
				var imageType2:int = imagePath.text.indexOf(".png",0);
				var imageType3:int = imagePath.text.indexOf(".gif",0);
				var imageType4:int = imagePath.text.indexOf(".jpg",0);
				var imageType5:int = imagePath.text.indexOf(".jpeg",0);
				var imageDefinition:String = "AuthoringTool_projects/" + projectName_textInput.text + "/NCL/media/image/image";
				if(imageType1 != -1 || imageType2 != -1 || imageType3 != -1 || imageType4 != -1 || imageType5 != -1){
					if(imageType1 != -1){
						imageContent.imageSource = "media/image/image" + imageLabelCounter + ".bmp";
						var copyFile:File = File.documentsDirectory.resolvePath(imageDefinition + imageLabelCounter + ".bmp");
						imageContent.imagePath = File.documentsDirectory.resolvePath(imageDefinition + imageLabelCounter + ".bmp").nativePath;
						originalFile.copyToAsync(copyFile, true);
					}
					if(imageType2 != -1){
						imageContent.imageSource = "media/image/image" + imageLabelCounter + ".png";
						copyFile = File.documentsDirectory.resolvePath(imageDefinition + imageLabelCounter + ".png");
						imageContent.imagePath = File.documentsDirectory.resolvePath(imageDefinition + imageLabelCounter + ".png").nativePath;
						originalFile.copyToAsync(copyFile, true);
					}
					if(imageType3 != -1){
						imageContent.imageSource = "media/image/image" + imageLabelCounter + ".gif";
						copyFile = File.documentsDirectory.resolvePath(imageDefinition + imageLabelCounter + ".gif");
						imageContent.imagePath = File.documentsDirectory.resolvePath(imageDefinition + imageLabelCounter + ".gif").nativePath;
						originalFile.copyToAsync(copyFile, true);
					}
					if(imageType4 != -1){
						imageContent.imageSource = "media/image/image" + imageLabelCounter + ".jpg";
						copyFile = File.documentsDirectory.resolvePath(imagePath + imageLabelCounter + ".jpg");
						imageContent.imagePath = File.documentsDirectory.resolvePath(imageDefinition + imageLabelCounter + ".jpg").nativePath;
						originalFile.copyToAsync(copyFile, true);
					}
					if(imageType5 != -1){
						imageContent.imageSource = "media/image/image" + imageLabelCounter + ".jpeg";
						copyFile = File.documentsDirectory.resolvePath(imageDefinition + imageLabelCounter + ".jpeg");
						imageContent.imagePath = File.documentsDirectory.resolvePath(imageDefinition + imageLabelCounter + ".jpeg").nativePath;
						originalFile.copyToAsync(copyFile, true);
					}
					//trace("Path final: " + imageContent.imagePath);
				}			
				
				okImageSelection.visible = true;
				okImageSelection.addEventListener(MouseEvent.CLICK, okImageSelection_handler);
				//this.imageDragArea.scrollRect = new Rectangle(0, 0, this.imageDragArea.width, this.imageDragArea.height);
			}		
			
			private function okImageSelection_handler(evt:Event):void{
				if(myimg.width > imageDragArea.width || myimg.height > imageDragArea.height){					
					myimg.width = imageDragArea.width * 0.3;
					myimg.height = imageDragArea.height * 0.3;	
					
					imageContent.imageWidth = myimg.width;
					imageContent.imageHeight = myimg.height;					
				}
				else{					
					imageContent.imageWidth = originalWidth;
					imageContent.imageHeight = originalHeight;					
				}
				myimg.visible = true;
				imageDragArea.visible = true;
				finishImageEdition.visible = true;
				showImageOnTv.visible = true;
				showImageOnMobile.visible = true;
				finishImageEdition.addEventListener(MouseEvent.CLICK, drawImageSlider);
				
				myimg.x = (imageDragArea.width - myimg.width) - 10;
				myimg.y = 10;
				image_height.maximum = myimg.height + (1,9 * myimg.height);
				image_width.maximum = myimg.width + (1,9 * myimg.width);				
				myimg.addEventListener(MouseEvent.CLICK, imageClicked_handler);				
				//configurar objeto com todas as info necessárias
				//imageEditionContainer.visible = false;
			}
			
			private function imageClicked_handler(event:MouseEvent):void{
				//trace("Entrou onde eu queria");
				myimg.alpha = 0.8;
				pictureControls.visible = true;
				stage.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void{imageOutsideClicked(e, event);});
				event.stopPropagation();
			}
			
			protected function image_height_changeHandler(event:Event):void
			{
				//myimg.height = image_height.value;
				if(image_height.value >= imageDragArea.height || myimg.height > imageDragArea.width){
					image_height.value = imageDragArea.height;					
					//trace("altura maior" + image_height.value);
				}
				else{
					myimg.height = image_height.value;
					imageContent.imageHeight = myimg.height;					
				}							
			}
			
			protected function image_width_changeHandler(event:Event):void
			{
				//trace("myimg.x + myimg.width: " + (myimg.x + myimg.width) + " imageDragArea.width " + imageDragArea.width);
				//trace(image_width.value);
				if(image_width.value > imageDragArea.width || ((myimg.x + myimg.width) > imageDragArea.width)){
					//trace("comprimento maior" + imageDragArea.width);
					while((myimg.x + myimg.width) > imageDragArea.width){
						myimg.width--;
						imageContent.imageWidth = myimg.width;						
					}
				}
				else{
					myimg.width = image_width.value;
					imageContent.imageWidth = myimg.width;					
				}
			}
			
			private function imageOutsideClicked(event:MouseEvent, imageEvent:MouseEvent):void{
				//trace("clicou fora");
				if(event.target != imageEvent.target && event.target != ratioCheckBox && 
					event.target != image_height.thumb && event.target != image_width.thumb){
					if(myimg.alpha < 1){
						myimg.alpha = 1;
					}
					pictureControls.visible = false;
				}
				event.stopPropagation();
			}
			
			protected function checkbox1_changeHandler(event:Event):void
			{
				if(ratioCheckBox.selected)
					myimg.maintainAspectRatio = true;
				else
					myimg.maintainAspectRatio = false;
			}	

			private function drawImageSlider(evt:MouseEvent):void{
				var colorsArray:Array = new Array();
				var dataProvider:ArrayCollection = new ArrayCollection();
				var dataObject:Object = new Object();
				var sliderMinimum:Number;
				var sliderMaximum:Number;
				var sliderCount:int = 0;
				var finish:Boolean = false;
				var activeTracker:int;	
				var imageLabel:String = "image";
				
				//descobre onde esta posicionado o cursor
				for(var r:int = 0; r < activeSlider.length; r++){
					if(activeSlider[r] == true){
						activeTracker = r;
					}
				}	
				
				//descobrir o intervalo que ta o inicio
				var intervalBegin:int;				
				intervalBegin = (imageContent.imageBeginTime/60)*60;
				
				//seleciona onde o cursor foi inicialmente posicionado
				var firstSliderSelected:int = 0;
				var index:int = 0;
				while(index < contentSliderArray.length){
					if((intervalBegin >= contentSliderArray.getItemAt(index).mainContentSlider.minimum) && 
						(intervalBegin < contentSliderArray.getItemAt(index).mainContentSlider.maximum)){
						firstSliderSelected = index;	
					}
					index++;
				}
				trace("indice da barra inicial: " + firstSliderSelected);
				
				//varre todas as barras
				for(var i:int = 0; i < contentSliderArray.length; i++){
					//verifica se trecho de conteudo vai ser inserido somente em uma barra
					if(imageContent.imageBeginTime >= contentSliderArray.getItemAt(i).mainContentSlider.minimum && 
						imageContent.imageEndTime <= contentSliderArray.getItemAt(i).mainContentSlider.maximum){
						trace("entrou no if");
						
						//realiza teste para verificar se o trecho selecionado pode ser inserido
						var test:Boolean = false;
						var found:Boolean = false;
						
						if(contentSliderArray.getItemAt(i).isImageSliderActive()){
							for(k = 1; k < contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.length; k++){
								if(!found){
									if(imageContent.imageBeginTime < contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(k).value){
										//trace("passou no 1 teste");
										if(imageContent.imageEndTime < contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(k).value){
											test = true;
											found = true;
											//trace("ok");
										}
										else{
											//trace("falhou");
											test = false;
											found = true;
										}
									}									
								}
							}
						}
						else
							test = true;
						
						//trace("resultado do teste inicial " + test);					
						if(test){
							//verifica se ja existe barra de imagem na posicao atual
							if(!contentSliderArray.getItemAt(i).isImageSliderActive()){
								var imageSlider:MultiThumbHSlider = new MultiThumbHSlider();						 
								imageSlider.isImageContentSlider = true;
								imageSlider.accentColors = ["0xFFFFFF"];
								imageSlider.showTrackHighlight = true;
								imageSlider.x = contentSliderArray.getItemAt(i).mainContentSlider.x;
								imageSlider.y = contentSliderArray.getItemAt(i).mainContentSlider.y + 15;
								imageSlider.width = 680;
								imageSlider.height = 12;	
								imageSlider.minimum = contentSliderArray.getItemAt(i).mainContentSlider.minimum;
								imageSlider.maximum = contentSliderArray.getItemAt(i).mainContentSlider.maximum;
								
								dataObject.value = imageSlider.minimum;
								dataObject.fixedValue = true;
								dataObject.label = "";
								dataProvider.addItem(dataObject);
								
								dataObject = new Object();
								dataObject.value = imageContent.imageBeginTime;
								dataObject.fixedValue = true;
								dataObject.label = "";
								dataProvider.addItem(dataObject);
								
								dataObject = new Object();
								dataObject.value = imageContent.imageEndTime;
								dataObject.fixedValue = true;
								dataObject.label = imageLabel + imageLabelCounter;
								dataProvider.addItem(dataObject);
								
								dataObject = new Object();
								dataObject.value = imageSlider.maximum;
								dataObject.fixedValue = true;
								dataObject.label = "";
								dataProvider.addItem(dataObject);						
								
								for(var k:int = 0; k < dataProvider.length; k++){							
									if(dataProvider.getItemAt(k).label != ""){
										//trace("verde");
										colorsArray.push("0x808000");  //olive						
									}
									else{
										//trace("branco"); 
										colorsArray.push("0xFFFFFF"); //branco							
									}							
								}
								imageSlider.dataProvider = dataProvider;
								imageSlider.accentColors = colorsArray;
								silenceBarsContainer.addElement(imageSlider);
								
								//acerta posicionamento das barras abaixo da inserida
								if(contentSliderArray.getItemAt(activeTracker).isTextSliderActive() ){
									trace("entrou na condicao " + activeTracker);
									contentSliderArray.getItemAt(activeTracker).textContentSlider.y = contentSliderArray.getItemAt(activeTracker).textContentSlider.y + 8;								
									for(k = activeTracker+1; k < contentSliderArray.length; k++){
										contentSliderArray.getItemAt(k).mainContentSlider.y = contentSliderArray.getItemAt(k).mainContentSlider.y + 8;
										contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y + 8;
										if(contentSliderArray.getItemAt(k).isImageSliderActive()){
											contentSliderArray.getItemAt(k).imageContentSlider.y = contentSliderArray.getItemAt(k).imageContentSlider.y + 8;
										}
										if(contentSliderArray.getItemAt(k).isTextSliderActive()){
											contentSliderArray.getItemAt(k).textContentSlider.y = contentSliderArray.getItemAt(k).textContentSlider.y + 8;
										}
									}							
								}
								else{
									trace("else do primeiro if");
									for(k = activeTracker+1; k < contentSliderArray.length; k++){
										contentSliderArray.getItemAt(k).mainContentSlider.y = contentSliderArray.getItemAt(k).mainContentSlider.y + 8;
										contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y + 8;
										if(contentSliderArray.getItemAt(k).isImageSliderActive()){
											contentSliderArray.getItemAt(k).imageContentSlider.y = contentSliderArray.getItemAt(k).imageContentSlider.y + 8;
										}
										if(contentSliderArray.getItemAt(k).isTextSliderActive()){
											contentSliderArray.getItemAt(k).textContentSlider.y = contentSliderArray.getItemAt(k).textContentSlider.y + 8;
										}
									}
								}						
								///////
								contentSliderArray.getItemAt(i).imageContentSlider = imageSlider;	
								///////							
								imageSlider.validateProperties();						
								imageSlider.minimum = contentSliderArray.getItemAt(i).mainContentSlider.minimum;
								imageSlider.maximum = contentSliderArray.getItemAt(i).mainContentSlider.maximum;
								imageSlider.validateProperties();
								finish = true;
							}						
							//ja existe conteudo de imagem na barra em questao
							else{							
								contentSliderArray.getItemAt(i).imageContentSlider.accentColors = ["0xFFFFFF"]; //preenche de branco a barra 							
								var finishDraw:Boolean = false;
								
								//zera arrays para preenchimento da barra de imagem
								colorsArray = new Array();
								dataProvider = new ArrayCollection();
								
								//varre a barra inteira analisando os valores inseridos até o momento na mesma
								for(k = 1; k < contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.length; k++){
									if(!finishDraw){
										//caso onde se insere o intervalo com conteudo antes dos demais na barra
										if(k == 1){
											trace(contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(k).value);
											if(imageContent.imageBeginTime < contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(k).value){
												trace("passou na primeira condicao");
												if(k < contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.length - 1){
													k++;
													trace("verificacao se e ultima posicao");
													if(imageContent.imageEndTime < contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(k).value){
														trace("passou na segunda condicao");
														dataProvider.addItem(contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(0));
														
														dataObject = new Object();
														dataObject.value = imageContent.imageBeginTime;
														dataObject.fixedValue = true;
														dataObject.label = "";
														dataProvider.addItem(dataObject);
														
														dataObject = new Object();
														dataObject.value = imageContent.imageEndTime;
														dataObject.fixedValue = true;
														dataObject.label = imageLabel + imageLabelCounter;
														dataProvider.addItem(dataObject);
														
														for(var t:int = k-1; t < contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.length; t++){
															dataProvider.addItem(contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(t));
															trace(contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(t).value);
														}
														finishDraw = true;
													}
												}									
											}
										}
										//caso onde se insere o intervalo com conteudo entre os demais na barra(qqer lugar depois do primeiro e antes do ultimo)
										else{
											trace("entrou na outra condicao");
											if(imageContent.imageBeginTime < contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(k).value){
												trace("passou na primeira condicao");
												if(k < contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.length - 1){
													k++;
													trace("verificacao se e ultima posicao");
													if(imageContent.imageEndTime < contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(k).value){
														trace("passou na segunda condicao");
														//dataProvider.addItem(contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(0));
														
														for(t = 0; t < k - 1; t++){
															dataProvider.addItem(contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(t));
															trace("valores " + contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(t).value);
														}
														
														dataObject = new Object();
														dataObject.value = imageContent.imageBeginTime;
														dataObject.fixedValue = true;
														dataObject.label = "";
														dataProvider.addItem(dataObject);
														
														dataObject = new Object();
														dataObject.value = imageContent.imageEndTime;
														dataObject.fixedValue = true;
														dataObject.label = imageLabel + imageLabelCounter;
														dataProvider.addItem(dataObject);
														
														for(t = k - 1; t < contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.length; t++){
															dataProvider.addItem(contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(t));
															trace("valores " + contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(t).value);
														}	
														finishDraw = true;													
													}
												}
											}
										}
									}
								}
								
								//caso não atenda nenhum dos casos anteriores significa que o trecho será o ultimo da barra
								if(!finishDraw){
									trace("entrou no ultimo caso");
									for(t = 0; t < contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.length - 1; t++){
										dataProvider.addItem(contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(t));
										trace("valores " + contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(t).value);
									}
									
									dataObject = new Object();
									dataObject.value = imageContent.imageBeginTime;
									dataObject.fixedValue = true;
									dataObject.label = "";
									dataProvider.addItem(dataObject);
									
									dataObject = new Object();
									dataObject.value = imageContent.imageEndTime;
									dataObject.fixedValue = true;
									dataObject.label = imageLabel + imageLabelCounter;
									dataProvider.addItem(dataObject);
									
									dataProvider.addItem(contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(t));
								}
								
								//inserir normal as cores 
								for(k = 0; k < dataProvider.length; k++){							
									if(dataProvider.getItemAt(k).label != ""){
										//trace("verde");
										colorsArray.push("0x808000");  //olive						
									}
									else{
										//trace("branco"); 
										colorsArray.push("0xFFFFFF"); //branco
										//colorsArray.push("0xBEBEBE"); //cinzaclaro
									}							
								}
								contentSliderArray.getItemAt(i).imageContentSlider.dataProvider = dataProvider;
								contentSliderArray.getItemAt(i).imageContentSlider.accentColors = colorsArray;
								
								silenceBarsContainer.addElement(contentSliderArray.getItemAt(i).imageContentSlider);
								
								contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.validateProperties();						
								contentSliderArray.getItemAt(i).imageContentSlider.minimum = contentSliderArray.getItemAt(i).mainContentSlider.minimum;
								contentSliderArray.getItemAt(i).imageContentSlider.maximum = contentSliderArray.getItemAt(i).mainContentSlider.maximum;
								contentSliderArray.getItemAt(i).imageContentSlider.validateProperties();
								finish = true;
							}
						}
					}
					//trecho a ser inserido maior que o valor maximo da barra atual
					else{
						test = false;
						found = false;
						
						trace("firstSelected " + firstSliderSelected + "  active " + activeTracker);
						//trecho de código realiza verificação da possibilidade de inserir o conteudo no trecho especificado pelo usuário
						for(k = firstSliderSelected; k <= activeTracker; k++){
							if(!found){
								if(contentSliderArray.getItemAt(k).isImageSliderActive()){
									trace("entrou no caso que tem coisa desenhada");
									for(r = 1; r < (contentSliderArray.getItemAt(k).imageContentSlider.dataProvider.length - 1); r++){
										if(imageContent.imageBeginTime > contentSliderArray.getItemAt(k).imageContentSlider.dataProvider.getItemAt(r).value){
											trace("1 condicao satisfeita");
											for(t = k+1; t <= activeTracker; t++){
												if(contentSliderArray.getItemAt(t).isImageSliderActive()){
													for(var y:int = 1; y < (contentSliderArray.getItemAt(t).imageContentSlider.dataProvider.length - 1); y++){
														if(imageContent.imageEndTime < contentSliderArray.getItemAt(t).imageContentSlider.dataProvider.getItemAt(y).value){
															test = true;
															found = true;
														}
														else
															test = false;
													}
												}
												else{
													trace("teste correto");
													test = true;
												}
											}
										}
										else
											test = false;
									}								
								}
								else{
									for(t = k+1; t <= activeTracker; t++){
										//trace("valor de t: " + t);										
										if(contentSliderArray.getItemAt(t).isImageSliderActive()){
											//trace("quantos valores a passar: " + (contentSliderArray.getItemAt(t).imageContentSlider.dataProvider.length - 1));
											//for(var y:int = 1; y < (contentSliderArray.getItemAt(t).imageContentSlider.dataProvider.length - 1); y++){
												if(imageContent.imageEndTime < contentSliderArray.getItemAt(t).imageContentSlider.dataProvider.getItemAt(1).value){
													//trace("ok");
													test = true;
													found = true;
												}
												else{
													//trace("else bendito que fudeu");
													test = false;
												}
											//}
										}
										else{
											test = true;
										}
									}								
								}
							}
						}
						trace("resultado final " + test);
						if(test){
							if((intervalBegin >= contentSliderArray.getItemAt(i).mainContentSlider.minimum) && 
								(intervalBegin < contentSliderArray.getItemAt(i).mainContentSlider.maximum)){
								if(!finish){
									//cursor inicial não possui barra de imagem ja desenhada
									if(!contentSliderArray.getItemAt(i).isImageSliderActive()){
										trace("desenhou primeira");
										var j:int = i;
										imageSlider = new MultiThumbHSlider();
										imageSlider.isImageContentSlider = true;
										imageSlider.accentColors = ["0xFFFFFF"];
										imageSlider.showTrackHighlight = true;
										imageSlider.x = contentSliderArray.getItemAt(j).mainContentSlider.x;
										imageSlider.y = contentSliderArray.getItemAt(j).mainContentSlider.y + 15;
										imageSlider.width = 678;
										imageSlider.height = 12;	
										imageSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
										imageSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
										
										dataObject = new Object();
										dataObject.value = imageSlider.minimum;
										dataObject.fixedValue = true;
										dataObject.label = "";
										dataProvider.addItem(dataObject);
										
										dataObject = new Object();
										dataObject.value = imageContent.imageBeginTime;
										dataObject.fixedValue = true;
										dataObject.label = "";
										dataProvider.addItem(dataObject);							
										
										dataObject = new Object();
										dataObject.value = imageSlider.maximum;
										dataObject.fixedValue = true;
										dataObject.label = imageLabel + imageLabelCounter;
										dataProvider.addItem(dataObject);
										
										for(k= 0; k < dataProvider.length; k++){							
											if(dataProvider.getItemAt(k).label != ""){
												//trace("verde");
												colorsArray.push("0x808000");  //olive						
											}
											else{
												//trace("branco");
												colorsArray.push("0xFFFFFF"); //branco							
											}							
										}
										imageSlider.dataProvider = dataProvider;
										imageSlider.accentColors = colorsArray;
										silenceBarsContainer.addElement(imageSlider);
											
										//acerta posicionamento das barras posteriores a barra inserida
										if(contentSliderArray.getItemAt(j).isTextSliderActive()){
											//trace("situacao " + contentSliderArray.getItemAt(j).isImageSliderActive() + " r:" + j);
											trace("verificou e viu que ja tem barra desenhada");
											contentSliderArray.getItemAt(j).textContentSlider.y = contentSliderArray.getItemAt(j).textContentSlider.y + 8;
											for(k = j+1; k < contentSliderArray.length; k++){
												contentSliderArray.getItemAt(k).mainContentSlider.y = contentSliderArray.getItemAt(k).mainContentSlider.y + 8;
												contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y + 8;
												if(contentSliderArray.getItemAt(k).isImageSliderActive()){
													contentSliderArray.getItemAt(k).imageContentSlider.y = contentSliderArray.getItemAt(k).imageContentSlider.y + 8;
												}
												if(contentSliderArray.getItemAt(k).isTextSliderActive()){
													contentSliderArray.getItemAt(k).textContentSlider.y = contentSliderArray.getItemAt(k).textContentSlider.y + 8;
												}
											}
										}
										else{
											for(r = j+1; r < contentSliderArray.length; r++){
												contentSliderArray.getItemAt(r).mainContentSlider.y = contentSliderArray.getItemAt(r).mainContentSlider.y + 8;
												contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y + 8;
												if(contentSliderArray.getItemAt(r).isImageSliderActive()){
													contentSliderArray.getItemAt(r).imageContentSlider.y = contentSliderArray.getItemAt(r).imageContentSlider.y + 8;
												}
												if(contentSliderArray.getItemAt(r).isTextSliderActive()){
													contentSliderArray.getItemAt(r).textContentSlider.y = contentSliderArray.getItemAt(r).textContentSlider.y + 8;
												}
											}
										}
										
										///////
										contentSliderArray.getItemAt(j).imageContentSlider = imageSlider;
										///////
										imageSlider.validateProperties();
										
										imageSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
										imageSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
										imageSlider.validateProperties();								
										j++;
										
										//loop que desenha barras intermediárias menos a ultima
										while(j < contentSliderArray.length && imageContent.imageEndTime > contentSliderArray.getItemAt(j).mainContentSlider.maximum){
											trace("entrou no while");
											//trace(silenceSlidersArray.getItemAt(j).maximum);	
											imageSlider = new MultiThumbHSlider();	
											imageSlider.isImageContentSlider = true;
											dataProvider = new ArrayCollection();
											colorsArray = new Array();
											imageSlider.accentColors = ["0xFFFFFF"];
											imageSlider.showTrackHighlight = true;
											imageSlider.x = contentSliderArray.getItemAt(j).mainContentSlider.x;
											imageSlider.y = contentSliderArray.getItemAt(j).mainContentSlider.y + 15;
											imageSlider.width = 678;
											imageSlider.height = 12;	
											imageSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
											imageSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
											
											dataObject = new Object();
											dataObject.value = imageSlider.minimum;
											dataObject.fixedValue = true;
											dataObject.label = "";
											dataProvider.addItem(dataObject);
											
											dataObject = new Object();
											dataObject.value = imageSlider.maximum;
											dataObject.fixedValue = true;
											dataObject.label = imageLabel + imageLabelCounter;
											dataProvider = new ArrayCollection();
											dataProvider.addItem(dataObject);
											colorsArray = new Array();
											
											for(k= 0; k < dataProvider.length; k++){							
												if(dataProvider.getItemAt(k).label != ""){
													//trace("verde");
													colorsArray.push("0x808000");  //olive					
												}
												else{
													//trace("branco");
													colorsArray.push("0xFFFFFF"); //branco							
												}							
											}
											imageSlider.dataProvider = dataProvider;
											imageSlider.accentColors = colorsArray;
											silenceBarsContainer.addElement(imageSlider);
											
											//acerta posicionamento das barras posteriores
											if(contentSliderArray.getItemAt(j).isTextSliderActive()){
												//trace("situacao " + contentSliderArray.getItemAt(j).isTextSliderActive() + " r:" + j);
												//trace("verificou e viu que ja tem barra desenhada");
												contentSliderArray.getItemAt(j).textContentSlider.y = contentSliderArray.getItemAt(j).textContentSlider.y + 8;
												for(k = j+1; k < contentSliderArray.length; k++){
													contentSliderArray.getItemAt(k).mainContentSlider.y = contentSliderArray.getItemAt(k).mainContentSlider.y + 8;
													contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y + 8;
													if(contentSliderArray.getItemAt(k).isImageSliderActive()){
														contentSliderArray.getItemAt(k).imageContentSlider.y = contentSliderArray.getItemAt(k).imageContentSlider.y + 8;
													}
													if(contentSliderArray.getItemAt(k).isTextSliderActive()){
														contentSliderArray.getItemAt(k).textContentSlider.y = contentSliderArray.getItemAt(k).textContentSlider.y + 8;
													}
												}
											}
											else{
												for(r = j+1; r < contentSliderArray.length; r++){
													contentSliderArray.getItemAt(r).mainContentSlider.y = contentSliderArray.getItemAt(r).mainContentSlider.y + 8;
													contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y + 8;
													if(contentSliderArray.getItemAt(r).isImageSliderActive()){
														contentSliderArray.getItemAt(r).imageContentSlider.y = contentSliderArray.getItemAt(r).imageContentSlider.y + 8;
													}
													if(contentSliderArray.getItemAt(r).isTextSliderActive()){
														contentSliderArray.getItemAt(r).textContentSlider.y = contentSliderArray.getItemAt(r).textContentSlider.y + 8;
													}
												}
											}
											
											///////
											contentSliderArray.getItemAt(j).imageContentSlider = imageSlider;
											///////
											imageSlider.validateProperties();
											
											imageSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
											imageSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
											imageSlider.validateProperties();									
											
											j++ //incrementa j para continuar o percurso pelo array de barras
										}
										//trace("depois do while");
										
										//desenha ultima barra acertando posicionamento
										if(!contentSliderArray.getItemAt(j).isImageSliderActive()){
											trace("nao tem barrinha ainda");
											imageSlider = new MultiThumbHSlider();	
											imageSlider.isImageContentSlider = true;
											dataProvider = new ArrayCollection();
											colorsArray = new Array();
											imageSlider.accentColors = ["0xFFFFFF"];
											imageSlider.showTrackHighlight = true;
											imageSlider.x = contentSliderArray.getItemAt(j).mainContentSlider.x;
											imageSlider.y = contentSliderArray.getItemAt(j).mainContentSlider.y + 15;
											imageSlider.width = 678;
											imageSlider.height = 12;	
											imageSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
											imageSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
										}
										else{
											contentSliderArray.getItemAt(j).imageContentSlider.accentColors = ["0xFFFFFF"];
											colorsArray = new Array();
											dataProvider = new ArrayCollection();
										}
										
										dataObject = new Object();
										dataObject.value = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
										dataObject.fixedValue = true;
										dataObject.label = "";
										dataProvider.addItem(dataObject);
										
										dataObject = new Object();
										dataObject.value = imageContent.imageEndTime;
										dataObject.fixedValue = true;
										dataObject.label = imageLabel + imageLabelCounter;
										dataProvider.addItem(dataObject);
										
										if(contentSliderArray.getItemAt(j).isImageSliderActive()){
											for(t = 1; t < contentSliderArray.getItemAt(j).imageContentSlider.dataProvider.length; t++){
												dataProvider.addItem(contentSliderArray.getItemAt(j).imageContentSlider.dataProvider.getItemAt(t));
												//trace("valores " + contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(t).value);
											}	
										}
										else{
											//uso somente se a barra a ser inserida é nova 
											trace("inseriu max da barra");
											dataObject = new Object();
											dataObject.value = imageSlider.maximum;
											dataObject.fixedValue = true;
											dataObject.label = "";
											dataProvider.addItem(dataObject);
										}
										
										//inserir normal
										for(k = 0; k < dataProvider.length; k++){							
											if(dataProvider.getItemAt(k).label != ""){
												//trace("verde");
												colorsArray.push("0x808000");  //olive						
											}
											else{
												//trace("branco"); 
												colorsArray.push("0xFFFFFF"); //branco
												//colorsArray.push("0xBEBEBE"); //cinzaclaro
											}							
										}
										
										if(contentSliderArray.getItemAt(j).isImageSliderActive()){
											contentSliderArray.getItemAt(j).imageContentSlider.dataProvider = dataProvider;
											contentSliderArray.getItemAt(j).imageContentSlider.accentColors = colorsArray;
										}
										else{
											//trace("ok");
											imageSlider.dataProvider = dataProvider;
											imageSlider.accentColors = colorsArray;
										}
										
										if(contentSliderArray.getItemAt(j).isImageSliderActive()){
											silenceBarsContainer.addElement(contentSliderArray.getItemAt(j).imageContentSlider);
											contentSliderArray.getItemAt(j).imageContentSlider.dataProvider.validateProperties();						
											contentSliderArray.getItemAt(j).imageContentSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
											contentSliderArray.getItemAt(j).imageContentSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
											contentSliderArray.getItemAt(j).imageContentSlider.validateProperties();
											finish = true;
										}
										else{
											//acerta posicao das barrinhas posteriores a que foi inserida
											j = activeTracker;								
											trace("activeTracker: " + activeTracker);
											if(contentSliderArray.getItemAt(j).isTextSliderActive()){
												trace("entrou qndo tem texto");
												contentSliderArray.getItemAt(j).textContentSlider.y = contentSliderArray.getItemAt(j).textContentSlider.y + 8;
												for(k = j+1; k < contentSliderArray.length; k++){
													contentSliderArray.getItemAt(k).mainContentSlider.y = contentSliderArray.getItemAt(k).mainContentSlider.y + 8;
													contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y + 8;
													if(contentSliderArray.getItemAt(k).isImageSliderActive()){
														contentSliderArray.getItemAt(k).imageContentSlider.y = contentSliderArray.getItemAt(k).imageContentSlider.y + 8;
													}
													if(contentSliderArray.getItemAt(k).isTextSliderActive()){
														contentSliderArray.getItemAt(k).textContentSlider.y = contentSliderArray.getItemAt(k).textContentSlider.y + 8;
													}
												}
											}
											else{
												for(r = j+1; r < contentSliderArray.length; r++){
													contentSliderArray.getItemAt(r).mainContentSlider.y = contentSliderArray.getItemAt(r).mainContentSlider.y + 8;
													contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y + 8;
													if(contentSliderArray.getItemAt(r).isImageSliderActive()){
														trace("tem barra desenhada " + r);
														contentSliderArray.getItemAt(r).imageContentSlider.y = contentSliderArray.getItemAt(r).imageContentSlider.y + 8;
													}
													if(contentSliderArray.getItemAt(r).isTextSliderActive()){
														trace("entrou onde eu queria testar");
														contentSliderArray.getItemAt(r).textContentSlider.y = contentSliderArray.getItemAt(r).textContentSlider.y + 8;
													}
												}
											}								
											
											silenceBarsContainer.addElement(imageSlider);
											///////
											contentSliderArray.getItemAt(j).imageContentSlider = imageSlider;
											///////
											imageSlider.validateProperties();
											
											imageSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
											imageSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
											imageSlider.validateProperties();
											finish = true;
										}
									}
									//tratar caso em que ja existe conteudo de imagem na barra
									else{
										trace("entrou no caso que ja existe conteudo de imagem na barra");
										//contentSliderArray.getItemAt(i).imageContentSlider.accentColors = ["0xFFFFFF"];
										
										//var finishDraw:Boolean = false;
										//var test:Boolean = false;
										//var found:Boolean = false;
										colorsArray = new Array();
										dataProvider = new ArrayCollection();
										
										for(k = 1; k < contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.length; k++){
											if(imageContent.imageBeginTime > contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(k).value){
												trace("passou na condicao 1 caso2");
												j = i;
												//trace("j " + j + ", activeTracker " + activeTracker);
												if(j != activeTracker){
													j++;
													//trace("j != activeTracker" + "  tamanhoArray " + contentSliderArray.length);
													while(j <= activeTracker+1 && j < contentSliderArray.length && !found){
														//trace("valor de j " + j);
														if(contentSliderArray.getItemAt(j).isImageSliderActive()){
															for(t = 1; t < contentSliderArray.getItemAt(j).imageContentSlider.dataProvider.length; t++){
																//trace("ativo? " + contentSliderArray.getItemAt(j).isImageSliderActive());
																if(!found){
																	if(imageContent.imageEndTime < contentSliderArray.getItemAt(j).imageContentSlider.dataProvider.getItemAt(t).value){
																		//trace("entrou no teste");
																		test = true;
																		found = true;
																	}
																	else{
																		//trace("test=false");
																		test = false;
																	}
																}
															}																												
															j++;
														}
														else{														
															j++;
															test = true;
														}														
													}
												}
											}
										}
										trace("valor final do teste " + test);
										if(test){
											if(!finish){
												//insere valores ja colocados na barra anteriormente
												for(t = 0; t < contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.length - 1; t++){
													dataProvider.addItem(contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(t));
													//trace("valores " + contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(t).value);
												}
												
												dataObject = new Object();
												dataObject.value = imageContent.imageBeginTime;
												dataObject.fixedValue = true;
												dataObject.label = "";
												dataProvider.addItem(dataObject);
												
												dataObject = new Object();
												dataObject.value = imageContent.imageEndTime;
												dataObject.fixedValue = true;
												dataObject.label = imageLabel + imageLabelCounter;
												dataProvider.addItem(dataObject);
												
												dataObject = new Object();
												dataObject.value = contentSliderArray.getItemAt(i).imageContentSlider.maximum;
												dataObject.fixedValue = true;
												dataObject.label = imageLabel + imageLabelCounter;
												dataProvider.addItem(dataObject);										
												
												//inserir normal
												for(k = 0; k < dataProvider.length; k++){							
													if(dataProvider.getItemAt(k).label != ""){
														//trace("verde");
														colorsArray.push("0x808000");  //olive						
													}
													else{
														//trace("branco"); 
														colorsArray.push("0xFFFFFF"); //branco
														//colorsArray.push("0xBEBEBE"); //cinzaclaro
													}							
												}
												contentSliderArray.getItemAt(i).imageContentSlider.dataProvider = dataProvider;
												contentSliderArray.getItemAt(i).imageContentSlider.accentColors = colorsArray;
												
												silenceBarsContainer.addElement(contentSliderArray.getItemAt(i).imageContentSlider);
												
												contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.validateProperties();						
												contentSliderArray.getItemAt(i).imageContentSlider.minimum = contentSliderArray.getItemAt(i).mainContentSlider.minimum;
												contentSliderArray.getItemAt(i).imageContentSlider.maximum = contentSliderArray.getItemAt(i).mainContentSlider.maximum;
												contentSliderArray.getItemAt(i).imageContentSlider.validateProperties();
												
												j = i;
												j++;
												//loop para desenhara barras intermediarias menos a ultima
												while(j < contentSliderArray.length && imageContent.imageEndTime > contentSliderArray.getItemAt(j).mainContentSlider.maximum){
													//desenha barras intermediarias
													trace("entrou no while pilantra");
													imageSlider = new MultiThumbHSlider();	
													imageSlider.isImageContentSlider = true;
													dataProvider = new ArrayCollection();
													colorsArray = new Array();
													imageSlider.accentColors = ["0xFFFFFF"];
													imageSlider.showTrackHighlight = true;
													imageSlider.x = contentSliderArray.getItemAt(j).mainContentSlider.x;
													imageSlider.y = contentSliderArray.getItemAt(j).mainContentSlider.y + 15;
													imageSlider.width = 678;
													imageSlider.height = 12;	
													imageSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
													imageSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
													
													dataObject = new Object();
													dataObject.value = imageSlider.minimum;
													dataObject.fixedValue = true;
													dataObject.label = imageLabel + imageLabelCounter;
													dataProvider.addItem(dataObject);
													
													dataObject = new Object();
													dataObject.value = imageSlider.maximum;
													dataObject.fixedValue = true;
													dataObject.label = imageLabel + imageLabelCounter;
													dataProvider = new ArrayCollection();
													dataProvider.addItem(dataObject);
													colorsArray = new Array();
													
													for(k= 0; k < dataProvider.length; k++){							
														if(dataProvider.getItemAt(k).label != ""){
															//trace("verde");
															colorsArray.push("0x808000");  //olive					
														}
														else{
															//trace("branco");
															colorsArray.push("0xFFFFFF"); //branco							
														}							
													}
													imageSlider.dataProvider = dataProvider;
													imageSlider.accentColors = colorsArray;
													silenceBarsContainer.addElement(imageSlider);
													
													if(contentSliderArray.getItemAt(j).isTextSliderActive()){
														//trace("situacao " + contentSliderArray.getItemAt(j).isImageSliderActive() + " r:" + j);
														//trace("verificou e viu que ja tem barra desenhada");
														contentSliderArray.getItemAt(j).textContentSlider.y = contentSliderArray.getItemAt(j).textContentSlider.y + 8;
														for(k = j+1; k < contentSliderArray.length; k++){
															contentSliderArray.getItemAt(k).mainContentSlider.y = contentSliderArray.getItemAt(k).mainContentSlider.y + 8;
															contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y + 8;
															if(contentSliderArray.getItemAt(k).isImageSliderActive()){
																contentSliderArray.getItemAt(k).imageContentSlider.y = contentSliderArray.getItemAt(k).imageContentSlider.y + 8;
															}
															if(contentSliderArray.getItemAt(k).isTextSliderActive()){
																contentSliderArray.getItemAt(k).textContentSlider.y = contentSliderArray.getItemAt(k).textContentSlider.y + 8;
															}
														}
													}
													else{
														for(r = j+1; r < contentSliderArray.length; r++){
															contentSliderArray.getItemAt(r).mainContentSlider.y = contentSliderArray.getItemAt(r).mainContentSlider.y + 8;
															contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y + 8;
															if(contentSliderArray.getItemAt(r).isImageSliderActive()){
																contentSliderArray.getItemAt(r).imageContentSlider.y = contentSliderArray.getItemAt(r).imageContentSlider.y + 8;
															}
															if(contentSliderArray.getItemAt(k).isTextSliderActive()){
																contentSliderArray.getItemAt(k).textContentSlider.y = contentSliderArray.getItemAt(k).textContentSlider.y + 8;
															}
														}
													}
													
													///////
													contentSliderArray.getItemAt(j).imageContentSlider = imageSlider;
													///////
													imageSlider.validateProperties();
													
													imageSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
													imageSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
													imageSlider.validateProperties();									
													
													j++ //incrementa j para continuar o percurso pelo array de barras*/
												}
												
												//trace("depois do while");
												//desenha ultima barra acertando posicionamento
												if(!contentSliderArray.getItemAt(j).isImageSliderActive()){
													trace("nao tem barrinha ainda");
													imageSlider = new MultiThumbHSlider();	
													imageSlider.isImageContentSlider = true;
													dataProvider = new ArrayCollection();
													colorsArray = new Array();
													imageSlider.accentColors = ["0xFFFFFF"];
													imageSlider.showTrackHighlight = true;
													imageSlider.x = contentSliderArray.getItemAt(j).mainContentSlider.x;
													imageSlider.y = contentSliderArray.getItemAt(j).mainContentSlider.y + 15;
													imageSlider.width = 678;
													imageSlider.height = 12;	
													imageSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
													imageSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
												}
												else{
													contentSliderArray.getItemAt(j).imageContentSlider.accentColors = ["0xFFFFFF"];
													colorsArray = new Array();
													dataProvider = new ArrayCollection();
												}
																					
												dataObject = new Object();
												dataObject.value = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
												dataObject.fixedValue = true;
												dataObject.label = "";
												dataProvider.addItem(dataObject);
												
												dataObject = new Object();
												dataObject.value = imageContent.imageEndTime;
												dataObject.fixedValue = true;
												dataObject.label = imageLabel + imageLabelCounter;
												dataProvider.addItem(dataObject);
												
												if(contentSliderArray.getItemAt(j).isImageSliderActive()){
													for(t = 1; t < contentSliderArray.getItemAt(j).imageContentSlider.dataProvider.length; t++){
														dataProvider.addItem(contentSliderArray.getItemAt(j).imageContentSlider.dataProvider.getItemAt(t));
														//trace("valores " + contentSliderArray.getItemAt(i).imageContentSlider.dataProvider.getItemAt(t).value);
													}	
												}
												else{
													//uso somente se a barra a ser inserida é nova 
													trace("inseriu max da barra");
													dataObject = new Object();
													dataObject.value = imageSlider.maximum;
													dataObject.fixedValue = true;
													dataObject.label = "";
													dataProvider.addItem(dataObject);
												}
												
												//inserir normal
												for(k = 0; k < dataProvider.length; k++){							
													if(dataProvider.getItemAt(k).label != ""){
														//trace("verde");
														colorsArray.push("0x808000");  //olive					
													}
													else{
														//trace("branco"); 
														colorsArray.push("0xFFFFFF"); //branco
														//colorsArray.push("0xBEBEBE"); //cinzaclaro
													}							
												}
												
												if(contentSliderArray.getItemAt(j).isImageSliderActive()){
													contentSliderArray.getItemAt(j).imageContentSlider.dataProvider = dataProvider;
													contentSliderArray.getItemAt(j).imageContentSlider.accentColors = colorsArray;
												}
												else{
													//trace("ok");
													imageSlider.dataProvider = dataProvider;
													imageSlider.accentColors = colorsArray;
												}
												
												if(contentSliderArray.getItemAt(j).isImageSliderActive()){
													silenceBarsContainer.addElement(contentSliderArray.getItemAt(j).imageContentSlider);
													contentSliderArray.getItemAt(j).imageContentSlider.dataProvider.validateProperties();						
													contentSliderArray.getItemAt(j).imageContentSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
													contentSliderArray.getItemAt(j).imageContentSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
													contentSliderArray.getItemAt(j).imageContentSlider.validateProperties();
													finish = true;
												}
												else{
													//acertar posicao das barrinhas
													j = activeTracker;								
													trace("activeTracker: " + activeTracker);
													if(contentSliderArray.getItemAt(j).isTextSliderActive()){
														trace("entrou qndo tem texto");
														contentSliderArray.getItemAt(j).textContentSlider.y = contentSliderArray.getItemAt(j).textContentSlider.y + 8;
														for(k = j+1; k < contentSliderArray.length; k++){
															contentSliderArray.getItemAt(k).mainContentSlider.y = contentSliderArray.getItemAt(k).mainContentSlider.y + 8;
															contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y + 8;
															if(contentSliderArray.getItemAt(k).isImageSliderActive()){
																contentSliderArray.getItemAt(k).imageContentSlider.y = contentSliderArray.getItemAt(k).imageContentSlider.y + 8;
															}
															if(contentSliderArray.getItemAt(k).isTextSliderActive()){
																contentSliderArray.getItemAt(k).textContentSlider.y = contentSliderArray.getItemAt(k).textContentSlider.y + 8;
															}
														}
													}
													else{
														for(r = j+1; r < contentSliderArray.length; r++){
															contentSliderArray.getItemAt(r).mainContentSlider.y = contentSliderArray.getItemAt(r).mainContentSlider.y + 8;
															contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y + 8;
															if(contentSliderArray.getItemAt(r).isImageSliderActive()){
																trace("tem barra desenhada " + r);
																contentSliderArray.getItemAt(r).imageContentSlider.y = contentSliderArray.getItemAt(r).imageContentSlider.y + 8;
															}
															if(contentSliderArray.getItemAt(r).isTextSliderActive()){
																contentSliderArray.getItemAt(r).textContentSlider.y = contentSliderArray.getItemAt(r).textContentSlider.y + 8;
															}
														}
													}					
													
													silenceBarsContainer.addElement(imageSlider);
													///////
													contentSliderArray.getItemAt(j).imageContentSlider = imageSlider;
													///////
													imageSlider.validateProperties();
													
													imageSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
													imageSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
													imageSlider.validateProperties();
													finish = true;
												}
											}
										}
									}
								}
							}
						}
					}						
				}
				
				if(finish){
					//salva objeto atual antes de limpar variaveis
					imageContent.positionX = myimg.x;
					imageContent.positionY = myimg.y;
					imageContent.imageWidth = myimg.width;
					imageContent.imageHeight = myimg.height;
					imageContent.imageId = "image" + imageLabelCounter.toString();
					
					var originalFile:File = new File(imagePath.text);
					var fs:FileStream = new FileStream();
					var bytes:ByteArray = new ByteArray();	
					fs.open(originalFile, FileMode.READ);
					fs.readBytes(bytes);
					
					//descobre a extensão da imagem
					var fileExtension:String = imagePath.text;
					fileExtension = fileExtension.slice(fileExtension.indexOf("."), fileExtension.length);
					trace(fileExtension);										
					
					//copia imagem original para a pasta do projeto
					var imageFile:File = File.documentsDirectory.resolvePath("AuthoringTool_projects/" + projectName_textInput.text +
																				"/NCL/media/image/image" + imageLabelCounter.toString() + fileExtension);
					var fileStream:FileStream = new FileStream(); 
					fileStream.open(imageFile, FileMode.WRITE);
					fileStream.writeBytes(bytes);					
					fileStream.close();
					
					/* acerta infos que descrevem os dispositivos que irão receber a midia de imagem*/
					if(showImageOnTv.selected)
						imageContent.imageOnTv = true;					
					else
						imageContent.imageOnTv = false;
					
					if(showImageOnMobile.selected)
						imageContent.imageOnMobile = true;
					else
						imageContent.imageOnMobile = false;
					
					allContentInfo.addItem(imageContent);
					imageContent = new ImageContent(); 	//cria novo objeto para ficar disponivel para receber novas info					
															
					//zera todas as variáveis
					imageEditionContainer.visible = false;
					barsContainer_label.visible = true;
					imageBegin.text = "";
					imageEnd.text = "";
					imagePath.text = "";
					imageSelection.visible = false;
					okImageSelection.visible = false;
					finishImageEdition.visible = false;
					showImageOnMobile.visible = false;
					showImageOnTv.visible = false;
					myimg.source = "";
					imageDragArea.visible = false;
					pictureControls.visible = false;
					volta.visible = false;
					xmlContent_button.visible = true;
					imageLabelCounter++;
				}
				else{
					Alert.show("Não é possível inserir conteúdo no intervalo especificado!");
					imageEditionContainer.visible = false;
					barsContainer_label.visible = true;
					imageBegin.text = "";
					imageEnd.text = "";
					imagePath.text = "";
					imageSelection.visible = false;
					okImageSelection.visible = false;
					finishImageEdition.visible = false;
					showImageOnTv.visible = false;
					showImageOnMobile.visible = false;
					myimg.source = "";
					imageDragArea.visible = false;
					pictureControls.visible = false;
				}
			}
			/* ********************************************************************************************************** */

			/* **************************************** Text Edition ********************************************************************* */
			//funcao chamada ao iniciar o RichTextEditor que remove coisas inuteis do componente e insere cores compatíveis com o Ginga-NCL
			private var backgroundColorPicker:ColorPicker = new ColorPicker();
			public function removeLinkTextInput():void{
				textEditionComponent.linkTextInput.parent.removeChild(textEditionComponent.linkTextInput);
				textEditionComponent.colorPicker.dataProvider = [{label:"White", color:"0xFFFFFF"}, {label:"Black", color:"0x000000"}, 
																 {label:"Silver", color:"0xC0C0C0"}, {label:"Gray", color:"0x808080"},
																 {label:"Red", color:"0xFF0000"}, {label:"Maroon", color:"0x800000"},
																 {label:"Fuchsia", color:"0xFF00FF"}, {label:"Purple", color:"0x800080"},
																 {label:"Lime", color:"0x00FF00"}, {label:"Green", color:"0x008000"},
																 {label:"Yellow", color:"0xFFFF00"}, {label:"Olive", color:"0x808000"},
																 {label:"Blue", color:"0x0000FF"}, {label:"Navy", color:"0x000080"},
																 {label:"Aqua", color:"0x00FFFF"}, {label:"Teal", color:"0x008080"}];
				textEditionComponent.colorPicker.editable = false;	
				//textEditionComponent.textArea.setStyle('contentBackgroundColor','0x000080');
				var textAreaBackgroundLabel:mx.controls.Label = new mx.controls.Label();
				textAreaBackgroundLabel.htmlText = '<font face="Arial" color="black" size="12">Background:</font>'; 
				textEditionComponent.toolbar.addChild(textAreaBackgroundLabel);
				backgroundColorPicker.editable = false;
				backgroundColorPicker.dataProvider = [{label:"White", color:"0xFFFFFF"}, {label:"Black", color:"0x000000"}, 
					{label:"Silver", color:"0xC0C0C0"}, {label:"Gray", color:"0x808080"},
					{label:"Red", color:"0xFF0000"}, {label:"Maroon", color:"0x800000"},
					{label:"Fuchsia", color:"0xFF00FF"}, {label:"Purple", color:"0x800080"},
					{label:"Lime", color:"0x00FF00"}, {label:"Green", color:"0x008000"},
					{label:"Yellow", color:"0xFFFF00"}, {label:"Olive", color:"0x808000"},
					{label:"Blue", color:"0x0000FF"}, {label:"Navy", color:"0x000080"},
					{label:"Aqua", color:"0x00FFFF"}, {label:"Teal", color:"0x008080"},
					{label:"No background", color:""}];
				backgroundColorPicker.selectedColor = 0xFFFFFF;
				textEditionComponent.toolbar.addChild(backgroundColorPicker);
				backgroundColorPicker.addEventListener(ColorPickerEvent.CHANGE, changeBackgroundColor_textEditionComponent);
				var viewTextContent:mx.controls.Button = new mx.controls.Button();
				viewTextContent.label = "Visualizar";
				viewTextContent.setStyle("fontSize", 13);
				viewTextContent.id = "viewTextContent";
				textEditionComponent.toolbar.addChild(viewTextContent);	
				viewTextContent.addEventListener(MouseEvent.CLICK, textView_handler);				
			}
			
			//seta a cor escolhida pelo usuário no componente textEditionComponent
			private function changeBackgroundColor_textEditionComponent(event:ColorPickerEvent):void{
				textEditionComponent.textArea.setStyle('contentBackgroundColor', event.color);
				textEditionComponent.textArea.htmlText = textEditionComponent.textArea.htmlText;				
			}
			
			private function textEdition_handler(event:MouseEvent):void{
				textEditionContainer.visible = true;
				barsContainer_label.visible = false;
				textBegin.addEventListener(MouseEvent.CLICK, textBeginTimeClick_handler);
				textEnd.addEventListener(MouseEvent.CLICK, textEndTimeClick_handler);				
			}
			
			private var textContent:TextContent = new TextContent();
			private function textBeginTimeClick_handler(event:MouseEvent):void{
				textBegin.text = formatTimeValue(player.playerDisplay.currentTime);
				textContent.textBeginTime = parseFloat(player.playerDisplay.currentTime.toFixed(1));
			}
			
			private function textEndTimeClick_handler(event:MouseEvent):void{
				textEnd.text = formatTimeValue(player.playerDisplay.currentTime);
				textContent.textEndTime = parseFloat(player.playerDisplay.currentTime.toFixed(1));
				templateTextCheckBox.visible = true;
				textEditionComponent.visible = true;
				showTextOnTv.visible = true;
				showTextOnMobile.visible = true;				
				//textView.visible = true;
				finishTextEdition.visible = true;
				cancelTextEdition.visible = true;
				cancelTextEdition.addEventListener(MouseEvent.CLICK, cancelTextEdition_handler);
				//textView.addEventListener(MouseEvent.CLICK, textView_handler);				
				templateTextCheckBox.addEventListener(MouseEvent.CLICK, templateTextCheckbox_handler);
			}
			
			private function templateTextCheckbox_handler(event:MouseEvent):void{
				if(templateTextCheckBox.selected){
					templateTextArea.visible = true;
					templateTextLabel.visible = true;
					//textView.visible = true;
					if(textEditionComponent.visible){
						textEditionComponent.visible = false;
						if(textEditionComponent.textArea.text != ""){
							templateTextArea.text = textEditionComponent.textArea.text;
							textEdited.text = "";
						}
					}
				}
				else{
					textEditionComponent.visible = true;
					//textView.visible = true;
					if(templateTextArea.visible){
						templateTextArea.visible = false;
						templateTextLabel.visible = false;
					}
				}
			}
			
			private function cancelTextEdition_handler(event:MouseEvent):void{
				textEditionComponent.visible = false;
				finishTextEdition.visible = false;
				//textView.visible = false;
				textEditionContainer.visible = false;
				barsContainer_label.visible = true;
				templateTextArea.visible = false;
				templateTextLabel.visible = false;
				templateTextCheckBox.visible = false;
				textBegin.text = "";
				textEnd.text = "";
				textEdited.htmlText = "";
			}
			
			private function textView_handler(event:MouseEvent):void{
				textEdited.visible = true;
				textDragArea.visible = true;
				if(!templateTextCheckBox.selected){
					textEdited.htmlText = textEditionComponent.textArea.htmlText;
					textContent.textData = textEditionComponent.textArea.htmlText.toString();
					//trace("inseriu isso: " + textEditionComponent.textArea.htmlText.toString());
					//contentBackgroundAlpha="0" parametro usado no componente textEdited para deixar só o texto sem cor de fundo
					textEdited.setStyle('contentBackgroundColor', backgroundColorPicker.selectedColor);
					var backgroundColorPickerUtils:BackGroundColorUtils = new BackGroundColorUtils();
					textContent.textBackgroundColor = backgroundColorPickerUtils.get_stringColorName(backgroundColorPicker.selectedColor); //armazena cor na forma de string para o NCL					
					//Alert.show(textEdited.htmlText.toString());
				}
				else{
					//criar objeto com parametros do template
					var textTemplate:TextTemplate = new TextTemplate();
					var myformat:TextFormat = new TextFormat();
					var field:TextField = new TextField();
					
					myformat = textTemplate.getTextStyle(myformat);					
					field.text = templateTextArea.text;
					field.setTextFormat(myformat);
					textEdited.htmlText = field.htmlText;	
					textContent.textData = field.htmlText;
				}
				textEdited.x = (textDragArea.width - textEdited.width) - 10;
				textEdited.y = 10;
				//originalWidth = textEdited.width;
				//originalHeight = textEdited.height;
				textContent.textWidth = textEdited.width;
				textContent.textHeight = textEdited.height;
				textEdited.addEventListener(MouseEvent.CLICK, textEditedClicked_handler);
				textArea_height.maximum = textEdited.height + (1,9 * textEdited.height); 
				textArea_width.maximum = textEdited.width + (1,9 * textEdited.width);
				finishTextEdition.addEventListener(MouseEvent.CLICK, finishTextEdition_handler);
			}			
			
			private function textEditedClicked_handler(event:MouseEvent):void{
				textAreaControls.visible = true;
				textEdited.setStyle("borderAlpha", 1);
				stage.addEventListener(MouseEvent.CLICK, function(e:MouseEvent):void{textOutsideClicked(e, event);});
				event.stopPropagation();				
			}
			
			private function textOutsideClicked(event:MouseEvent, textEvent:MouseEvent):void{
				//trace("clicou fora");
				if(event.target != textEvent.target && 
					event.target != textArea_height.thumb && event.target != textArea_width.thumb){
					textAreaControls.visible = false;
					textEdited.setStyle("borderAlpha", 0);
				}
				event.stopPropagation();
			}			
			
			protected function text_height_changeHandler(event:Event):void
			{
				if(textArea_height.value >= textDragArea.height || textEdited.height > textDragArea.width){
					textArea_height.value = imageDragArea.height;					
				}
				else{
					textEdited.height = textArea_height.value;
					textContent.textHeight = textEdited.height/originalHeight;
				}							
			}
			
			protected function text_width_changeHandler(event:Event):void
			{
				if(textArea_width.value > textDragArea.width || ((textEdited.x + textEdited.width) > textDragArea.width)){
					while((textEdited.x + textEdited.width) > textDragArea.width){
						textEdited.width--;
						textContent.textWidth = textEdited.width;
					}
				}
				else{
					textEdited.width = textArea_width.value;
					textContent.textWidth = textEdited.width;
				}
			}
			
			private function finishTextEdition_handler(event:MouseEvent):void{
				//se clicou apenas para editar visto que o texto ja esta inserido nao faz nada
				/*if(){}
				else{*/
				var colorsArray:Array = new Array();
				var dataProvider:ArrayCollection = new ArrayCollection();
				var dataObject:Object = new Object();
				var sliderMinimum:Number;
				var sliderMaximum:Number;
				var sliderCount:int = 0;
				var finish:Boolean = false;
				var activeTracker:int;
				var textLabel:String = "text";
				
				//descobre onde esta posicionado o cursor
				for(var r:int = 0; r < activeSlider.length; r++){
					if(activeSlider[r] == true){
						activeTracker = r;
					}
				}	
				
				//descobrir o intervalo que ta o inicio
				var intervalBegin:int;				
				intervalBegin = (textContent.textBeginTime/60)*60;			
				
				//seleciona onde o cursor foi inicialmente posicionado
				var firstSliderSelected:int = 0;
				var index:int = 0;
				while(index < contentSliderArray.length){
					if((intervalBegin >= contentSliderArray.getItemAt(index).mainContentSlider.minimum) && 
						(intervalBegin < contentSliderArray.getItemAt(index).mainContentSlider.maximum)){
						firstSliderSelected = index;	
					}
					index++;
				}
				trace("indice da barra inicial texto: " + firstSliderSelected);
				
				
				//varre todas as barras
				for(var i:int = 0; i < contentSliderArray.length; i++){
					//verifica se trecho de conteudo vai ser inserido somente em uma barra
					if(textContent.textBeginTime >= contentSliderArray.getItemAt(i).mainContentSlider.minimum && 
						textContent.textEndTime <= contentSliderArray.getItemAt(i).mainContentSlider.maximum){
						trace("entrou no if");
						
						//realiza teste para verificar se o trecho selecionado pode ser inserido
						var test:Boolean = false;
						var found:Boolean = false;
						
						if(contentSliderArray.getItemAt(i).isTextSliderActive()){
							for(k = 1; k < contentSliderArray.getItemAt(i).textContentSlider.dataProvider.length; k++){
								if(!found){
									if(textContent.textBeginTime < contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(k).value){
										//trace("passou no 1 teste");
										if(textContent.textEndTime < contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(k).value){
											test = true;
											found = true;
											//trace("ok");
										}
										else{
											//trace("falhou");
											test = false;
											found = true;
										}
									}									
								}
							}
						}
						else
							test = true;
						
						trace("resultado do teste para texto: " + test);
						if(test){
							//verifica se ja existe barra de texto na posicao atual
							if(!contentSliderArray.getItemAt(i).isTextSliderActive()){
								var textSlider:MultiThumbHSlider = new MultiThumbHSlider();						 
								textSlider.isTextContentSlider = true;
								textSlider.accentColors = ["0xFFFFFF"];
								textSlider.showTrackHighlight = true;
								textSlider.x = contentSliderArray.getItemAt(i).mainContentSlider.x;
								textSlider.y = contentSliderArray.getItemAt(i).mainContentSlider.y + 15;
								textSlider.width = 680;
								textSlider.height = 12;	
								textSlider.minimum = contentSliderArray.getItemAt(i).mainContentSlider.minimum;
								textSlider.maximum = contentSliderArray.getItemAt(i).mainContentSlider.maximum;
								
								dataObject.value = textSlider.minimum;
								dataObject.fixedValue = true;
								dataObject.label = "";
								dataProvider.addItem(dataObject);
								
								dataObject = new Object();
								dataObject.value = textContent.textBeginTime;
								dataObject.fixedValue = true;
								dataObject.label = "";
								dataProvider.addItem(dataObject);
								
								dataObject = new Object();
								dataObject.value = textContent.textEndTime;
								dataObject.fixedValue = true;
								dataObject.label = textLabel + textLabelCounter;
								textContent.textId = textLabel + textLabelCounter;
								dataProvider.addItem(dataObject);
								
								dataObject = new Object();
								dataObject.value = textSlider.maximum;
								dataObject.fixedValue = true;
								dataObject.label = "";
								dataProvider.addItem(dataObject);
								
								for(var k:int = 0; k < dataProvider.length; k++){							
									if(dataProvider.getItemAt(k).label != ""){
										//trace("azul");
										colorsArray.push("0x0000FF");  //azul						
									}
									else{
										//trace("branco"); 
										colorsArray.push("0xFFFFFF"); //branco							
									}							
								}
								textSlider.dataProvider = dataProvider;
								textSlider.accentColors = colorsArray;
								silenceBarsContainer.addElement(textSlider);
								
								//acerta posicionamento das barras abaixo da inserida
								if(contentSliderArray.getItemAt(activeTracker).isImageSliderActive()){
									trace("entrou na condicao texto " + activeTracker);
									textSlider.y = textSlider.y + 8;
									for(k = activeTracker+1; k < contentSliderArray.length; k++){
										contentSliderArray.getItemAt(k).mainContentSlider.y = contentSliderArray.getItemAt(k).mainContentSlider.y + 8;
										contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y + 8;
										if(contentSliderArray.getItemAt(k).isImageSliderActive()){
											contentSliderArray.getItemAt(k).imageContentSlider.y = contentSliderArray.getItemAt(k).imageContentSlider.y + 8;
										}
										if(contentSliderArray.getItemAt(k).isTextSliderActive()){
											contentSliderArray.getItemAt(k).textContentSlider.y = contentSliderArray.getItemAt(k).textContentSlider.y + 8;
										}
									}							
								}
								else{
									trace("else do primeiro if texto");
									for(k = activeTracker+1; k < contentSliderArray.length; k++){
										contentSliderArray.getItemAt(k).mainContentSlider.y = contentSliderArray.getItemAt(k).mainContentSlider.y + 8;
										contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y + 8;
										if(contentSliderArray.getItemAt(k).isImageSliderActive()){
											contentSliderArray.getItemAt(k).imageContentSlider.y = contentSliderArray.getItemAt(k).imageContentSlider.y + 8;
										}
										if(contentSliderArray.getItemAt(k).isTextSliderActive()){
											contentSliderArray.getItemAt(k).textContentSlider.y = contentSliderArray.getItemAt(k).textContentSlider.y + 8;
										}
									}
								}		
								///////
								contentSliderArray.getItemAt(i).textContentSlider = textSlider;						
								///////									
								textSlider.validateProperties();						
								textSlider.minimum = contentSliderArray.getItemAt(i).mainContentSlider.minimum;
								textSlider.maximum = contentSliderArray.getItemAt(i).mainContentSlider.maximum;
								textSlider.validateProperties();
								finish = true;
							}
							//ja existe conteudo de texto na barra em questao
							else{
								contentSliderArray.getItemAt(i).textContentSlider.accentColors = ["0xFFFFFF"]; //preenche de branco a barra 							
								var finishDraw:Boolean = false;
								
								//zera arrays para preenchimento da barra de texto
								colorsArray = new Array();
								dataProvider = new ArrayCollection();
								
								//varre a barra inteira analisando os valores inseridos até o momento na mesma
								for(k = 1; k < contentSliderArray.getItemAt(i).textContentSlider.dataProvider.length; k++){
									if(!finishDraw){
										//caso onde se insere o intervalo com conteudo antes dos demais na barra
										if(k == 1){
											//trace(contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(k).value);
											if(textContent.textBeginTime < contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(k).value){
												trace("passou na primeira condicao texto");
												if(k < contentSliderArray.getItemAt(i).textContentSlider.dataProvider.length - 1){
													k++;
													trace("verificacao se e ultima posicao texto");
													if(textContent.textEndTime < contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(k).value){
														trace("passou na segunda condicao texto");
														dataProvider.addItem(contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(0));
														
														dataObject = new Object();
														dataObject.value = textContent.textBeginTime;
														dataObject.fixedValue = true;
														dataObject.label = "";
														dataProvider.addItem(dataObject);
														
														dataObject = new Object();
														dataObject.value = textContent.textEndTime;
														dataObject.fixedValue = true;
														dataObject.label = textLabel + textLabelCounter;
														dataProvider.addItem(dataObject);
														
														for(var t:int = k-1; t < contentSliderArray.getItemAt(i).textContentSlider.dataProvider.length; t++){
															dataProvider.addItem(contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(t));
															//trace(contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(t).value);
														}
														finishDraw = true;
													}
												}									
											}
										}
										//caso onde se insere o intervalo com conteudo entre os demais na barra(qqer lugar depois do primeiro e antes do ultimo)
										else{
											trace("entrou na outra condicao texto");
											if(textContent.textBeginTime < contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(k).value){
												trace("passou na primeira condicao texto");
												if(k < contentSliderArray.getItemAt(i).textContentSlider.dataProvider.length - 1){
													k++;
													trace("verificacao se e ultima posicao texto");
													if(textContent.textEndTime < contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(k).value){
														trace("passou na segunda condicao texto");
														//dataProvider.addItem(contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(0));
														
														for(t = 0; t < k - 1; t++){
															dataProvider.addItem(contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(t));
															trace("valoresTexto " + contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(t).value);
														}
														
														dataObject = new Object();
														dataObject.value = textContent.textBeginTime;
														dataObject.fixedValue = true;
														dataObject.label = "";
														dataProvider.addItem(dataObject);
														
														dataObject = new Object();
														dataObject.value = textContent.textEndTime;
														dataObject.fixedValue = true;
														dataObject.label = textLabel + textLabelCounter;
														dataProvider.addItem(dataObject);
														
														for(t = k - 1; t < contentSliderArray.getItemAt(i).textContentSlider.dataProvider.length; t++){
															dataProvider.addItem(contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(t));
															trace("valoresTexto " + contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(t).value);
														}	
														finishDraw = true;													
													}
												}
											}
										}
									}
								}
								
								//caso não atenda nenhum dos casos anteriores significa que o trecho será o ultimo da barra
								if(!finishDraw){
									trace("entrou no ultimo caso texto");
									for(t = 0; t < contentSliderArray.getItemAt(i).textContentSlider.dataProvider.length - 1; t++){
										dataProvider.addItem(contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(t));
										trace("valorestexto" + contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(t).value);
									}
									
									dataObject = new Object();
									dataObject.value = textContent.textBeginTime;
									dataObject.fixedValue = true;
									dataObject.label = "";
									dataProvider.addItem(dataObject);
									
									dataObject = new Object();
									dataObject.value = textContent.textEndTime;
									dataObject.fixedValue = true;
									dataObject.label = textLabel + textLabelCounter;
									dataProvider.addItem(dataObject);
									
									dataProvider.addItem(contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(t));
								}
								
								//inserir normal as cores 
								for(k = 0; k < dataProvider.length; k++){							
									if(dataProvider.getItemAt(k).label != ""){
										//trace("azul");
										colorsArray.push("0x0000FF");  //azul							
									}
									else{
										//trace("branco"); 
										colorsArray.push("0xFFFFFF"); //branco
										//colorsArray.push("0xBEBEBE"); //cinzaclaro
									}							
								}
								contentSliderArray.getItemAt(i).textContentSlider.dataProvider = dataProvider;
								contentSliderArray.getItemAt(i).textContentSlider.accentColors = colorsArray;
								
								silenceBarsContainer.addElement(contentSliderArray.getItemAt(i).textContentSlider);
								
								contentSliderArray.getItemAt(i).textContentSlider.dataProvider.validateProperties();						
								contentSliderArray.getItemAt(i).textContentSlider.minimum = contentSliderArray.getItemAt(i).mainContentSlider.minimum;
								contentSliderArray.getItemAt(i).textContentSlider.maximum = contentSliderArray.getItemAt(i).mainContentSlider.maximum;
								contentSliderArray.getItemAt(i).textContentSlider.validateProperties();
								finish = true;	
							}
						}
					}
					//trecho a ser inserido maior que o valor maximo da barra atual
					else{
						test = false;
						found = false;
						
						//trecho de código realiza verificação da possibilidade de inserir o conteudo no trecho especificado pelo usuário
						for(k = firstSliderSelected; k <= activeTracker; k++){
							if(!found){
								if(contentSliderArray.getItemAt(k).isTextSliderActive()){
									//trace("entrou no caso que tem coisa desenhada");
									for(r = 1; r < (contentSliderArray.getItemAt(k).textContentSlider.dataProvider.length - 1); r++){
										if(textContent.textBeginTime > contentSliderArray.getItemAt(k).textContentSlider.dataProvider.getItemAt(r).value){
											for(t = k+1; t <= activeTracker; t++){
												if(contentSliderArray.getItemAt(t).isTextSliderActive()){
													for(var y:int = 1; y < (contentSliderArray.getItemAt(t).textContentSlider.dataProvider.length - 1); y++){
														if(textContent.textEndTime < contentSliderArray.getItemAt(t).textContentSlider.dataProvider.getItemAt(y).value){
															test = true;
															found = true;
														}
														else
															test = false;
													}
												}
												else
													test = true;
											}
										}
										else
											test = false;
									}								
								}
								else{
									for(t = k+1; t <= activeTracker; t++){
										//trace("valor de t: " + t);										
										if(contentSliderArray.getItemAt(t).isTextSliderActive()){
											//trace("quantos valores a passar: " + (contentSliderArray.getItemAt(t).textContentSlider.dataProvider.length - 1));
											//for(var y:int = 1; y < (contentSliderArray.getItemAt(t).textContentSlider.dataProvider.length - 1); y++){
											if(textContent.textEndTime < contentSliderArray.getItemAt(t).textContentSlider.dataProvider.getItemAt(1).value){
												//trace("ok");
												test = true;
												found = true;
											}
											else{
												//trace("else bendito que fudeu");
												test = false;
											}
											//}
										}
										else{
											test = true;
										}
									}								
								}
							}
						}
						trace("resultado final " + test);
						if(test){
							if((intervalBegin >= contentSliderArray.getItemAt(i).mainContentSlider.minimum) && 
								(intervalBegin < contentSliderArray.getItemAt(i).mainContentSlider.maximum)){
								if(!finish){
									//cursor inicial não possui barra de texto ja desenhada
									if(!contentSliderArray.getItemAt(i).isTextSliderActive()){
										trace("desenhou primeira");
										var j:int = i;
										textSlider = new MultiThumbHSlider();
										textSlider.isTextContentSlider = true;
										textSlider.accentColors = ["0xFFFFFF"];
										textSlider.showTrackHighlight = true;
										textSlider.x = contentSliderArray.getItemAt(j).mainContentSlider.x;
										textSlider.y = contentSliderArray.getItemAt(j).mainContentSlider.y + 15;
										textSlider.width = 678;
										textSlider.height = 12;	
										textSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
										textSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
										
										dataObject = new Object();
										dataObject.value = textSlider.minimum;
										dataObject.fixedValue = true;
										dataObject.label = "";
										dataProvider.addItem(dataObject);
										
										dataObject = new Object();
										dataObject.value = textContent.textBeginTime;
										dataObject.fixedValue = true;
										dataObject.label = "";
										dataProvider.addItem(dataObject);							
										
										dataObject = new Object();
										dataObject.value = textSlider.maximum;
										dataObject.fixedValue = true;
										dataObject.label = textLabel + textLabelCounter;
										dataProvider.addItem(dataObject);
										
										for(k= 0; k < dataProvider.length; k++){							
											if(dataProvider.getItemAt(k).label != ""){
												//trace("azul");
												colorsArray.push("0x0000FF");  //azul						
											}
											else{
												//trace("branco");
												colorsArray.push("0xFFFFFF"); //branco							
											}							
										}
										textSlider.dataProvider = dataProvider;
										textSlider.accentColors = colorsArray;
										silenceBarsContainer.addElement(textSlider);
										
										//acerta posicionamento das barras posteriores a barra inserida
										if(contentSliderArray.getItemAt(j).isImageSliderActive()){
											//trace("situacao " + contentSliderArray.getItemAt(j).isTextSliderActive() + " r:" + j);
											trace("verificou e viu que ja tem barra desenhada");
											textSlider.y = textSlider.y + 8;
											for(k = j+1; k < contentSliderArray.length; k++){
												contentSliderArray.getItemAt(k).mainContentSlider.y = contentSliderArray.getItemAt(k).mainContentSlider.y + 8;
												contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y + 8;
												if(contentSliderArray.getItemAt(k).isImageSliderActive()){
													contentSliderArray.getItemAt(k).imageContentSlider.y = contentSliderArray.getItemAt(k).imageContentSlider.y + 8;
												}
												if(contentSliderArray.getItemAt(k).isTextSliderActive()){
													contentSliderArray.getItemAt(k).textContentSlider.y = contentSliderArray.getItemAt(k).textContentSlider.y + 8;
												}
											}
										}
										else{
											for(r = j+1; r < contentSliderArray.length; r++){
												contentSliderArray.getItemAt(r).mainContentSlider.y = contentSliderArray.getItemAt(r).mainContentSlider.y + 8;
												contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y + 8;
												if(contentSliderArray.getItemAt(r).isImageSliderActive()){
													contentSliderArray.getItemAt(r).imageContentSlider.y = contentSliderArray.getItemAt(r).imageContentSlider.y + 8;
												}
												if(contentSliderArray.getItemAt(r).isTextSliderActive()){
													contentSliderArray.getItemAt(r).textContentSlider.y = contentSliderArray.getItemAt(r).textContentSlider.y + 8;
												}
											}
										}
										
										///////
										contentSliderArray.getItemAt(j).textContentSlider = textSlider;
										///////
										textSlider.validateProperties();
										
										textSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
										textSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
										textSlider.validateProperties();								
										j++;
										
										//loop que desenha barras intermediárias menos a ultima
										while(j < contentSliderArray.length && textContent.textEndTime > contentSliderArray.getItemAt(j).mainContentSlider.maximum){
											trace("entrou no while");
											//trace(silenceSlidersArray.getItemAt(j).maximum);	
											textSlider = new MultiThumbHSlider();	
											textSlider.isTextContentSlider = true;
											dataProvider = new ArrayCollection();
											colorsArray = new Array();
											textSlider.accentColors = ["0xFFFFFF"];
											textSlider.showTrackHighlight = true;
											textSlider.x = contentSliderArray.getItemAt(j).mainContentSlider.x;
											textSlider.y = contentSliderArray.getItemAt(j).mainContentSlider.y + 15;
											textSlider.width = 678;
											textSlider.height = 12;	
											textSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
											textSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
											
											dataObject = new Object();
											dataObject.value = textSlider.minimum;
											dataObject.fixedValue = true;
											dataObject.label = "";
											dataProvider.addItem(dataObject);
											
											dataObject = new Object();
											dataObject.value = textSlider.maximum;
											dataObject.fixedValue = true;
											dataObject.label = textLabel + textLabelCounter;
											dataProvider = new ArrayCollection();
											dataProvider.addItem(dataObject);
											colorsArray = new Array();
											
											for(k= 0; k < dataProvider.length; k++){							
												if(dataProvider.getItemAt(k).label != ""){
													//trace("azul");
													colorsArray.push("0x0000FF");  //azul								
												}
												else{
													//trace("branco");
													colorsArray.push("0xFFFFFF"); //branco							
												}							
											}
											textSlider.dataProvider = dataProvider;
											textSlider.accentColors = colorsArray;
											silenceBarsContainer.addElement(textSlider);
											
											//acerta posicionamento das barras posteriores
											if(contentSliderArray.getItemAt(j).isImageSliderActive()){
												//trace("situacao " + contentSliderArray.getItemAt(j).isTextSliderActive() + " r:" + j);
												//trace("verificou e viu que ja tem barra desenhada");
												textSlider.y = textSlider.y + 8;
												for(k = j+1; k < contentSliderArray.length; k++){
													contentSliderArray.getItemAt(k).mainContentSlider.y = contentSliderArray.getItemAt(k).mainContentSlider.y + 8;
													contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y + 8;
													if(contentSliderArray.getItemAt(k).isImageSliderActive()){
														contentSliderArray.getItemAt(k).imageContentSlider.y = contentSliderArray.getItemAt(k).imageContentSlider.y + 8;
													}
													if(contentSliderArray.getItemAt(k).isTextSliderActive()){
														contentSliderArray.getItemAt(k).textContentSlider.y = contentSliderArray.getItemAt(k).textContentSlider.y + 8;
													}
												}
											}
											else{
												for(r = j+1; r < contentSliderArray.length; r++){
													contentSliderArray.getItemAt(r).mainContentSlider.y = contentSliderArray.getItemAt(r).mainContentSlider.y + 8;
													contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y + 8;
													if(contentSliderArray.getItemAt(r).isImageSliderActive()){
														contentSliderArray.getItemAt(r).imageContentSlider.y = contentSliderArray.getItemAt(r).imageContentSlider.y + 8;
													}
													if(contentSliderArray.getItemAt(r).isTextSliderActive()){
														contentSliderArray.getItemAt(r).textContentSlider.y = contentSliderArray.getItemAt(r).textContentSlider.y + 8;
													}
												}
											}
											
											///////
											contentSliderArray.getItemAt(j).textContentSlider = textSlider;
											///////
											textSlider.validateProperties();
											
											textSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
											textSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
											textSlider.validateProperties();									
											
											j++ //incrementa j para continuar o percurso pelo array de barras
										}
										//trace("depois do while");
										
										//desenha ultima barra acertando posicionamento
										if(!contentSliderArray.getItemAt(j).isTextSliderActive()){
											trace("nao tem barrinha ainda");
											textSlider = new MultiThumbHSlider();	
											textSlider.isTextContentSlider = true;
											dataProvider = new ArrayCollection();
											colorsArray = new Array();
											textSlider.accentColors = ["0xFFFFFF"];
											textSlider.showTrackHighlight = true;
											textSlider.x = contentSliderArray.getItemAt(j).mainContentSlider.x;
											textSlider.y = contentSliderArray.getItemAt(j).mainContentSlider.y + 15;
											textSlider.width = 678;
											textSlider.height = 12;	
											textSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
											textSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
										}
										else{
											contentSliderArray.getItemAt(j).textContentSlider.accentColors = ["0xFFFFFF"];
											colorsArray = new Array();
											dataProvider = new ArrayCollection();
										}
										
										dataObject = new Object();
										dataObject.value = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
										dataObject.fixedValue = true;
										dataObject.label = "";
										dataProvider.addItem(dataObject);
										
										dataObject = new Object();
										dataObject.value = textContent.textEndTime;
										dataObject.fixedValue = true;
										dataObject.label = textLabel + textLabelCounter;
										dataProvider.addItem(dataObject);
										
										if(contentSliderArray.getItemAt(j).isTextSliderActive()){
											for(t = 1; t < contentSliderArray.getItemAt(j).textContentSlider.dataProvider.length; t++){
												dataProvider.addItem(contentSliderArray.getItemAt(j).textContentSlider.dataProvider.getItemAt(t));
												//trace("valores " + contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(t).value);
											}	
										}
										else{
											//uso somente se a barra a ser inserida é nova 
											trace("inseriu max da barra");
											dataObject = new Object();
											dataObject.value = textSlider.maximum;
											dataObject.fixedValue = true;
											dataObject.label = "";
											dataProvider.addItem(dataObject);
										}
										
										//inserir normal
										for(k = 0; k < dataProvider.length; k++){							
											if(dataProvider.getItemAt(k).label != ""){
												//trace("azul");
												colorsArray.push("0x0000FF");  //azul							
											}
											else{
												//trace("branco"); 
												colorsArray.push("0xFFFFFF"); //branco
												//colorsArray.push("0xBEBEBE"); //cinzaclaro
											}							
										}
										
										if(contentSliderArray.getItemAt(j).isTextSliderActive()){
											contentSliderArray.getItemAt(j).textContentSlider.dataProvider = dataProvider;
											contentSliderArray.getItemAt(j).textContentSlider.accentColors = colorsArray;
										}
										else{
											//trace("ok");
											textSlider.dataProvider = dataProvider;
											textSlider.accentColors = colorsArray;
										}
										
										if(contentSliderArray.getItemAt(j).isTextSliderActive()){
											silenceBarsContainer.addElement(contentSliderArray.getItemAt(j).textContentSlider);
											contentSliderArray.getItemAt(j).textContentSlider.dataProvider.validateProperties();						
											contentSliderArray.getItemAt(j).textContentSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
											contentSliderArray.getItemAt(j).textContentSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
											contentSliderArray.getItemAt(j).textContentSlider.validateProperties();
											finish = true;
										}
										else{
											//acerta posicao das barrinhas posteriores a que foi inserida
											j = activeTracker;								
											trace("activeTracker: " + activeTracker);
											if(contentSliderArray.getItemAt(j).isImageSliderActive()){
												trace("entrou qndo tem texto");
												textSlider.y = textSlider.y + 8;
												for(k = j+1; k < contentSliderArray.length; k++){
													contentSliderArray.getItemAt(k).mainContentSlider.y = contentSliderArray.getItemAt(k).mainContentSlider.y + 8;
													contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y + 8;
													if(contentSliderArray.getItemAt(k).isImageSliderActive()){
														contentSliderArray.getItemAt(k).imageContentSlider.y = contentSliderArray.getItemAt(k).imageContentSlider.y + 8;
													}
													if(contentSliderArray.getItemAt(k).isTextSliderActive()){
														contentSliderArray.getItemAt(k).textContentSlider.y = contentSliderArray.getItemAt(k).textContentSlider.y + 8;
													}
												}
											}
											else{
												for(r = j+1; r < contentSliderArray.length; r++){
													contentSliderArray.getItemAt(r).mainContentSlider.y = contentSliderArray.getItemAt(r).mainContentSlider.y + 8;
													contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y + 8;
													if(contentSliderArray.getItemAt(r).isImageSliderActive()){
														trace("tem barra desenhada " + r);
														contentSliderArray.getItemAt(r).imageContentSlider.y = contentSliderArray.getItemAt(r).imageContentSlider.y + 8;
													}
													if(contentSliderArray.getItemAt(r).isTextSliderActive()){
														contentSliderArray.getItemAt(r).textContentSlider.y = contentSliderArray.getItemAt(r).textContentSlider.y + 8;
													}
												}
											}								
											
											silenceBarsContainer.addElement(textSlider);
											///////
											contentSliderArray.getItemAt(j).textContentSlider = textSlider;
											///////
											textSlider.validateProperties();
											
											textSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
											textSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
											textSlider.validateProperties();
											finish = true;
										}
									}
									//tratar caso em que ja existe conteudo de texto na barra
									else{
										trace("entrou no caso que ja existe conteudo de texto na barra");
										//contentSliderArray.getItemAt(i).textContentSlider.accentColors = ["0xFFFFFF"];										
										//var finishDraw:Boolean = false;
										//var test:Boolean = false;
										//var found:Boolean = false;
										colorsArray = new Array();
										dataProvider = new ArrayCollection();
										
										for(k = 1; k < contentSliderArray.getItemAt(i).textContentSlider.dataProvider.length; k++){
											if(textContent.textBeginTime > contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(k).value){
												trace("passou na condicao 1 caso2");
												j = i;
												//trace("j " + j + ", activeTracker " + activeTracker);
												if(j != activeTracker){
													j++;
													//trace("j != activeTracker" + "  tamanhoArray " + contentSliderArray.length);
													while(j <= activeTracker+1 && j < contentSliderArray.length && !found){
														//trace("valor de j " + j);
														if(contentSliderArray.getItemAt(j).isTextSliderActive()){
															for(t = 1; t < contentSliderArray.getItemAt(j).textContentSlider.dataProvider.length; t++){
																//trace("ativo? " + contentSliderArray.getItemAt(j).isTextSliderActive());
																if(!found){
																	if(textContent.textEndTime < contentSliderArray.getItemAt(j).textContentSlider.dataProvider.getItemAt(t).value){
																		//trace("entrou no teste");
																		test = true;
																		found = true;
																	}
																	else{
																		//trace("test=false");
																		test = false;
																	}
																}
															}																												
															j++;
														}
														else{														
															j++;
															test = true;
														}														
													}
												}
											}
										}
										trace("valor final do teste " + test);
										if(test){
											if(!finish){
												//insere valores ja colocados na barra anteriormente
												for(t = 0; t < contentSliderArray.getItemAt(i).textContentSlider.dataProvider.length - 1; t++){
													dataProvider.addItem(contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(t));
													//trace("valores " + contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(t).value);
												}
												
												dataObject = new Object();
												dataObject.value = textContent.textBeginTime;
												dataObject.fixedValue = true;
												dataObject.label = "";
												dataProvider.addItem(dataObject);
												
												dataObject = new Object();
												dataObject.value = textContent.textEndTime;
												dataObject.fixedValue = true;
												dataObject.label = textLabel + textLabelCounter;
												dataProvider.addItem(dataObject);
												
												dataObject = new Object();
												dataObject.value = contentSliderArray.getItemAt(i).textContentSlider.maximum;
												dataObject.fixedValue = true;
												dataObject.label = textLabel + textLabelCounter;
												dataProvider.addItem(dataObject);										
												
												//inserir normal
												for(k = 0; k < dataProvider.length; k++){							
													if(dataProvider.getItemAt(k).label != ""){
														//trace("azul");
														colorsArray.push("0x0000FF");  //azul							
													}
													else{
														//trace("branco"); 
														colorsArray.push("0xFFFFFF"); //branco
														//colorsArray.push("0xBEBEBE"); //cinzaclaro
													}							
												}
												contentSliderArray.getItemAt(i).textContentSlider.dataProvider = dataProvider;
												contentSliderArray.getItemAt(i).textContentSlider.accentColors = colorsArray;
												
												silenceBarsContainer.addElement(contentSliderArray.getItemAt(i).textContentSlider);
												
												contentSliderArray.getItemAt(i).textContentSlider.dataProvider.validateProperties();						
												contentSliderArray.getItemAt(i).textContentSlider.minimum = contentSliderArray.getItemAt(i).mainContentSlider.minimum;
												contentSliderArray.getItemAt(i).textContentSlider.maximum = contentSliderArray.getItemAt(i).mainContentSlider.maximum;
												contentSliderArray.getItemAt(i).textContentSlider.validateProperties();
												
												j = i;
												j++;
												//loop para desenhara barras intermediarias menos a ultima
												while(j < contentSliderArray.length && textContent.textEndTime > contentSliderArray.getItemAt(j).mainContentSlider.maximum){
													//desenha barras intermediarias
													trace("entrou no while pilantra");
													textSlider = new MultiThumbHSlider();	
													textSlider.isTextContentSlider = true;
													dataProvider = new ArrayCollection();
													colorsArray = new Array();
													textSlider.accentColors = ["0xFFFFFF"];
													textSlider.showTrackHighlight = true;
													textSlider.x = contentSliderArray.getItemAt(j).mainContentSlider.x;
													textSlider.y = contentSliderArray.getItemAt(j).mainContentSlider.y + 15;
													textSlider.width = 678;
													textSlider.height = 12;	
													textSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
													textSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
													
													dataObject = new Object();
													dataObject.value = textSlider.minimum;
													dataObject.fixedValue = true;
													dataObject.label = textLabel + textLabelCounter;
													dataProvider.addItem(dataObject);
													
													dataObject = new Object();
													dataObject.value = textSlider.maximum;
													dataObject.fixedValue = true;
													dataObject.label = textLabel + textLabelCounter;
													dataProvider = new ArrayCollection();
													dataProvider.addItem(dataObject);
													colorsArray = new Array();
													
													for(k= 0; k < dataProvider.length; k++){							
														if(dataProvider.getItemAt(k).label != ""){
															//trace("azul");
															colorsArray.push("0x0000FF");  //azul							
														}
														else{
															//trace("branco");
															colorsArray.push("0xFFFFFF"); //branco							
														}							
													}
													textSlider.dataProvider = dataProvider;
													textSlider.accentColors = colorsArray;
													silenceBarsContainer.addElement(textSlider);
													
													if(contentSliderArray.getItemAt(j).isImageSliderActive()){
														//trace("situacao " + contentSliderArray.getItemAt(j).isTextSliderActive() + " r:" + j);
														//trace("verificou e viu que ja tem barra desenhada");
														textSlider.y = textSlider.y + 8;
														for(k = j+1; k < contentSliderArray.length; k++){
															contentSliderArray.getItemAt(k).mainContentSlider.y = contentSliderArray.getItemAt(k).mainContentSlider.y + 8;
															contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y + 8;
															if(contentSliderArray.getItemAt(k).isImageSliderActive()){
																contentSliderArray.getItemAt(k).imageContentSlider.y = contentSliderArray.getItemAt(k).imageContentSlider.y + 8;
															}
															if(contentSliderArray.getItemAt(k).isTextSliderActive()){
																contentSliderArray.getItemAt(k).textContentSlider.y = contentSliderArray.getItemAt(k).textContentSlider.y + 8;
															}
														}
													}
													else{
														for(r = j+1; r < contentSliderArray.length; r++){
															contentSliderArray.getItemAt(r).mainContentSlider.y = contentSliderArray.getItemAt(r).mainContentSlider.y + 8;
															contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y + 8;
															if(contentSliderArray.getItemAt(r).isImageSliderActive()){
																contentSliderArray.getItemAt(r).imageContentSlider.y = contentSliderArray.getItemAt(r).imageContentSlider.y + 8;
															}
															if(contentSliderArray.getItemAt(k).isTextSliderActive()){
																contentSliderArray.getItemAt(k).textContentSlider.y = contentSliderArray.getItemAt(k).textContentSlider.y + 8;
															}
														}
													}
													
													///////
													contentSliderArray.getItemAt(j).textContentSlider = textSlider;
													///////
													textSlider.validateProperties();
													
													textSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
													textSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
													textSlider.validateProperties();									
													
													j++ //incrementa j para continuar o percurso pelo array de barras*/
												}
												
												//trace("depois do while");
												//desenha ultima barra acertando posicionamento
												if(!contentSliderArray.getItemAt(j).isTextSliderActive()){
													trace("nao tem barrinha ainda");
													textSlider = new MultiThumbHSlider();	
													textSlider.isTextContentSlider = true;
													dataProvider = new ArrayCollection();
													colorsArray = new Array();
													textSlider.accentColors = ["0xFFFFFF"];
													textSlider.showTrackHighlight = true;
													textSlider.x = contentSliderArray.getItemAt(j).mainContentSlider.x;
													textSlider.y = contentSliderArray.getItemAt(j).mainContentSlider.y + 15;
													textSlider.width = 678;
													textSlider.height = 12;	
													textSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
													textSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
												}
												else{
													contentSliderArray.getItemAt(j).textContentSlider.accentColors = ["0xFFFFFF"];
													colorsArray = new Array();
													dataProvider = new ArrayCollection();
												}
												
												dataObject = new Object();
												dataObject.value = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
												dataObject.fixedValue = true;
												dataObject.label = "";
												dataProvider.addItem(dataObject);
												
												dataObject = new Object();
												dataObject.value = textContent.textEndTime;
												dataObject.fixedValue = true;
												dataObject.label = textLabel + textLabelCounter;
												dataProvider.addItem(dataObject);
												
												if(contentSliderArray.getItemAt(j).isTextSliderActive()){
													for(t = 1; t < contentSliderArray.getItemAt(j).textContentSlider.dataProvider.length; t++){
														dataProvider.addItem(contentSliderArray.getItemAt(j).textContentSlider.dataProvider.getItemAt(t));
														//trace("valores " + contentSliderArray.getItemAt(i).textContentSlider.dataProvider.getItemAt(t).value);
													}	
												}
												else{
													//uso somente se a barra a ser inserida é nova 
													trace("inseriu max da barra");
													dataObject = new Object();
													dataObject.value = textSlider.maximum;
													dataObject.fixedValue = true;
													dataObject.label = "";
													dataProvider.addItem(dataObject);
												}
												
												//inserir normal
												for(k = 0; k < dataProvider.length; k++){							
													if(dataProvider.getItemAt(k).label != ""){
														//trace("azul");
														colorsArray.push("0x0000FF");  //azul						
													}
													else{
														//trace("branco"); 
														colorsArray.push("0xFFFFFF"); //branco
														//colorsArray.push("0xBEBEBE"); //cinzaclaro
													}							
												}
												
												if(contentSliderArray.getItemAt(j).isTextSliderActive()){
													contentSliderArray.getItemAt(j).textContentSlider.dataProvider = dataProvider;
													contentSliderArray.getItemAt(j).textContentSlider.accentColors = colorsArray;
												}
												else{
													//trace("ok");
													textSlider.dataProvider = dataProvider;
													textSlider.accentColors = colorsArray;
												}
												
												if(contentSliderArray.getItemAt(j).isTextSliderActive()){
													silenceBarsContainer.addElement(contentSliderArray.getItemAt(j).textContentSlider);
													contentSliderArray.getItemAt(j).textContentSlider.dataProvider.validateProperties();						
													contentSliderArray.getItemAt(j).textContentSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
													contentSliderArray.getItemAt(j).textContentSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
													contentSliderArray.getItemAt(j).textContentSlider.validateProperties();
													finish = true;
												}
												else{
													//acertar posicao das barrinhas
													j = activeTracker;								
													trace("activeTracker: " + activeTracker);
													if(contentSliderArray.getItemAt(j).isImageSliderActive()){
														trace("entrou qndo tem texto");
														textSlider.y = textSlider.y + 8;
														for(k = j+1; k < contentSliderArray.length; k++){
															contentSliderArray.getItemAt(k).mainContentSlider.y = contentSliderArray.getItemAt(k).mainContentSlider.y + 8;
															contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(k).mainContentSlider.sliderTracker.y + 8;
															if(contentSliderArray.getItemAt(k).isImageSliderActive()){
																contentSliderArray.getItemAt(k).imageContentSlider.y = contentSliderArray.getItemAt(k).imageContentSlider.y + 8;
															}
															if(contentSliderArray.getItemAt(k).isTextSliderActive()){
																contentSliderArray.getItemAt(k).textContentSlider.y = contentSliderArray.getItemAt(k).textContentSlider.y + 8;
															}
														}
													}
													else{
														for(r = j+1; r < contentSliderArray.length; r++){
															contentSliderArray.getItemAt(r).mainContentSlider.y = contentSliderArray.getItemAt(r).mainContentSlider.y + 8;
															contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y = contentSliderArray.getItemAt(r).mainContentSlider.sliderTracker.y + 8;
															if(contentSliderArray.getItemAt(r).isImageSliderActive()){
																trace("tem barra desenhada " + r);
																contentSliderArray.getItemAt(r).imageContentSlider.y = contentSliderArray.getItemAt(r).imageContentSlider.y + 8;
															}
															if(contentSliderArray.getItemAt(r).isTextSliderActive()){
																contentSliderArray.getItemAt(r).textContentSlider.y = contentSliderArray.getItemAt(r).textContentSlider.y + 8;
															}
														}
													}					
													
													silenceBarsContainer.addElement(textSlider);
													///////
													contentSliderArray.getItemAt(j).textContentSlider = textSlider;
													///////
													textSlider.validateProperties();
													
													textSlider.minimum = contentSliderArray.getItemAt(j).mainContentSlider.minimum;
													textSlider.maximum = contentSliderArray.getItemAt(j).mainContentSlider.maximum;
													textSlider.validateProperties();
													finish = true;
												}
											}
										}
									}
								}
							}
						}
					}						
				}
				
				if(finish){
					//salva objeto atual antes de zerar as variaveis	
					/*if(templateTextCheckBox.selected){
						//mudar: o certo é criar um arquivo .txt com o texto inserido pelo usuário
						textContent.textData = templateTextArea.text;						
					}
					else{
						textContent.textData = textEditionComponent.textArea.htmlText.toString();
					}*/					
					textContent.positionX = textEdited.x;
					textContent.positionY = textEdited.y;
					textContent.textWidth = textEdited.width;
					textContent.textHeight = textEdited.height;
					textContent.textId = "text" + textLabelCounter.toString();
					textContent.textSource = "media/text/text" + textLabelCounter.toString() + ".html";
					
					var textData:String = textContent.textData;
					var sizeIndex:int = textData.indexOf("SIZE=",0);
					trace(sizeIndex);
					var fontSize:int = parseInt(textData.substring(sizeIndex+6, sizeIndex+8));
					trace("tamanho da fonte: " + fontSize);			
					var newFormat:String = textData.substring(0, sizeIndex) + "style=\"font-size: " + fontSize.toString() + "px\"" + textData.substring(sizeIndex+9, textData.length);
					trace(newFormat);
					textContent.textData = newFormat;
					
					/* acerta infos que descrevem os dispositivos que irão receber a midia de texto*/
					if(showTextOnTv.selected)
						textContent.textOnTv = true;					
					else
						textContent.textOnTv = false;
					
					if(showTextOnMobile.selected)
						textContent.textOnMobile = true;
					else
						textContent.textOnMobile = false;					
					
					//cria novo arquivo .html com texto formatado para ser lido pelo NCL
					var textFile:File = File.documentsDirectory.resolvePath("AuthoringTool_projects/" + projectName_textInput.text + "/NCL/media/text/text" + textLabelCounter.toString() + ".html");
					var fileStream:FileStream = new FileStream(); 
					fileStream.open(textFile, FileMode.WRITE); 
					fileStream.writeMultiByte(newFormat, "utf-8");					
					fileStream.close();
					//Alert.show("conteúdo adiciontado com sucesso");					
					allContentInfo.addItem(textContent);
					trace("Confirmacao do conteudo de texto" + textContent.textData);
					textContent = new TextContent(); //cria novo objeto para ficar disponivel para receber novas info
					
					//zera todas as variáveis 
					showTextOnTv.visible = false;
					showTextOnMobile.visible = false;
					textEditionContainer.visible = false;
					barsContainer_label.visible = true;
					textBegin.text = "";
					textEnd.text = "";
					finishTextEdition.visible = false;
					//textView.visible = false;
					textEditionComponent.text = "";
					textEditionComponent.visible = false;
					textEdited.text = "";
					textDragArea.visible = false;
					templateTextArea.visible = false;
					templateTextCheckBox.visible = false;
					templateTextLabel.visible = false;
					xmlContent_button.visible = true;
					textLabelCounter++;
					templateTextCheckBox.selected = false;
					volta.visible = false;
					addEventListener("labelClicked", textIntervalSelected);	
				}
				else{
					Alert.show("Não é possível inserir conteúdo no intervalo especificado!");
					textEditionContainer.visible = false;
					barsContainer_label.visible = true;
					textBegin.text = "";
					textEnd.text = "";
					finishTextEdition.visible = false;
					//textView.visible = false;
					textEditionComponent.text = "";
					textEditionComponent.visible = false;
					textEdited.text = "";
					textDragArea.visible = false;
					templateTextArea.visible = false;
					templateTextCheckBox.visible = false;
					templateTextLabel.visible = false;
					templateTextCheckBox.selected = false;
					showTextOnTv.visible = false;
					showTextOnMobile.visible = false;
				}					
			}			
			
			private function textIntervalSelected(event:MouseEventWithInfo):void{
				var labelSelected:String = event.getInfo();
				trace("Valor do label " + event.getInfo());	
				
				for(var i:int = 0; i < allContentInfo.length; i++){
					trace(allContentInfo.getItemAt(i));
					var obj:Object = new Object();
					
					if(allContentInfo.getItemAt(i) is TextContent){
						if(allContentInfo.getItemAt(i).textId == labelSelected){
							trace("encontrou");
							textEditionContainer.visible = true;
							barsContainer_label.visible = false;
							textBegin.text = formatTimeValue(parseFloat(allContentInfo.getItemAt(i).textBeginTime));
							textEnd.text = formatTimeValue(parseFloat(allContentInfo.getItemAt(i).textEndTime));
							textBegin.editable = false;
							textEnd.editable = false;
							finishTextEdition.visible = true;
							//textView.visible = true;
							textEditionComponent.textArea.setStyle('contentBackgroundColor', allContentInfo.getItemAt(i).textBackgroundColor);
							textEditionComponent.textArea.htmlText = allContentInfo.getItemAt(i).textData;
							textEditionComponent.visible = true;
							//textEdited.text = allContentInfo.getItemAt(i).textData;
							//textDragArea.visible = true;
							
							//templateTextArea.visible = false;
							//templateTextCheckBox.visible = false;
							//templateTextLabel.visible = false;		
						}
					}
				}				
			}
			
			//handler que faz a exclusao do conteudo de texto selecionado
			/*private function excludeText(event:MouseEvent):void{
				trace("exclui o conteudo de texto selecionado");
			}*/
			/* ********************************************************************************************************** */
			
			//gera XML com conteudos complementares inseridos pelo usuario
			protected function xmlContent_button_clickHandler(event:MouseEvent):void
			{
				/* criacao do arquivo xml com conteudos complementares */
				var converter:ContentConverterToXML = new ContentConverterToXML();
				xmlContents = converter.objectToXML(allContentInfo.source);
				var fileStream:FileStream = new FileStream(); 
				fileStream.open(xmlContentsFile, FileMode.WRITE); 
				fileStream.writeMultiByte(xmlContents.toXMLString(), "utf-8");
				fileStream.close();				
				//Alert.show("Arquivo XML gerado com sucesso");
				
				//acerto de visibilidade de componentes
				volta.visible = false;
				xmlContent_button.visible = false;
				msgDestaques.visible = true;
				dropDownList.visible = false;
				dropDownListOkButton.visible = false;
				myDG.visible = true;
				barsContainer.visible = false;
				barsContainer_label.visible = false;
								
				if(elementDrawn){
					var index:int;
					for(var j:int = elementIndexCounter.length - 1; j >= 0; j--){
						index = elementIndexCounter[j];
						//trace("index:" + index);
						silenceBarsContainer.getElementAt(index).visible = false;													
					}					
				}
				beginEdition_button.visible = false;
				editionIcons.visible = false;
				var destaque:Object;
				destaque = tasks.getItemAt(myDG.selectedIndex);
				player.slider.minimum = 0;
				player.slider.maximum = player.playerDisplay.duration;
				player.playerDisplay.seek(0);
				player.slider.value = 0;
				
				labelUtil.constrainTextToWidth(player.durationDisplay, formatTimeValue(player.playerDisplay.duration));				
				player.playerDisplay.stopButton.removeEventListener(MouseEvent.CLICK, hsliderFinished);
				player.slider.removeEventListener(Event.ENTER_FRAME, hsliderFinished);							
				generateOutput_button.visible = true;
			}
			
			/* ------------------------  exibição do video com conteudos inseridos pelo usuario ------------------------------ */
			//funcao do listener do play do video para chamar funcao responsavel por exibir conteudos inseridos para usuario
			private function playButton_handler(event:MouseEvent):void{
				if(player.playerDisplay.playing){
					player.slider.addEventListener(Event.ENTER_FRAME, showOnMainVideoAdditionalContent);
					trace("Botao play clicado");
				}
			}
			
			private var sound:Sound;
			private var channel:SoundChannel;
			private var hasAudio:Boolean = false;
			private var currentAudio:String;
			private var currentAudioIndex:int;
			//funcao chamada para exibir ao usuário todo o ocnteudo complementar por ele adicionado na ferramenta
			private function showOnMainVideoAdditionalContent(event:Event):void{				
				if(player.playerDisplay.playing){
					//trace("antes do for");
					for(var i:int = 0; i < allContentInfo.length; i++){
						//trace("o q q tem na bagaca: " + allContentInfo.getItemAt(i));
						if(allContentInfo.getItemAt(i) is TextContent){
							//trace("teste p/ texto");
							//trace(player.slider.value + " = " + allContentInfo.getItemAt(i).textBeginTime);
							if(player.slider.value >= allContentInfo.getItemAt(i).textBeginTime && player.slider.value <= allContentInfo.getItemAt(i).textEndTime){
								trace("exibe texto");
								textEdited.x = parseFloat(((allContentInfo.getItemAt(i).positionX * 520)/100).toFixed(0));
								textEdited.y = parseFloat(((allContentInfo.getItemAt(i).positionY * 340)/100).toFixed(0));
								textEdited.width = parseFloat(((allContentInfo.getItemAt(i).textWidth * 520)/100).toFixed(0));
								textEdited.height = parseFloat(((allContentInfo.getItemAt(i).textHeight * 340)/100).toFixed(0));
								textEdited.htmlText = allContentInfo.getItemAt(i).textData;
								//trace("o que exibe: " + textEdited.htmlText);
								var backgroundColor:uint;
								var backgroundColorUtils:BackGroundColorUtils = new BackGroundColorUtils();
								backgroundColor = backgroundColorUtils.get_uintColor(allContentInfo.getItemAt(i).textBackgroundColor);
								textEdited.setStyle('contentBackgroundColor', backgroundColor);
								textDragArea.visible = true;
								textEdited.visible = true;								
								break;
							}
							else{
								textDragArea.visible = false;
								textEdited.visible = false;
							}
						}
						else{
							if(allContentInfo.getItemAt(i) is ImageContent){
								//trace(player.slider.value + " = " + allContentInfo.getItemAt(i).imageBeginTime + "   i=" + i);								
								if(player.slider.value >= allContentInfo.getItemAt(i).imageBeginTime && player.slider.value <= allContentInfo.getItemAt(i).imageEndTime){
									//trace("exibe imagem");									
									myimg.x = parseFloat(((allContentInfo.getItemAt(i).positionX * 520)/100).toFixed(0));
									myimg.y = parseFloat(((allContentInfo.getItemAt(i).positionY * 340)/100).toFixed(0));
									myimg.source = allContentInfo.getItemAt(i).imagePath;									
									myimg.width = allContentInfo.getItemAt(i).width_toolRelative;
									myimg.height = allContentInfo.getItemAt(i).height_toolRelative;
									myimg.visible = true;
									imageDragArea.visible = true;									
									break;
								}
								else{
									//trace("...");
									myimg.visible = false;
									imageDragArea.visible = false;																	
								}
							}
							else{
								if(allContentInfo.getItemAt(i) is AudioContent){																
									if(allContentInfo.getItemAt(i).audioPath != "" && !hasAudio){
										if(player.slider.value >= allContentInfo.getItemAt(i).audioBeginTime && player.slider.value <= allContentInfo.getItemAt(i).audioEndTime &&
											currentAudio != allContentInfo.getItemAt(i).audioPath){
											//trace("tem audio");
											currentAudio = allContentInfo.getItemAt(i).audioPath;
											player.playerDisplay.volume = 0.1;											
											sound = new Sound();
											channel = new SoundChannel();
											sound.load(new URLRequest(allContentInfo.getItemAt(i).audioPath));
											channel = sound.play();
											channel.addEventListener(Event.SOUND_COMPLETE, finishAudio);	
											hasAudio = true;
											currentAudioIndex = i;
											break;
										}
										else{
											//trace("i: " + i + "   currentAudioIndex: " + currentAudioIndex )
											if((player.slider.value < allContentInfo.getItemAt(i).audioBeginTime || player.slider.value > allContentInfo.getItemAt(i).audioEndTime) && 
												(i == currentAudioIndex)){
												currentAudio = "";
												//trace("liberou audio");												
											}
										}
									}									
								}							
							}
						}
					}									
				}				
			}
			
			//handler que para áudio gravado quando este termina voltando volume da midia principal ao normal
			private function finishAudio(event:Event):void{
				trace("terminou audio");
				hasAudio = false;
				channel.stop();
				player.playerDisplay.volume = 1;	
			}
			
			//handler que recebe evento com conteudo do array com todos os conteudos complementares com tempos dos áudios atualizados
			//atualiza atual allContentInfo
			private function allContentInfo_update(event:EventWithInfo):void{
				trace("recebeu evento de update no allContentInfo");
				allContentInfo = event.getInfo();
			}			
			/* --------------------------------------------------------------------------------------------------------------- */
						
			/* ----------- funções ligadas a barra de menus do programa --------------- */
			private function menuHandler(event:MenuEvent):void{
				trace("menu");
				//mostra msg apenas para submenus
				if(event.item.@data != "top"){
					if(event.item.@label == "Salvar"){
						trace("teste salvar");
						Alert.show("Funcionalidade ainda em testes!", "Salvar");
						//chama funcao para salvar os dados
						//this.testeXml();
					}
					if(event.item.@label == "Logar como Narrador"){
						var found:Boolean = false;
						if(allContentInfo.length > 0){
							for(var i:int = 0; i < allContentInfo.length; i++){
								if(allContentInfo.getItemAt(i) is AudioContent)
									found = true;								
								else
									found = false;
							}
							
							if(found){
								//viewstack1.selectedIndex = Number(event.item.@data);
								//trace("opcao do narrador selecionada " + event.item.@data);
								viewstack1.selectedIndex = Number(event.item.@data);
								narratorInterface.visible = true;
								mainInterface.visible = false;
								contenterEnable = true;
								narratorEnable = false;
								
								var eventoAudio:EventWithInfo = new EventWithInfo("eventoAudio");
								eventoAudio.setInfo(allContentInfo);
								this.dispatchEvent(eventoAudio);						
							}
							else
								Alert.show("Não há conteúdo de áudio a ser gravado ainda para este projeto", "ERRO");
						}
						else{
							Alert.show("Não há conteúdo de áudio a ser gravado ainda para este projeto", "ERRO");
						}
					}
					if(event.item.@label == "Logar como Conteudista"){
						if(narratorInterface){
							narratorInterface.visible = false;
						}
						mainInterface.visible = true;
						narratorEnable = true;
						contenterEnable = false;
					}					
				}				
			}
			
			//handler da barra de menus que trata ao iniciar a ferramenta de deixar desabilitada a opção de login como conteudista visto que vc 
			//ja esta nesta função
			protected function menuBar_clickHandler(event:MouseEvent):void
			{
				if(event.target.hasOwnProperty("data")){
					if(event.target.data.@index == 1 && mainInterface.visible){
					contenterEnable = false;
					}
				}						
			}
			/* ------------------------------------------------------------ */			
		]]>
	</fx:Script>
	
	<!--- ******************************************* Grupo correspondente a interface principal da ferramenta ********************************************* -->
	<s:Group id="mainInterface" width="100%" height="100%" top="2" bottom="2" right="2" left="2">
		<s:Button id="newProject" horizontalCenter="0" top="170" label="Novo Projeto" click="newProject_clickHandler(event)"/>
		<s:Button id="openExistingProject" horizontalCenter="0" top="199" label="Abrir Projeto Existente"/>
		<s:Label id="msg1" width="270" height="48" fontFamily="Arial" fontSize="21"
				 text="Ferramenta para autoria de conteúdo complementar" textAlign="center" top="80"
				 horizontalCenter="0"/>
		<s:Image id="logo" width="148" height="86" source="assets/logo.png" right="60" bottom="20" />		
			
		<!-- ********************************************* Geração da saída NCL ******************************************************* -->
		<s:Button id="generateOutput_button" label="Gerar Documento Multimídia" visible="false" right="80" top="450" height="23" click="generateOutputButton_handler(event)"/>
		<s:Label id="multimidiaOutput_label" text="Selecione o formato de saída:" top="453" right="200" visible="false"/>
		<ComboBox:DisabledComboBox id="multimidiaOutput_combobox" visible="false" right="80" top="445" height="27" 
								   dataProvider="{multimidiaOutput}" labelField="type" change="multimidiaOutputComboBox_handler(event)"/>
		<s:Button id="NCL_button" top="480" right="80" label="Gerar" visible="false" height="23" click="NCL_button_clickHandler(event)"/>
		<!-- ************************************************************************************************************************** -->
		
		<s:Label id="msgDestaques" top="100" width="270" height="48" fontFamily="Arial" fontSize="21" visible="false"
				 horizontalCenter="303" text="Destaques" textAlign="center" verticalAlign="middle"/>
		<local:PlayerComponent id="player" visible="false" top="72" width="534" height="379"
							   horizontalCenter="-364"/>
		
		<!-- datagrid que guarda informações dos destaques feitos pelo usuário -->
		<local:CustomDataGrid id="myDG" visible="false" top="138" width="617" height="243"
							  creationComplete="init()" dataProvider="{tasks}" editable="true"
							  horizontalCenter="285" itemClick="editCell(event)" sortableColumns="false"
							  itemEditBeginning="checkEdit(event)" itemEditEnd="editEnd(event)">
			<local:columns>
				<mx:DataGridColumn headerText="                               Nome do destaque" textAlign="left" width="500" 
								   dataField="nomeDestaque" editable="true" editorDataField="text"/>
				<mx:DataGridColumn headerText="Inicio" textAlign="center" dataField="tInicial" width="120" editable="true" />
				<mx:DataGridColumn headerText="Fim" textAlign="center" dataField="tFinal" width="120" editable="true" />
				<mx:DataGridColumn headerText=" " dataField="botaoEditar" width="55" editable="false">
					<mx:itemRenderer>
						<!--fx:Component>
							<mx:Button label="editar" click="outerDocument.editDetach()"/>												
						</fx:Component-->
						<fx:Component>
							<mx:HBox label="editar" horizontalAlign="center">
								<mx:Image source="@Embed(source='assets/editar.png')"
										  buttonMode="true" click="outerDocument.editDetach()"/>
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>				
				</mx:DataGridColumn>
				
				<mx:DataGridColumn headerText=" " dataField="botaoExcluir" width="55" editable="false">
					<mx:itemRenderer>
						<!--fx:Component>
							<mx:Button label="excluir" click="outerDocument.excluirDestaque()" />
						</fx:Component-->
						<fx:Component>
							<mx:HBox label="excluir" horizontalAlign="center">
								<mx:Image source="@Embed(source='assets/excluir.png')"
										  buttonMode="true" click="outerDocument.excluirDestaque()"/>
							</mx:HBox>
						</fx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
			</local:columns>
		</local:CustomDataGrid>	
			
		<s:DropDownList id="dropDownList" visible="false" right="380" top="80" width="217" height="23"
						prompt="Filtrar intervalos de silêncio"
						change="dropdownlist1_changeHandler(event)"> 
			<mx:ArrayCollection>
				<fx:String>a partir de 2s</fx:String>
				<fx:String>a partir de 4s</fx:String>
				<fx:String>a partir de 6s</fx:String>
				<fx:String>a partir de 8s</fx:String>			
			</mx:ArrayCollection>
		</s:DropDownList>			
		<s:Button id="dropDownListOkButton" right="330" top="80" width="45" label="ok" 
				  fontFamily="Arial" fontSize="12" visible="false" height="23" click="okButtonHandler(event)" />
		<s:Button id="beginEdition_button" label="Adicionar conteúdo complementar" right="45" top="80" height="23" visible="false" 
				  click="beginEditionButton_handler(event)"/>
		<local:EditionIcons id="editionIcons" right="220" top="2" width="332" height="142" visible="false"/>
				
		<s:Button id="volta" left="55" top="478" width="76" label="voltar" visible="false" click="voltar(event)"/>
		<s:Button id="xmlContent_button" left="55" top="507" width="133" label="Finalizar edição" 
				  visible="false" click="xmlContent_button_clickHandler(event)"/>		
		
		<!-- grupo que contem as barrinhas com intervalos de interesse -->
		<s:Scroller id="barsContainer" top="125" right="32" width="731" height="310" visible="false">
			<s:Group id="silenceBarsContainer" left="5" right="9" top="1" bottom="1"/>	
		</s:Scroller>		
		<s:Group id="barsContainer_label" top="460" right="35" width="241" height="100" visible="false">
			<s:Label text="LEGENDA" top="10" left="83"/>
			<s:TextArea top="35" left="10" width="15" height="10" contentBackgroundColor="0xFF0000" editable="false"/>
			<s:Label text="intervalo de silêncio não editado" top="35" left="33" fontSize="13"/>
			<s:TextArea top="50" left="10" width="15" height="10" contentBackgroundColor="0x00FF00" editable="false"/>
			<s:Label text="intervalo de silêncio editado" top="50" left="33" fontSize="13"/>
			<s:TextArea top="65" left="10" width="15" height="10" contentBackgroundColor="0x808000" editable="false"/>
			<s:Label text="conteúdo complementar de imagem" top="65" left="33" fontSize="13"/>
			<s:TextArea top="80" left="10" width="15" height="10" contentBackgroundColor="0x0000FF" editable="false"/>
			<s:Label text="conteúdo complementar de texto" top="80" left="33" fontSize="13"/>
		</s:Group>
					
		<mx:ProgressBar id="progressBar" visible="false" width="220"
						label="Carregando dados %3%%" maximum="100" minimum="0" mode="manual" />
		
		<!-- ********************************************* componentes utilizados na edição de imagem *********************************************** -->
		<s:BorderContainer id="imageEditionContainer" visible="false" left="623" top="499" width="499" height="134" cornerRadius="10" borderAlpha="0.8">
			<s:Group left="2" right="2" top="2" bottom="2">
				<s:Label id="imageBeginText" visible="true" left="8" top="8" width="49" height="29" text="Início: "/>
				<mx:TextInput id="imageBegin" visible="true" left="56" top="8" width="105" height="26"/>
				<s:Label id="imageEndText" visible="true" left="15" top="37" width="43" height="29" text="Fim: "/>
				<mx:TextInput id="imageEnd" visible="true" left="56" top="38" width="105" />
				<s:Button id="imageSelection" visible="false" left="7" top="72" label="Selecionar imagem"/>
				<mx:Label id="imagePath" visible="false" left="170" top="73" width="199" height="21" text=""/>
				<s:Button id="okImageSelection" visible="false" left="377" top="72" width="47" label="OK"/>
				<s:Button id="cancelImageEdition" visible="true" left="8" top="101" label="Cancelar"/>
				<s:Button id="finishImageEdition" left="377" visible="false" top="101" label="Finalizar"/>
				<s:CheckBox id="showImageOnTv" label="TV" top="13" left="200" selected="true" visible="false"/>
				<s:CheckBox id="showImageOnMobile" label="Mobile" top="33" left="200" selected="false" visible="false"/>
				<s:Button id="excludeImage" left="97" top="101" label="Excluir" visible="false" />
			</s:Group>
		</s:BorderContainer> 
		
		<s:BorderContainer id="pictureControls" left="285" top="499" width="256" height="132" visible="false" cornerRadius="10" >
			<s:Group top="5" bottom="2" left="7" right="2">
				<s:VSlider id="image_height" right="61" top="29" height="64" minimum="4" change="image_height_changeHandler(event)"/>
				<s:HSlider id="image_width" right="75" top="91" width="77" minimum="4" change="image_width_changeHandler(event)"/>
				<s:Label right="96" top="5" color="#FA0101" fontSize="16" fontWeight="normal"
						 text="Controles da imagem&#xd;" textDecoration="underline"/>
				<s:Label right="13" top="51" fontSize="14" text="Vertical&#xd;"/>
				<s:Label right="73" top="103" fontSize="14" text="Horizontal&#xd;"/>
				<s:CheckBox id="ratioCheckBox" right="95" top="42" label="Manter proporções"
							change="checkbox1_changeHandler(event)" fontSize="12" selected="false"
							textDecoration="none"/>
			</s:Group>
		</s:BorderContainer> 
		
		<mx:Canvas id="imageDragArea" top="80" horizontalCenter="-362" width="520" height="340"
				   verticalScrollPolicy="off" horizontalScrollPolicy="off" borderStyle="solid" visible="false">		
			<mx:Image id="myimg" mouseUp="myimg.stopDrag()" mouseDown="myimg.startDrag()" visible="false" maintainAspectRatio="false"/>			 
		</mx:Canvas>		
		<!-- *************************************************************************************************************************************** -->
		
		<!-- ********************************************* componentes utilizados na edição de texto *********************************************** -->
		<s:BorderContainer id="textEditionContainer" visible="false" left="615" top="452" width="551" height="218" cornerRadius="10" borderAlpha="0.8">
			<s:Group top="2" bottom="0" left="2" right="2">
				<s:Label id="textBeginText" visible="true" left="15" top="16" width="49" height="29" text="Início: "/>
				<mx:TextInput id="textBegin" visible="true" left="63" top="16" width="105" height="26"/>
				<s:Label id="textEndText" visible="true" left="22" top="45" width="43" height="29" text="Fim: "/>
				<mx:TextInput id="textEnd" visible="true" left="63" top="46" width="105" />
				<mx:RichTextEditor id="textEditionComponent" left="202" top="1" width="333" height="210" 
								   creationComplete="removeLinkTextInput()" title="Edição de Texto" verticalAlign="top" visible="false">			
				</mx:RichTextEditor>
				<s:Button id="finishTextEdition" left="98" top="107" label="Finalizar" visible="false"/>
				<s:Button id="cancelTextEdition" left="8" top="107" label="Cancelar" visible="true" click="cancelTextEdition_handler(event)"/>
				<s:CheckBox id="showTextOnTv" label="TV" top="135" left="22" selected="true" visible="false"/>
				<s:CheckBox id="showTextOnMobile" label="Mobile" top="155" left="22" selected="false" visible="false"/>
				<s:Button id="excludeText" left="65" top="185" label="Excluir" visible="false" />
					
				<mx:TextArea id="templateTextArea" left="195" top="60" height="95" visible="false"/>
				<s:Label id="templateTextLabel" left="241" top="41" text="Digite seu texto:&#xd;" visible="false"/>		
				<s:CheckBox id="templateTextCheckBox" left="22" top="76" label="Habilitar template" visible="false" selected="false"/>
			</s:Group>
		</s:BorderContainer>
		
		<s:BorderContainer id="textAreaControls" left="283" top="489" width="226" height="132" visible="false" cornerRadius="10">
			<s:Group top="5" bottom="2" left="7" right="2">
				<s:VSlider id="textArea_height" right="61" top="29" height="64" minimum="4" change="text_height_changeHandler(event)"/>
				<s:HSlider id="textArea_width" right="75" top="91" width="77" minimum="4" change="text_width_changeHandler(event)"/>
				<s:Label right="86" top="8" color="#FA0101" fontSize="16" fontWeight="normal"
						 text="Controles do texto&#xd;" textDecoration="underline"/>
				<s:Label right="13" top="51" fontSize="14" text="Vertical&#xd;"/>
				<s:Label right="73" top="103" fontSize="14" text="Horizontal&#xd;"/>		
			</s:Group>	
		</s:BorderContainer>
		
		<mx:Canvas id="textDragArea" top="80" horizontalCenter="-362" width="520" height="340"
				   verticalScrollPolicy="off" horizontalScrollPolicy="off" borderStyle="solid" visible="false">		
			<mx:TextArea id="textEdited" visible="false" editable="false" 
						 mouseDown="textEdited.startDrag()" mouseUp="textEdited.stopDrag()"/>		 
		</mx:Canvas>
		<!-- *************************************************************************************************************************************** -->
		
	</s:Group>
	<!--- **************************************************************************************************************************************************** -->
	
	<!-- barra de menus principal -->
	<mx:MenuBar id="menuBar" visible="false" x="0" y="0" height="26" itemClick="menuHandler(event)" click="menuBar_clickHandler(event)"
				labelField="@label" width="100%" dataProvider="{menuList}" >		
	</mx:MenuBar>
	
	<!-- Canvas com viewstack para controle das interfaces de cada usuario -->	
	<mx:Canvas width="100%" height="100%">
		<mx:ViewStack id="viewstack1" left="10" right="10" top="10" bottom="10">
			<mx:Box width="100%" height="100%">	
				<!-- chama o componente que contem a interface do narrador e todas as suas funcionalidades -->
				<local:Narrator id="narratorInterface" visible="false"/>
			</mx:Box>
			<mx:Box width="100%" height="100%">				
				<!-- inserir interface do administrador posteriormente -->
			</mx:Box>			
		</mx:ViewStack>
	</mx:Canvas>
	
</s:WindowedApplication>