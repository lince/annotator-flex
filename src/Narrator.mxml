<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%" creationComplete="narrator_initializeHandler(event)">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
	
	<![CDATA[
		import MetaDocumentManager.AudioContent;
		import MetaDocumentManager.MainContent;
		
		import flash.sampler.NewObjectSample;
		import flash.utils.getTimer;
		
		import fr.kikko.lab.ShineMP3Encoder;
		
		import mx.collections.ArrayCollection;
		import mx.collections.ListCollectionView;
		import mx.controls.Alert;
		import mx.controls.HTML;
		import mx.controls.ProgressBar;
		import mx.controls.ProgressBarMode;
		import mx.core.Application;
		import mx.core.UIComponent;
		import mx.events.FlexEvent;
		import mx.managers.PopUpManager;
		
		import spark.components.Application;
		import spark.components.Grid;
		import spark.events.GridEvent;
		import spark.events.GridSelectionEvent;
		import spark.events.TrackBaseEvent;
		import spark.skins.spark.DefaultItemRenderer;
	
		//variaveis de gravação
		private var mic:Microphone;			
		private var rec:ByteArray;			
			
		//variaveis utilizadas para o desenho da barra de intensidade do microfone
		private const PLOT_HEIGHT:int = 200; 
		private const CHANNEL_LENGTH:int = 256;
		
		private var audioUrl:String;										//guarda a URL do audio
		private var micActivityIndicator:UIComponent = new UIComponent();	//variavel ligada a parte de desenho da intensidade microfone
		private var lastPosition:Number = 0; 								//guarda ultima posicao em ms do tempo de execução do audio
		
		//variaveis de controle
		private var isRecorded:Boolean = false;
		private var isPlaying:Boolean = false;
		
		//array com todos os conteudos de audio inseridos pelo usuario
		private var audioContentArray:ArrayCollection = new ArrayCollection();
		
		//aguarda evento da interface do conteudista
		protected function narrator_initializeHandler(event:FlexEvent):void
		{			
			systemManager.addEventListener("eventoAudio", eventoAudio);			
		}
		
		private var projectName:String;
		private var contentArray:ArrayCollection = new ArrayCollection();
		//metodo que trata o evento recebido da interface do conteudista
		private function eventoAudio(audioEvento:EventWithInfo):void{
			//trace("aeeeeee entrou no q eu queria");			
			contentArray = audioEvento.getInfo();
			var gridDataprovider:ArrayCollection = new ArrayCollection();
			var obj:Object = new Object();
			var rowCounter:int = 0;
						
			for(var i:int = 0; i < contentArray.length; i++){
				if(contentArray.getItemAt(i) is AudioContent){
					trace("tem audio");
					audioContentArray.addItem(contentArray.getItemAt(i));
					obj.audios = contentArray.getItemAt(i).audioId;
					obj.comments = contentArray.getItemAt(i).audioComment;
					
					if(contentArray.getItemAt(i).audioStatus)
						obj.status = "OK";
					else
						obj.status = "Gravar";
					gridDataprovider.addItem(obj);
					rowCounter++;
					obj = new Object();					
				}
				else{
					if(contentArray.getItemAt(i) is MainContent){
						projectName = contentArray.getItemAt(i).projectName;
					}
					else{
						trace("nao tem audio no momento");
					}
				}
			}
			audiosDatagrid.dataProvider = gridDataprovider;			
		}		
		
		//timer para verificacao se o usuario narrou no tempo menor ou igual ao estipulado para o trecho
		private var record_timer:Timer = new Timer(200, audioTime); 
		
		//método que decrementa o tempo necessário para gravação do conteudo
		//caso usuario não termine a gravação é mostrada uma mensagem para que este faça a gravação novamente
		private function countdown(event:TimerEvent):void{
			//trace("atualizando timer");
			if(rec_Btn.label != "Gravar"){
				record_hslider.value += 200;
			}
			
			if(record_hslider.value > audioTime && rec_Btn.label == "Parar"){
				//trace("terminou o tempo");
				record_timer.stop();
				record_hslider.value = 0;
				
				//para gravação e mostra mensagem de erro ao usuário
				rec_Btn.label = "Gravar";
				rec_Btn.selected = false;
				mic.removeEventListener(SampleDataEvent.SAMPLE_DATA, getMicAudio);									
				ply_Btn.enabled=false;
				stopAudio_button.enabled=false;
				micActivityIndicator.visible = false;
				microphoneIntensity_label.visible = false;
				Alert.show("É necessário que você fale mais rápido!", "Alerta");								
			}
			else{
				if(record_hslider.value > audioTime){
					record_timer.stop();
					record_hslider.value = 0;
				}
			}
		}		
		
		//handler do botao de gravação
		protected function recBtn_clickHandler(event:MouseEvent):void{
			trace("recebeu evento");
			if(event.currentTarget.selected == true){				
				microphoneIntensity_label.visible = true;
				record_hslider.value = 0;
				record_hslider.track.enabled = false;
				
				//inicia timer para avançar o hslider de gravação 			
				record_timer.addEventListener(TimerEvent.TIMER, countdown);				
				record_timer.start();				
				
				event.currentTarget.label = "Parar";					
				rec=new ByteArray();					
				mic = Microphone.getMicrophone();					
				mic.rate=44;					
				mic.addEventListener(SampleDataEvent.SAMPLE_DATA, getMicAudio);				
				ply_Btn.enabled=false;
				stopAudio_button.enabled=false;
				saveButton.enabled = false;
				micActivityIndicator.visible = true;
				microphoneIntensity_label.visible = true;				
				var micDelay:uint = 100;
				var micRepeat:uint = 0; /* Run forever */
				var micTimer:Timer = new Timer(micDelay, micRepeat);
				micTimer.start();
				micTimer.addEventListener(TimerEvent.TIMER, ShowMicActivity);
				audioRecorded_hslider.value = 0;	
			}					
			else{				
				mic.removeEventListener(SampleDataEvent.SAMPLE_DATA, getMicAudio);					
				event.currentTarget.label = "Gravar";	
				isRecorded = false;
				this.encodeToMp3(rec);					
				ply_Btn.enabled=true;
				stopAudio_button.enabled=true;
				saveButton.enabled = true;
				audioRecorded_hslider.visible = true;
				audioRecorded_hslider.minimum = 0;				
			}				
		}	
				
		//funcao que desenha a intensidade do microfone na tela
		private function ShowMicActivity(e:TimerEvent):void {			
			if (mic.activityLevel > 0) {
				var h:int = mic.activityLevel;				
			} 
			else{
				h = 5;				
			}
			micActivityIndicator.graphics.clear();
			micActivityIndicator.graphics.beginFill(0x000000);
			micActivityIndicator.graphics.drawRect(50, 23, h, 10);
			micActivityIndicator.graphics.endFill();
			recordComponent.addElement(micActivityIndicator);
			micActivityIndicator.bottom = 3;
			micActivityIndicator.left = 8;
			micActivityIndicator.rotation = -90;
		}

		//handler do botao de play/pause do áudio gravado 
		private var channel:SoundChannel;			
		private var snd:Sound;				
		protected function plyBtn_clickHandler(event:MouseEvent):void{
			if(event.currentTarget.selected == true){
				event.currentTarget.label = "Pause";
				rec.position = 0;						
				channel = new SoundChannel();
				snd = new Sound();
				snd.load(new URLRequest(audioUrl));
				channel = snd.play(lastPosition);
				channel.addEventListener(Event.SOUND_COMPLETE, finishAudio);					
				//stopAudio_button.addEventListener(MouseEvent.CLICK, stopPlayingAudio);
				addEventListener(Event.ENTER_FRAME, updateHSlider);
				audioRecorded_hslider.addEventListener(TrackBaseEvent.THUMB_PRESS, hslider_pressed);
				audioRecorded_hslider.addEventListener(TrackBaseEvent.THUMB_DRAG, hslider_dragged);
				audioRecorded_hslider.addEventListener(TrackBaseEvent.THUMB_RELEASE, hslider_released);
				audioRecorded_hslider.addEventListener(Event.CHANGE, hslider_changed);
				isPlaying = true;			
			}					
			else{					
				event.currentTarget.label = "Tocar";
				lastPosition = channel.position;
				channel.stop();	
				isPlaying = false;
				removeEventListener(Event.ENTER_FRAME, updateHSlider);				
			}			
		}
		
		/* ------------------------ handlers do hslider de exibição do áudio gravado ------------------------------ */
		private function updateHSlider(event:Event):void{
			//trace("atualizando");
			//trace("atual: " + channel.position + " total: " + snd.length);
			audioRecorded_hslider.maximum = snd.length;
			audioRecorded_hslider.value = channel.position;				
		}
		
		private function hslider_pressed(event:TrackBaseEvent):void{
			//trace("pressed");
			removeEventListener(Event.ENTER_FRAME, updateHSlider);
			lastPosition = channel.position;
			channel.stop();
		}
		
		private function hslider_dragged(event:TrackBaseEvent):void{
			//trace("dragged");
			lastPosition = audioRecorded_hslider.value				
		}
		
		private function hslider_released(event:TrackBaseEvent):void{
			//trace("released");
			if(isPlaying){					
				channel.stop();
				channel = snd.play(lastPosition);					
				channel.addEventListener(Event.SOUND_COMPLETE, finishAudio);
				addEventListener(Event.ENTER_FRAME, updateHSlider);
			}
		}
		
		private function hslider_changed(event:Event):void{
			//trace("changed");
			removeEventListener(Event.ENTER_FRAME, updateHSlider);
			channel.stop();
			lastPosition = audioRecorded_hslider.value;
			
			if(isPlaying){
				channel = snd.play(lastPosition);
				channel.addEventListener(Event.SOUND_COMPLETE, finishAudio);
				addEventListener(Event.ENTER_FRAME, updateHSlider);	
			}						
		}
		
		private function finishAudio(event:Event):void{
			trace("terminou audio");
			audioRecorded_hslider.maximum = audioRecorded_hslider.value;
			channel.stop();
			ply_Btn.selected = false;
			ply_Btn.label = "Tocar";
			lastPosition = 0;
			removeEventListener(Event.ENTER_FRAME, updateHSlider);
			audioRecorded_hslider.value = 0;
		}
		/* ------------------------------------------------------------------------------------------------------- */
		
		//handler do botão de stop
		private function stopPlayingAudio(event:MouseEvent):void{
			removeEventListener(Event.ENTER_FRAME, updateHSlider);
			channel.stop();
			audioRecorded_hslider.value = 0;
			lastPosition = 0;
			ply_Btn.selected = false;
			ply_Btn.label = "Tocar";
		}
		
		//handler microfone
		private function getMicAudio(e:SampleDataEvent): void{
			rec.writeBytes(e.data);								
		}	
		
		//funcao chamada quando usuário clica no botão para salvar audio gravado
		private var file:File = new File( );
		private var saved:Boolean = false;
		private function save():void{	
			if(!isRecorded){
				encodeToMp3(rec);
			}
			audioRecorded_hslider.value = 0;
			lastPosition = 0;
			Alert.show("Áudio salvo com sucesso", "Mensagem");	
			
			ListCollectionView(audiosDatagrid.dataProvider).getItemAt(selected).status = "OK";				
			audiosDatagrid.invalidateCell(selected, 2);	
			
			//atualiza status do objeto
			for(var i:int = 0; i < contentArray.length; i++){
				if(contentArray.getItemAt(i) is AudioContent){
					if(contentArray.getItemAt(i).audioId == "audio" + selected){
						//trace("atualizou");
						contentArray.getItemAt(i).audioStatus = true;
						contentArray.getItemAt(i).audioPath = audioUrl;
						//trace("antes: " + contentArray.getItemAt(i).audioEndTime + "  gravador parado posicao: " + (record_hslider.value/1000).toFixed(1));
						contentArray.getItemAt(i).audioEndTime = contentArray.getItemAt(i).audioBeginTime + parseFloat((record_hslider.value/1000).toFixed(1));
						//trace("depois " + contentArray.getItemAt(i).audioEndTime);
					}
				}
			}
			
			var eventoAudio:EventWithInfo = new EventWithInfo("audioUpdate");
			eventoAudio.setInfo(contentArray);
			this.dispatchEvent(eventoAudio);
			
			saveButton.enabled = false;		
		}
		
		//funcao que transforma audio .wav em .mp3
		public function encodeToMp3(bytes:ByteArray) : void {
			var panel2:spark.components.Panel = new spark.components.Panel;	
			var pBar:ProgressBar;
			panel2.title = "Progresso";
			panel2.width = 400;
			panel2.height = 150;				
			pBar = new ProgressBar();
			pBar.left = 20;
			pBar.right = 20;
			pBar.top = 65;
			pBar.indeterminate = false;			
			pBar.mode = ProgressBarMode.MANUAL;					
			panel2.addElement(pBar);
			PopUpManager.addPopUp(panel2, this, true);
			PopUpManager.centerPopUp(panel2);				
			
			if(!isRecorded){
				var wav:WAVWriter = new WAVWriter();
				var mp3Encoder:ShineMP3Encoder;
				wav.numOfChannels = 1;
				wav.sampleBitRate = 16;
				wav.samplingRate = 44100;
				
				bytes.position = 0;
				var wavData : ByteArray = new ByteArray();
				wavData.endian = Endian.BIG_ENDIAN;
				wav.processSamples(wavData,bytes,44100,1);			
				wavData.position = 0;
				
				mp3Encoder = new ShineMP3Encoder(wavData);
				mp3Encoder.addEventListener(Event.COMPLETE, mp3EncodeComplete);
				mp3Encoder.addEventListener(ProgressEvent.PROGRESS, mp3EncodeProgress);
				mp3Encoder.addEventListener(ErrorEvent.ERROR, mp3EncodeError);
				mp3Encoder.start();
				
			
				function mp3EncodeProgress(event : ProgressEvent) : void {
					pBar.setProgress(event.bytesLoaded, event.bytesTotal);
					pBar.label = "Configurando áudio...  [" + Math.round(event.bytesLoaded / event.bytesTotal * 100).toString() + "%]";
					//trace(event.bytesLoaded + " de " + event.bytesTotal);
				}
			
				//mostra mensagem de erro caso ocorra algum problema na conversão
				function mp3EncodeError(event : ErrorEvent) : void {
					Alert.show(event.toString());
				}
			
				//função chamada quando o processo de conversão termina
				function mp3EncodeComplete(event : Event) : void {
					var stream:FileStream = new FileStream();
					var file:File = File.documentsDirectory.resolvePath(projectName + "/NCL/media/audio/audio" + selected + ".mp3");
					audioUrl = File.documentsDirectory.resolvePath(projectName + "/NCL/media/audio/audio" + selected + ".mp3").nativePath;
					trace(audioUrl);
					stream.open( file, FileMode.WRITE );
					stream.writeBytes(mp3Encoder.mp3Data);
					stream.close();
					pBar.label = "";
					PopUpManager.removePopUp(panel2); //remove o painel da tela					
				}
				isRecorded = true;
			}
		}
		
		//atualiza a linha do datagrid quando audio correspondente é gravado
		protected function audiosDatagrid_selectionChangeHandler(event:GridSelectionEvent):void
		{
			trace("entrou no evento");
			const eventGrid:Grid = event.currentTarget.grid;
			var currentIndx:int = eventGrid.selectedIndex; 
			var currentDataItem:Object = eventGrid.selectedItem; 
			trace(currentDataItem.status);
			currentDataItem.status = "OK";			
		}
		
		//funcao que gerencia a linha do datagrid selecionada pelo usuário
		private var selected:int;
		private var audioTime:Number;
		protected function audiosDatagrid_gridClickHandler(event:GridEvent):void
		{
			trace(event.rowIndex);
			selected = event.rowIndex;
			var selectedString:String = "audio" + event.rowIndex.toString();
			
			for(var i:int = 0; i < audioContentArray.length; i++){
				if(audioContentArray.getItemAt(i).audioId == selectedString){
					audioText.text = audioContentArray.getItemAt(i).audioData;
					audioTime = (audioContentArray.getItemAt(i).audioEndTime - audioContentArray.getItemAt(i).audioBeginTime)*1000;
					audioTotalTime.text = (audioContentArray.getItemAt(i).audioEndTime - audioContentArray.getItemAt(i).audioBeginTime).toFixed(1);
					record_hslider.maximum = audioTime;
					record_hslider.value = 0;
				}
			}			
		}
		
	]]>	
	</fx:Script>	
	
	<s:layout>
		<s:HorizontalLayout paddingTop="20" paddingLeft="20" paddingRight="20" gap="40"
						  horizontalAlign="center"/>
	</s:layout>
	<s:Group left="10" top="10" width="523" height="642">
		<s:Label left="90" top="57" text="Tabela com áudios a serem gravados" fontSize="20"/>
		<s:DataGrid id="audiosDatagrid" left="10" top="82" width="503" requestedRowCount="4" editable="true" 
					gridClick="audiosDatagrid_gridClickHandler(event)" >
			<s:columns>
				<s:ArrayList>
					<s:GridColumn dataField="audios" headerText="Audios" width="80" editable="false"></s:GridColumn>
					<s:GridColumn dataField="comments" headerText="Comentários" width="350" editable="false"></s:GridColumn>					
					<s:GridColumn id="audioStatus" dataField="status" headerText="Status" width="70" editable="false">				
					</s:GridColumn>
				</s:ArrayList>
			</s:columns>		
		</s:DataGrid>
	</s:Group>
	
	<s:Group left="622" top="62" width="606" height="635">
		<s:Label id="audioText_label" left="253" top="20" text="Texto a ser narrado:&#xd;" fontSize="20"/>
		<s:TextArea id="audioText" left="126" top="47" width="435" height="252" editable="false"/>
		<s:TextArea id="audioTotalTime" x="451" y="305" width="72" height="21"/>
		<s:Label x="172" y="309" text="Tempo máximo a ser gasto na narração"/>
		
		
		<s:Group id="recordComponent" horizontalCenter="42" verticalCenter="167" width="430" height="197" visible="true">
			<s:BorderContainer top="2" left="2" right="2" bottom="3" width="430" height="197">
			<s:ToggleButton id="rec_Btn" left="69" top="138" width="78" height="40" label="Gravar" click="recBtn_clickHandler(event)"/>	
			<s:ToggleButton id="ply_Btn" left="242" top="138" width="78" height="40" label="Tocar"
							click="plyBtn_clickHandler(event)" enabled="false"/>	
			<s:Label left="363" top="20" text="0" id="lbl" visible="false"/>
			<s:Button id="saveButton" left="328" top="138" width="78" height="40" label="Salvar"
					  click="save()"/>
			<s:Button id="stopAudio_button" x="156" y="138" width="78" height="40" label="Parar"
					  click="stopPlayingAudio(event)" enabled="false"/>
			<s:HSlider id="audioRecorded_hslider" visible="false" left="64" top="117" width="344" height="12" />			
			<s:Label id="microphoneIntensity_label" visible="false" left="5" top="9" text="Intensidade&#xd;" color="0xFF0000" fontSize="12"/>
			<s:Label left="165" top="43" text="GRAVAÇÃO&#xd;" fontWeight="bold" fontSize="17"/>
			</s:BorderContainer>
		</s:Group>
		
		<s:HSlider id="record_hslider" x="125" y="332" width="435" height="15" enabled="false"/>		
		<s:Label x="528" y="309" text="s&#xd;"/>
	</s:Group>
	
	<!--s:TextArea id="timeValue" x="664" y="443" width="101" height="21"/-->	
	<!--s:itemRenderer>
	<fx:Component>
	<s:DefaultGridItemRenderer background="true" backgroundColor="0x000000" click="defaultgriditemrenderer1_clickHandler(event)">							
	
	<fx:Script>
	<![CDATA[
	import flashx.textLayout.formats.BackgroundColor;
	protected function defaultgriditemrenderer1_clickHandler(event:MouseEvent):void
	{
	if((event.target as DefaultGridItemRenderer).backgroundColor == 0x000000){
	trace("cor preta");
	}											
	}
	]]>
	</fx:Script-->	
</s:Group>
